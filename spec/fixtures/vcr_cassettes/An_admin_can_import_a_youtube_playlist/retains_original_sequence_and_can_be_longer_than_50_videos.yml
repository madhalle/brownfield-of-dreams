---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=100&pageToken&part=snippet,contentDetails&playlistId=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 08 Jul 2020 02:18:02 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "m0vBCWnujQNNkRhMuw5C5NQErnQ",
  "nextPageToken": "CDIQAA",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "zWVa48Oj_mfC21yPs3AjQjL57vQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zNjkwOEVDNDhGOTA4QzE0",
      "snippet": {
        "publishedAt": "2020-05-11T23:11:57Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "DaBaby – ROCKSTAR FT RODDY RICCH [Audio]",
        "description": "DaBaby – ROCKSTAR FT RODDY RICH \nListen: https://smarturl.it/BlameItOnBaby\nSpotify: https://smarturl.it/BlameItOnBaby/spotify\nApple Music: https://smarturl.it/BlameItOnBaby/Applemusic\n \nConnect:\nhttps://instagram.com/dababy\nhttps://twitter.com/dababydababy\nhttps://www.facebook.com/babyjesus704/\n \n#Dababy #BlameItOnBaby",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/83xBPCw5hh4/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "83xBPCw5hh4"
        }
      },
      "contentDetails": {
        "videoId": "83xBPCw5hh4",
        "videoPublishedAt": "2020-04-17T04:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "LDfq-xNjdB9FXlMZBt4ftP21Nxk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMTY1Mzc1QjRBNTM5MURF",
      "snippet": {
        "publishedAt": "2020-05-11T23:11:07Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Megan Thee Stallion - Savage Remix (feat. Beyoncé) [Official Audio]",
        "description": "The official audio for Megan Thee Stallion's \"Savage Remix\" featuring Beyoncé - Out Now! With all artists’ proceeds benefitting Bread Of Life Houston's COVID-19 Relief efforts in their hometown.\nStream \"Savage Remix (feat. Beyoncé)\" on all platforms now:\nhttps://megantheestallion.ffm.to/savageremix \n\nStream 'SUGA': \nhttps://megantheestallion.ffm.to/suga\n\nFollow Megan Thee Stallion:\nhttps://www.instagram.com/theestallion\nhttps://twitter.com/theestallion\nhttps://www.facebook.com/theestallionn\n\nFollow Beyoncé:\nhttps://www.Beyonce.com\nhttps://www.instagram.com/Beyonce\nhttps://www.facebook.com/Beyonce\nhttps://twitter.com/Beyonce\n\nLYRICS:\nIntro (Beyoncé):\nQueen B, want no smoke with me (okay)\nBeen turnt this motherfucker up 800 degrees\nThe whole team eat, chef kiss cause she’s a treat (muah) Oh she’s so bougie bougie, bon appétit\n\nVerse 1 (Megan):\nI’m a savage\nAttitude nasty\nTalk big shit but my bank account match it\nHood but I’m classy, rich but I’m ratchet\nHaters kept my name in they mouth now they gaggin, ah Bougie, he said the way that thing move is a movie\nI told that boy we gotta keep it low, leave me the room key I done bled the block and now it’s hot , bitch I’m Tunchie\nA mood and I’m moody\n\nChorus (Megan and Beyoncé):\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty\nActing stupid, what's happening? Bitch\nWhat's happening? Bitch\nI'm a savage, (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty\nActing stupid, what's happening? Bitch (whoa, whoa) What's happening? Bitch (whoa, whoa)\n\nVerse 2 (Beyoncé):\nHips tick tock when I dance (dance)\nOn that demon time she might start a Only Fans \nBig B and that B stand for bands \nIf you wanna see some real ass baby here's your chance\nI said left cheek, right cheek, drop it low and then swang \nTexas up in this thang, put you up on this game\nIvy Park on my frame, gang, gang, gang, gang\nIf you don't jump to put jeans on, baby you don't feel my pain (hold up) Please don't get me hyped, write my name in ice \nCan't argue with these lazy bitches , I just raise my price\nI’m a BOSS, I'm a leader, I pull up in my 2 seater\nAnd my mama was a Savage \nNigga got the shit from Tina\n\nChorus (Megan and Beyoncé):\nI'm a savage (yeah)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch What's happening? Bitch (whoa, whoa) I'm a savage, yeah\nClassy, bougie, ratchet, (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch What's happening? (whoa, whoa)\n\nPost Chorus (Megan and Beyoncé):\nLike Beyoncé, like me (like me)\nHe want a bitch like the Stallion with the knees\nHe be like damn how that thang moving in them jeans Even D4L couldn’t do it like me\n\nBridge (Beyoncé):\nOoh..\nI done got this body ready just for you\nGirl I hope he don’t catch me messing around with you Talking to myself in the mirror like bitch you my boo\n\nPre (Megan):\nI’m the shit ou\nI need a mop to clean the floor, it’s too much drip ou I keep a knot, I keep a watch ou\nLets play a game ,Simon says I’m still that bitch aye I’m still that bitch\n\nChorus (Megan and Beyoncé):\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (nasty)\nActing stupid, what's happening? Bitch (whoa, whoa) What's happening? Bitch (whoa, whoa)\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (nasty)\nActing stupid, what's happening? Bitch\nWhat's happening?\n\nVerse 3 (Beyoncé):\nI heard they asking for the queen , they brought some cameras in here I’m a bad bitch, she’s a savage, no comparison here\nI’ma flip my hair and look back while I twerk in the mirror\nAll this money in the room, think some scammers in here\nI’m coming straight up out the third Whip the whip like I stirred it\nWood grain, we swerving\nKeeping his mind all on these curves Coupe fly like a bird\nCold on ‘em like burrrr\nAlways keep my word\nNo I don’t do cross word\nStallion when I ride he like them hot girls with them hips huh...\nI hopped that shit the way I hopped out and slid\nI pop my shit now watch me pop up again\nI mop the floor now watch me sweep up these Ms\n\nChorus (Megan and Beyoncé):\nI'm a savage (yeah)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch (okay), What's happening? Bitch (whoa, whoa)\nI'm a savage, yeah\nClassy, bougie, ratchet, yeah\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch (okay)\n\nOutro (Beyoncé):\nIt’s the Stallion and the Bee H-Town going down\n\n--\n#MeganTheeStallion #Savage #Beyonce #SUGA #OfficialAudio\n\n© 2020 1501 Certified Ent LLC under exclusive license to 300 Entertainment",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lEIqjoO0-Bs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lEIqjoO0-Bs"
        }
      },
      "contentDetails": {
        "videoId": "lEIqjoO0-Bs",
        "videoPublishedAt": "2020-04-29T19:06:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WforEk5eWiXIj8DHhY9RQTTFVc4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xNENDREYwM0NFNzY5NjhG",
      "snippet": {
        "publishedAt": "2020-03-06T00:10:08Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "The Weeknd - Blinding Lights (Official Music Video)",
        "description": "Official music video for The Weeknd \"Blinding Lights\" - available everywhere now: http://theweeknd.co/blindinglightsYD\n\n►Subscribe to The Weeknd on YouTube: http://theweeknd.co/subscribeYD \n\n►Get exclusive merch: https://shop.theweeknd.com/\n\n►Follow The Weeknd:\nhttps://twitter.com/theweeknd\nhttps://www.facebook.com/theweeknd\nhttps://www.instagram.com/theweeknd\nhttps://www.theweeknd.com\nSubscribe to YouTube Music: http://theweeknd.co/blindinglightsYD/youtubemusic \n\nDirector: Anton Tammi\n\nProduction Company: Somesuch \nExecutive Producer: Saskia Whinney\nProducer: Sarah Park\n\nDirector of Photography: Oliver Millar\n2nd Unit DP: Devin “Daddy” Karringten\nSteadicam Op: Niels Lindelien\nGaffer: Nizar Najm\nKey Grip: Marlow Nunez\nProduction Designer: Adam William Wilson\n\n1st AD: Kenneth Taylor\n\nEditor: Janne Vartia & Tim Montana\nPost Production Supervisor: Alec Ernest\nVFX: Mathematic\nColorist: Nicke Jacobsson\nSound Designer: Akseli Soini\n3D: Oscar Böckerman\nTitle Design: Aleksi Tammi\n\n\n►\"Blinding Lights\" Lyrics:\n\nYeah\nI been tryna call\nI been on my own for long enough\nMaybe you can show me how to love, maybe\nI'm going through withdrawals\nYou don't even have to do too much\nYou can turn me on with just a touch, baby\nI look around and Sin City's cold and empty (oh)\nNo one's around to judge me (oh)\nI can't see clearly when you're gone\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nI said, ooh, I'm drowning in the night\nOh, when I'm like this, you're the one I trust\nHey, hey, hey\nI'm running out of time\n'Cause I can see the sun light up the sky\nSo I hit the road in overdrive, baby\nOh, the city's cold and empty (oh)\nNo one's around to judge me (oh)\nI can't see clearly when you're gone\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nI said, ooh, I'm drowning in the night\nOh, when I'm like this, you're the one I trust\nI'm just walking by to let you know (by to let you know)\nI can never say it on the phone (say it on the phone)\nWill never let you go this time (ooh)\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nHey, hey, hey\nHey, hey, hey\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\n\n#TheWeeknd #BlindingLights\n\n\nMusic video by The Weeknd performing Blinding Lights. © 2020 The Weeknd XO, Inc., manufactured and marketed by Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4NRXx6U8ABQ"
        }
      },
      "contentDetails": {
        "videoId": "4NRXx6U8ABQ",
        "videoPublishedAt": "2020-01-21T18:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6LZzWl0UdN39vpRVamQNq6iv3MA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMUIxOTZFRDNDMjU5Nzg2",
      "snippet": {
        "publishedAt": "2020-05-12T18:52:20Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "SAINt JHN - Roses (Imanbek Remix) (Official Music Video)",
        "description": "SAINt JHN - Roses (Imanbek Remix) (Ghetto Lenny One Takes) [Lyric Video]\nStream/Download/Buy: https://marvellousmusic.lnk.to/rosesID\nOfficial Video at @Marvellous: https://www.youtube.com/watch?v=jOMHWVv0xX4&lc\n\n\n+ SUBSCRIBE HERE ▶ https://www.youtube.com/channel/UCxmkHW42679-8rLTAsRyIgA?sub_confirmation=1\n\n\n---Saint Jhn Music\nListen to Ghetto Lenny’s Love Song ▶https://saintjhn.lnk.to/GhettoLennysLoveSongs\n\n\n\nWATCH TRAP MUSIC VIDEO ▶ https://youtu.be/Mf6oZPPYIXI\nWATCH ROSES MUSIC VIDEO ▶ https://youtu.be/XHA-QM-q-3E\nWATCH BORDERS MUSIC VIDEO ▶ https://youtu.be/FPHpS34xNf0\nWATCH LUST MUSIC VIDEO ▶ https://youtu.be/N8Ykxh9n5Hg\nWATCH 3 BELOW MUSIC VIDEO ▶ https://youtu.be/R5GNIZP0ceE\nWATCH 1999 MUSIC VIDEO ▶ https://youtu.be/ubWN0peTgHI\nWATCH BEEN THRU THIS BEFORE MUSIC VIDEO ▶ https://youtu.be/9A6QrnFpFjI\nWATCH WEDDING DAY ONE TAKE ▶ https://youtu.be/bu7E2Y_GfVM\nWATCH 5 THOUSAND SINGLES ONE TAKE ▶ https://youtu.be/2N7YPXr326w\nWATCH WHO DO YOU BLAME ONE TAKE ▶ https://youtu.be/Nqm3u3Lsnas\nWATCH 94 BENTLEY ONE TAKE▶ https://youtu.be/o5E65bO9exA\nWATCH MONICA LEWINSKY ONE TAKE ▶ https://youtu.be/yx34SxwfkmU\nWATCH BERETTA LAKE MUSIC VIDEO ▶ https://youtu.be/AfC1Ax1moNc\n\n\n\nSaintJhn:\nChristian Sex Club | https://christiansexclub.com/\nSpotify | https://open.spotify.com/artist/0H39MdGGX6dbnnQPt6NQkZ?si=ifxhkVxIRje1dmUc6cF5Ag\nApple Music | https://music.apple.com/us/artist/saint-jhn/1133442919\nSoundCloud | http://soundcloud.com/SaintJhn\nInstagram | http://instagram.com/SaintJhn\nTwitter | http://twitter.com/SaintJhn\nTikTok | https://tiktok.com/@SaintJhn\nFacebook | https://facebook.com/saintjhn\nWebsite | http://saintjhn.com\n\n\n\n#SAINtJHN #RosesImanbekRemix #HipHop",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2zToEPpFEN8"
        }
      },
      "contentDetails": {
        "videoId": "2zToEPpFEN8",
        "videoPublishedAt": "2020-03-06T00:30:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "N8G9ER9y9-kXRK3IrZza8cNx4w4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yQjU2NEE0NUJCMEJCMjhB",
      "snippet": {
        "publishedAt": "2020-02-12T23:01:12Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Justin Bieber - Intentions (Official Video (Short Version)) ft. Quavo",
        "description": "Changes: https://justinbieber.lnk.to/Changes\n\nWatch Official Video:\nhttps://justinbieber.lnk.to/IntentionsVideo\n\nJoin Justin Bieber in supporting Alexandria House's mission to help women and children move from crisis to stability by donating to the INTENTIONS Fund here: https://www.alexandriahouse.org/inten...\n\nFollow Justin:\nhttp://facebook.com/justinbieber\nhttp://twitter.com/justinbieber\nhttp://instagram.com/justinbieber\n\nSign up for Justin’s newsletter: http://justinbiebermusic.com\n\nDirected by: Michael D. Ratner\n\nProduction company: OBB Pictures\nExecutive Producers: Michael D. Ratner, Scott Ratner, Miranda Sherman, Kfir Goldberg and Andy Mininger\n\n\nMusic video by Justin Bieber performing Intentions (Official Video (Short Version)). © 2020 Def Jam Recordings, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/DHc2fp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3AyMjyHu1bA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3AyMjyHu1bA"
        }
      },
      "contentDetails": {
        "videoId": "3AyMjyHu1bA",
        "videoPublishedAt": "2020-02-12T20:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qkFp4eRi5kzTJWvwahOn5hC8RAk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BNkQ3OTcxNzY5NzJDOEE5",
      "snippet": {
        "publishedAt": "2020-06-22T17:57:37Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby - The Bigger Picture (Official Music Video)",
        "description": "Stream/Download Lil Baby's \"The Bigger Picture\" here: https://QualityControl.lnk.to/TheBiggerPicture\n\nFollow Lil Baby Everywhere:\nInstagram: https://www.instagram.com/lilbaby_1/\nTikTok: https://www.tiktok.com/@lilbaby \nTwitter: https://twitter.com/lilbaby4PF\n\n\"The Bigger Picture\" Lyrics:\n\n[Verse 1]\nTrade my 4x4 for a G63, ain't no more free Lil Steve\nI gave 'em chance and chance and chance again, I even done told them please\nI find it crazy the police'll shoot you and know that you dead, but still tell you to freeze\nFucked up, I seen what I seen\nI guess that mean hold him down if he say he can't breathe\nIt's too many mothers that's grieving\nThey killing us for no reason\nBeen going on for too long to get even\nThrow us in cages like dogs and hyenas\nI went to court and they sent me to prison\nMy mama was crushed when they said I can't leave\nFirst I was drunk, then I sobered up quick\nWhen I heard all that time that they gave to Taleeb\nHe got a life sentence plus\nWe just some products of our environment\nHow the fuck they gon' blame us?\nYou can't fight fire with fire\nI know, but at least we can turn up the flames some\nEvery colored person ain't dumb and all whites not racist\nI be judging by the mind and heart, I ain't really into faces\nFucked up, the way that we livin' is not getting better, you gotta know how to survive\nCrazy, I had to tell all of my loved ones to carry a gun when they going outside\nStare in the mirror whenever you drive\nOverprotective, go crazy for mine\nYou gotta pay attention to the signs\nSeem like the blind following the blind\nThinking 'bout everything that's going on\nI boost security up at my home\nI'm with my kind if they right or they wrong\nI call him now, he'll pick up the phone\nAnd it's five in the morning, he waking up on it\nTell 'em wherever I'm at, then they comin'\nI see blue lights, I get scared and start runnin'\nThat shit be crazy, they 'posed to protect us\nThrow us in handcuffs and arrest us\nWhile they go home at night, that shit messed up\nKnowing we needed help, they neglect us\nWondering who gon' make them respect us\nI can see in your eye that you fed up\nFuck around, got my shot, I won't let up\nThey know that we a problem together\nThey know that we can storm any weather\n\n[Chorus]\nIt's bigger than black and white\nIt's a problem with the whole way of life\nIt can't change overnight\nBut we gotta start somewhere\nMight as well gon' 'head start here\nWe done had a hell of a year\nI'ma make it count while I'm here\nGod is the only man I fear\n\n[Verse 2]\nFuck it, I'm goin' on the front line\nHe gon' bust your ass if you come past that gun line\nYou know when the storm go away, then the sun shine\nYou gotta put your head in the game when it's crunch time\nI want all my sons to grow up to be monsters\nI want all my daughters to show out in public\nSeems like we losing our country\nBut we gotta stand up for something, so this what it comes to\nEvery video I see on my conscience\nI got power, now I gotta say somethin'\nCorrupted police been the problem where I'm from\nBut I'd be lying if I said it was all of them\nI ain't do this for the trend, I don't follow them\nAltercations with the law, had a lot of them\nPeople speaking for the people, I'm proud of them\nStick together, we can get it up out of them\nI can't lie like I don't rap about killing and dope, but I'm telling my youngins to vote\nI did what I did 'cause I didn't have no choice or no hope, I was forced to just jump in and go\nThis bullshit is all that we know, but it's time for a change\nGot time to be serious, no time for no games\nWe ain't takin' no more, let us go from them chains\nGod bless they souls, every one of them names\n\n[Verse 3]\nThey trainin' officers to kill us, then shootin' protestors with these rubber bullets\nThey regular people, I know that they feel it\nThese scars too deep to heal us\nWhat happened to COVID? Nobody remember\nIt ain't makin' sense, I'm just here to vent\nIt happen to one of your people, it's different\nWe get it, the system is wicked, just learn how to pick it\nKnowledge is power, I swear I'm a witness, I know that I'm gifted\nI won't go too deep 'cause I'm scared they'll get me\nAin't scared to admit it, some shit I can't mention\nIt's people who can, well, here's the chance\nI won't take the stand, but I'll take a stand for what I believe\nMust not be breathing the air that I breathe\nYou know that the way that I bleed, you can bleed\nI never been a fan of police\nBut my neighborhood know I try to keep peace\nSo it's only right that I get in the streets\nMarch for a reason, not just on GP\nOur people died for us to be free\nFuck do you mean? This was a dream\nNow we got the power that we need to have\nThey don't want us with it and that's why they mad, yeah\n\n#LilBaby #TheBiggerPicture",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_VDGysJGNoI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_VDGysJGNoI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_VDGysJGNoI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_VDGysJGNoI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_VDGysJGNoI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_VDGysJGNoI"
        }
      },
      "contentDetails": {
        "videoId": "_VDGysJGNoI",
        "videoPublishedAt": "2020-06-12T19:01:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wgts6VLKKqz9vgIN3vpVks_BWpg",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45QjI3NkI0NzZGNTk2Qjc5",
      "snippet": {
        "publishedAt": "2020-07-03T16:49:30Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Yo Gotti - Recession Proof (Official Video)",
        "description": "#RecessionProof Out Now https://YoGotti.lnk.to/RecessionProof\n\nYo Gotti Online: \nhttps://twitter.com/YoGotti \nhttps://www.instagram.com/yogotti \nhttps://www.facebook.com/yogotti",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nmXQ80gXxlo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nmXQ80gXxlo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nmXQ80gXxlo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nmXQ80gXxlo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nmXQ80gXxlo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nmXQ80gXxlo"
        }
      },
      "contentDetails": {
        "videoId": "nmXQ80gXxlo",
        "videoPublishedAt": "2020-07-03T16:00:16Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "R41Xaht-JJvpAtRLQiMS1aXHUbI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45Q0Q0MkJGMkY0NTEwQTVE",
      "snippet": {
        "publishedAt": "2020-05-27T09:04:24Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Doja Cat - Say So (Official Video)",
        "description": "Hot Pink out now! https://smarturl.it/xHotPink \n\nConnect To Unlock Special “Say So” Content: https://smarturl.it/HowJuicyAreYou?IQid=yt\n\nSubcribe to Doja Cat's Official YoutTube Channel: https://smarturl.it/DojaYTSubcribe \n\nDirector: Hannah Lux Davis @hannahluxdavis\nExecutive Producer: Brandon Bonfiglio @bbonfiglio\nCommissioner: Sam Houston @samhoustonishere\nChoreographer: Cortland Brown @fulloutcortland\nProduction Company: London Alley @londonalley\nCameos: @donte.colley and @yodelinghaley\n\nFollow Doja Cat:\nhttps://www.facebook.com/DojaCat\nhttps://www.instagram.com/dojacat/\nhttp://www.dojacat.com/\n\n#HotPink #DojaCat #SaySo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pok8H_KF1FA"
        }
      },
      "contentDetails": {
        "videoId": "pok8H_KF1FA",
        "videoPublishedAt": "2020-02-27T15:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Z_O8xFdSoX0_BzZLUWA4QNiVWLM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wNUNCQzdGRUFGNjdDMTg3",
      "snippet": {
        "publishedAt": "2020-06-29T21:17:23Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jack Harlow - WHATS POPPIN (feat. DaBaby, Tory Lanez & Lil Wayne) [Official Visualizer]",
        "description": "Jack Harlow- WHATS POPPIN (feat. DaBaby, Tory Lanez & Lil Wayne)\nStream/Download: https://JackHarlow.lnk.to/WHATSPOPPINRemix\n\nVisuals by Francis Thomasovich\n\nFOLLOW JACK HARLOW\nWebsite: https://www.jackharlow.us/\nInstagram: https://JackHarlow.lnk.to/Instagram\nTwitter: https://JackHarlow.lnk.to/Twitter\nFacebook: https://JackHarlow.lnk.to/Facebook\n\nLISTEN TO JACK HARLOW\nYoutube: https://JackHarlow.lnk.to/YouTube\nSoundCloud: https://JackHarlow.lnk.to/SoundCloud\nSpotify: https://JackHarlow.lnk.to/Spotify\nApple: https://JackHarlow.lnk.to/Apple\n\nThe official YouTube channel of Generation Now and Atlantic Records artist Jack Harlow. Subscribe for the latest music videos, performances, and more.\n\nSUBSCRIBE TO JACK’S YOUTUBE: \nhttps://JackHarlow.lnk.to/YouTube\n\n#JackHarlow",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EoxkdcQAZmQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EoxkdcQAZmQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EoxkdcQAZmQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EoxkdcQAZmQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EoxkdcQAZmQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EoxkdcQAZmQ"
        }
      },
      "contentDetails": {
        "videoId": "EoxkdcQAZmQ",
        "videoPublishedAt": "2020-06-24T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QX90UvTlVJh1o0U6t5KLyMZ5Oo4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xRDNCNzJGRkIxNzNDMTcz",
      "snippet": {
        "publishedAt": "2020-05-12T18:52:48Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Mosey - Blueberry Faygo (Dir. by @_ColeBennett_)",
        "description": "Lyrical Lemonade Presents:\n\nLil Mosey - Blueberry Faygo (Official Music Video)\n\nDirected + Edited by Cole Bennett\nSong Produced by Callan\nVFX by Scissor Films\nDirector of Photography - Logan Meis\nSteadicam by Renard Cheren\nEx. Produced by Sal Tarantino + Jay Tauzin + Mogul Vision\n\nStream Blueberry Faygo: \nhttps://smarturl.it/BlueberryFaygo\n\n\nMake a video on Tik Tok:\nhttps://www.tiktok.com/music/original-sound-6751113703686556421\n\n\nLil Mosey's Socials:\nhttp://instagram.com/lilmosey\nhttp://twitter.com/lilmosey\n\n--\n\nOfficial Channel of Lyrical Lemonade \n\nSubscribe for updates on music videos, interviews, performance videos, etc.\n\nLyrical Lemonade's Hot 25 Spotify Playlist:\nhttps://open.spotify.com/user/gh3vdz775oy18ah1wp9ucxsj5/playlist/5UuPeWDR2I8a8pORvW9vmr\n\nLyrical Lemonade Socials:\n\nhttp://www.twitter.com/lyricalemonade\nhttp://www.instagram.com/lyricalemonade\nhttp://www.facebook.com/lyricalemonade\nhttp://www.lyricallemonade.com\n\n\nCole Bennett Socials:\n\nhttp://www.twitter.com/_colebennett_\nhttp://www.instagram.com/_colebennett_\n\nLENNY ~ our hidden character representing happiness & good energy\nhttp://instagram.com/lenny",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/V_jHc_n0p9c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/V_jHc_n0p9c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/V_jHc_n0p9c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/V_jHc_n0p9c/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "V_jHc_n0p9c"
        }
      },
      "contentDetails": {
        "videoId": "V_jHc_n0p9c",
        "videoPublishedAt": "2020-03-26T17:30:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "VEBJ84J0sAwcO7BEAtUeCixpuno",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45NTFFM0RCNEI0ODA2MkEy",
      "snippet": {
        "publishedAt": "2019-09-12T23:24:44Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Post Malone - Circles",
        "description": "Official music video by Post Malone performing “Circles” – off his new album 'Hollywood's Bleeding’ available now: https://PostMalone.lnk.to/hollywoodsbleedingYD\n\n►Subscribe to Post Malone: https://PostMalone.lnk.to/SubscribeYD\n\n►Get tickets to the Runaway tour here: http://www.postmalone.com/\n\n►Exclusive Merch: https://shop.postmalone.com/\n\n►Follow Post Malone Online\nInstagram: https://www.instagram.com/postmalone/\nFacebook: https://www.facebook.com/postmalone\nTwitter: https://twitter.com/postmalone\nWebsite: http://www.postmalone.com/\n\nOfficial “Circles” Lyrics\n\nWe couldn’t turn around\nTil we were upside down\nI’ll be the bad guy now\nBut know I ain’t too proud\nI couldn’t be there\nEven when I tried\nYou don’t believe it\nWe do this every time\n\nSeasons change and our love went cold\nFeed the flame because we can’t let go\nRunaway but we’re running in circles\nRunaway, runaway\nI dare you to do something\nI’m waiting on you again\nSo I don’t take the blame\nRunaway but we’re running in circles\nRunaway, runaway, runaway\n\nLet go\nI got a feeling that it’s time to let go\nI said so\nI knew that this was doomed from the get go\nYou thought that it was special, special\nBut it was just the sex though, the sex though\nAnd I still hear the echoes, the echoes\nI got a feeling that it’s time to let it go\nLet it go\n\nSeasons change and our love went cold\nFeed the flame because we can’t let go\nRunaway but we’re running in circles\nRunaway, runaway\nI dare you to do something\nI’m waiting on you again\nSo I don’t take the blame\nRunaway but we’re running in circles\nRunaway, runaway, runaway\n\nMaybe you don’t understand what I’m going thru\nIt’s only me, what you got to lose\nMake up your mind, tell me what are you gonna do\nIt’s only me, let it go\n\nSeasons change and our love went cold\nFeed the flame because we can’t let go\nRunaway but we’re running in circles\nRunaway, runaway\nI dare you to do something\nI’m waiting on you again\nSo I don’t take the blame\nRunaway but we’re running in circles\nRunaway, runaway, runaway\n\nVideo Director: Colin Tiley\nVideo Producer: Jamee Ranta\nfor Boy In The Castle\n\n#PostMalone #Circles #HollywoodsBleeding\n\nMusic video by Post Malone performing Circles. © 2019 Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/jrYkRZ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wXhTHyIgQ_U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wXhTHyIgQ_U"
        }
      },
      "contentDetails": {
        "videoId": "wXhTHyIgQ_U",
        "videoPublishedAt": "2019-09-03T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MMCEUn7qOVh94PHSxi_A4EikMJc",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5ENzlGNjFGQzkzQzEzMkNB",
      "snippet": {
        "publishedAt": "2020-05-22T17:37:02Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lady Gaga, Ariana Grande - Rain On Me (Official Music Video)",
        "description": "“CHROMATICA”\nTHE SIXTH ALBUM BY LADY GAGA\nOUT NOW\nhttp://smarturl.it/Chromatica\n\n\"RAIN ON ME”\nTHE NEW SINGLE FROM LADY GAGA WITH ARIANA GRANDE\nOUT NOW\nhttp://smarturl.it/RainOnMeChromatica\n\nDIRECTED BY ROBERT RODRIGUEZ\n\nSHOP THE OFFICIAL CHROMATICA COLLECTION: http://smarturl.it/GagaStore\n\nFOLLOW LADY GAGA:\nFacebook: http://gaga.lk/facebook\nInstagram: http://gaga.lk/Instagram\nSnapchat: http://gaga.lk/Snapchat\nTwitter: http://gaga.lk/Twitter\nWebsite: http://www.ladygaga.com/\nOfficial Store: http://gaga.lk/GagaStore\nEmail List: http://gaga.lk/News\n\nFOLLOW ARIANA GRANDE:\nFacebook: http://ArianaGrande.lnk.to/FacebookYT\nInstagram: http://ArianaGrande.lnk.to/InstagramYT\nTwitter: http://ArianaGrande.lnk.to/TwitterYT\nWebsite: http://ArianaGrande.lnk.to/WebsiteYT\nOfficial Store: http://ArianaGrande.lnk.to/ShopYT\nEmail List: http://ArianaGrande.lnk.to/SignUpYT\n\nMusic video by Lady Gaga, Ariana Grande performing Rain On Me. © 2020 Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AoAm4om0wTs"
        }
      },
      "contentDetails": {
        "videoId": "AoAm4om0wTs",
        "videoPublishedAt": "2020-05-22T17:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gsVBOg3d6vQLRUUAD_zk04LGJjg",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BNjIxOThCMjIwNkEyMDU1",
      "snippet": {
        "publishedAt": "2020-02-29T10:50:53Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Roddy Ricch - The Box [Official Music Video]",
        "description": "Roddy Ricch - The Box\r\nStream/Download - https://roddyricch.lnk.to/PleaseExcuseMeForBeingAntisocial\r\nGet official merch here: http://smarturl.it/RoddyRicchStore\nDon't wear no shoes in my house floor mat: http://ricchessentials.com\n\r\nFollow Roddy Ricch\r\nhttps://instagram.com/roddyricch\r\nhttps://twitter.com/roddyricch\r\nhttps://soundcloud.com/roddyricch\r\nhttps://facebook.com/RoddyRicch/\nhttp://roddyricch.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UNZqm3dxd2w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UNZqm3dxd2w"
        }
      },
      "contentDetails": {
        "videoId": "UNZqm3dxd2w",
        "videoPublishedAt": "2020-02-28T23:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UBRzGqnJTU0OD6vFlpKxgwKDcs8",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42MENFRjUzNkVFMDA3OUMx",
      "snippet": {
        "publishedAt": "2020-06-26T00:14:08Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Wayne - I Don’t Sleep (Official Animated Music Video)",
        "description": "Official animated music video for \"I Don't Sleep\" by Lil Wayne ft. Takeoff.\n\nClick to subscribe to Lil Wayne's YouTube channel for exclusive footage! http://bit.ly/WayneYTSub\r\n\r\nWatch Lil Wayne's Exclusive Series and Footage:\r\nWeezy Wednesdays: http://bit.ly/WeezyWeds\r\nLil Wayne Exclusive Tracks: http://bit.ly/WayneExclusives\r\nLil Wayne Official Music Videos: http://bit.ly/WayneVideos\r\n\r\nLil Wayne on Twitter: http://www.twitter.com/LilTunechi\r\nLil Wayne on Facebook: http://www.facebook.com/LilWayne\r\nLil Wayne on Instagram: https://www.instagram.com/liltunechi\r\nYoung Money on Facebook: http://www.facebook.com/youngmoneyent",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/On8aAWz5s98/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/On8aAWz5s98/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/On8aAWz5s98/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/On8aAWz5s98/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/On8aAWz5s98/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "On8aAWz5s98"
        }
      },
      "contentDetails": {
        "videoId": "On8aAWz5s98",
        "videoPublishedAt": "2020-06-08T21:49:15Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FOfpXR-LaxgYrOWiZ48pXScTs7A",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BMTJGNjk0NkI3NDEyNkE1",
      "snippet": {
        "publishedAt": "2020-04-20T11:23:32Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Drake - Toosie Slide",
        "description": "Music video by Drake performing Toosie Slide. © 2020 OVO, under exclusive license to Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xWggTb45brM"
        }
      },
      "contentDetails": {
        "videoId": "xWggTb45brM",
        "videoPublishedAt": "2020-04-03T04:15:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1Px4801-sEh7RJDzTRQtKtFgI84",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45ODM3QTU3OUI4ODJGM0ZE",
      "snippet": {
        "publishedAt": "2020-01-14T21:19:34Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Dua Lipa - Don't Start Now (Official Music Video)",
        "description": "Get the new album Future Nostalgia : https://dualipa.co/futurenostalgia\n\nStream Break My Heart : https://dualipa.co/breakmyheart\n\n\nFollow me online:\nInstagram:  https://dualipa.co/instagram\nFacebook: http://dualipa.co/facebook\nTwitter: http://dualipa.co/twitter\nYouTube: https://dualipa.co/youtube\nSpotify: http://dualipa.co/spotify\nApple Music: https://dualipa.co/apple-music\nDeezer URL: http://dualipa.co/deezer\nAmazon Music: https://dualipa.co/amazonmusic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oygrmJFKYZY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oygrmJFKYZY"
        }
      },
      "contentDetails": {
        "videoId": "oygrmJFKYZY",
        "videoPublishedAt": "2019-11-01T13:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "POPpPu-6dv3Vd_nxxZCWB_DW7w8",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44MDRDM0Q3Nzg4RDM4MUE1",
      "snippet": {
        "publishedAt": "2020-05-12T19:04:28Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "NLE Choppa - Walk Em Down feat. Roddy Ricch (Official Music Video)",
        "description": "Listen to \"Walk Em Down\": https://nlechoppa.lnk.to/walkemdown\n\nhttps://nlechoppa.com\nhttps://instagram.com/nlechoppamusic\nhttps://facebook.com/nlechoppamusic\nhttps://twitter.com/nlechoppa1\nhttps://snapchat.com/add/nlechoppamusic\nTikTok: @NLEChoppaMusic\nTriller: @NLEChoppa\n\nA Psycho Films Production\nDirector: Christian Sutton\nEP: Sam Canter\nProducers: Geenah Krisht & Mary Margaret Merritt\nDP: Dannel Escallon\nPD: Dre Day Designz\n1st AD: Erik Mateo\nEditor: Tyler Sobel-Mason\nVFX: Warm & Fuzzy, Nuclear Creative, Max Goodrich, & Will Tooke\nColorist: Stephen Derluguian\nLasers: FutureWeapons Lasers\n\n\n#WalkEmDown #NLEChoppa #RoddyRicch #WalkEmDownChallenge",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fyIcQ1Xl-rs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fyIcQ1Xl-rs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fyIcQ1Xl-rs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fyIcQ1Xl-rs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fyIcQ1Xl-rs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fyIcQ1Xl-rs"
        }
      },
      "contentDetails": {
        "videoId": "fyIcQ1Xl-rs",
        "videoPublishedAt": "2020-03-19T23:05:33Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "i6OZtnxNW63a8iNw9EjmUnNHQGE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xQzhBODREQjVGOTY1RDNF",
      "snippet": {
        "publishedAt": "2020-06-08T20:56:51Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YFN Lucci - Wet (She Got That...) (Official Lyrics Video)",
        "description": "Stream Wet Now- https://empire.lnk.to/yfnwet\n\nConnect w/ YFN Lucci: \n\nInstagram - https://www.instagram.com/yfnlucci\n\nTwitter - https://twitter.com/YFNLUCCI\n\nFacebook - https://www.facebook.com/YFNLucci\n\nSoundcloud - https://soundcloud.com/yfn-lucci\n\nOfficial Website - http://yfnlucci.com\n\n#YFNLucci #Wet\n\nLook, sex I need some wet sh*t\nNeck, I need some Becky\nYeah, I'm a lil manish, Kiss on your belly\nYeah, she got that wet sh*t, Yeah, she got that wet sh*t Yeah, she got that wet sh*t, Uhh, she got that wet sh*t\n\ngirl, how you doing, look I’m double R, girl I'm a star\nJust like the ceiling I got on my car, Just like the ceiling girl, take off your top Look i'm with the hottest, so I flew that b*tch to New York\nI put that b*tch in New York, huh, I put on Christian Dior, huh\nI pull up Bentley truck, huh, I pull up Bentley truck, huh\nI put my trust in her\nShe know she just like a drug\nShe come through and wet me up\nShe my lil freak in disguise\nGetting head while i'm gripping her thighs\nShe in my head, Ion even know why\nShe in the bed, we gon need more time\nShe keep it wet, Ion need no dry\nF*ck me good, Ion need no lie\nMm Mm, good glad I tried\nDon't bend over, you'n even know how to ride\nLove me forever ion need no change\nTurn a n*gga down, when you see me on the train\nCouple weeks later, when you see me I'm your type\nNext time you see me, young n*gga I’m piped\nI am not regular, this not a tesla\nI'm with a baddie, ate her like a edible\nI'm in a V-12 eating vegetables\nI'm in the back of this bih with my leg up\nShe got that waterfall, she got that wet stuff\nShe got that wet wet, I'm tryna bless that\nGirl where you want me to nut at, yeah\nGirl where you want me to nut at, yeah\n\nLook, sex I need some wet sh*t\nNeck, I need some Becky\nYeah, I'm a lil manish, Kiss on your belly\nYeah, she got that wet sh*t, Yeah, she got that wet sh*t Yeah, she got that wet sh*t, Uhh, she got that wet sh*t\n\nWe can f*ck in the back of my ride On the balcony all outside\nIn the master suite we out of town Ima f*ck you till the sun go down\nI want you, you want me and my love I want loyalty, then I want love Wanna argue with me about trust Girl where would you be without us She got that wet, soaking wet\nGirl let's go jet skiing\nGirl you're the best, I mean it\nIan gon flex, I mean it\n4 by 4 took the doors off\nShe suckin, I'm taking her clothes off\nShe suckin like she ain't got no teeth in her mouth Go ahead bitch show out\nI'm pulling her weave, hope Ion pull her track out Pull off in a track hawk\nLil boujee bitch, I blew her back out\nLil booty bih, she got a ass now\nYeah, I caught her in magic\nThink the first night I smashed it\nCaught a audible passed it\nI like my h*es naughty and nasty\nI love when a h*e call me daddy\n\nLook, sex I need some wet sh*t\nNeck, I need some Becky\nYeah, I'm a lil manish, Kiss on your belly\nYeah, she got that wet sh*t, Yeah, she got that wet sh*t Yeah, she got that wet sh*t, Uhh, she got that wet sh*t",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7K1sC11-mzQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7K1sC11-mzQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7K1sC11-mzQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7K1sC11-mzQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7K1sC11-mzQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7K1sC11-mzQ"
        }
      },
      "contentDetails": {
        "videoId": "7K1sC11-mzQ",
        "videoPublishedAt": "2020-05-14T16:00:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QuBV3Xb9wD_UU4zObJJ1pf0eAFI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EMTQyRkExMUQ2MDMwMTdC",
      "snippet": {
        "publishedAt": "2020-05-12T20:03:24Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Dua Lipa - Break My Heart (Official Video)",
        "description": "Stream Break My Heart : https://dualipa.co/breakmyheart\n\nGet the new album Future Nostalgia : https://dualipa.co/futurenostalgia\n\nLyrics:\n\n[Verse 1]\nI’ve always been the one to say the first goodbye\nHad to love and lose a hundred million times\nHad to get it wrong to know just what I like\nNow I’m falling\nYou say my name like I have never heard before \nI’m indecisive but this time I know for sure\nI hope I’m not the only one that feels it all\nAre you falling?\n\n[Pre-Chorus]\nCentre of attention\nYou know you can get whatever you want from me\nWhenever you want it baby\nIt’s you in my reflection\nI’m afraid of all the things it could do to me\nIf I woulda known it baby\n\n[Chorus]\nI would’ve stayed at home\nCuz I was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm I falling in love with the one that could break my heart?\nOh no\nI was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm i falling in love with the one that could break my heart?\n\n[Verse 2]\nI wonder when you go if I stay on your mind\nTwo can play that game but you win me every time\nEveryone before you was a waste of time\nYeah you got me\n\n[Pre-chorus]\nCentre of attention\nYou know you can get whatever you want from me\nWhenever you want it baby\nIt’s you in my reflection\nI’m afraid of all the things it could do to me\nIf I woulda known it baby\n\n[Chorus]\nI would’ve stayed at home\nCuz I was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm i falling in love with the one that could break my heart?\nOh no\nI was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm I falling in love with the one that could break my heart?\n\n[Post-Chorus]\nOoooh break my heart\nOoooh break my heart\nOoooh\nAm I falling in love with the one that could break my heart?\n\n[Chorus]\nI would’ve stayed at home\nCuz I was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm i falling in love with the one that could break my heart?\nOh no\nI was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm I falling in love with the one that could break my heart?\n\nFollow me online:\nInstagram:  https://dualipa.co/instagram\nFacebook: http://dualipa.co/facebook\nTwitter: http://dualipa.co/twitter\nYouTube: https://dualipa.co/youtube\nSpotify: http://dualipa.co/spotify\nApple Music: https://dualipa.co/apple-music\nDeezer URL: http://dualipa.co/deezer\nAmazon Music: https://dualipa.co/amazonmusic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Nj2U6rhnucI"
        }
      },
      "contentDetails": {
        "videoId": "Nj2U6rhnucI",
        "videoPublishedAt": "2020-03-26T13:30:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Qa3tSC3LpL_SR7oLANZA0WdphWM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DM0Q3OEIwOTA1N0YyNDEy",
      "snippet": {
        "publishedAt": "2020-01-22T01:48:33Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Future - Life Is Good (Official Music Video) ft. Drake",
        "description": "Official video for “Life Is Good” by Future\u200b\nListen to Future:  https://Future.lnk.to/listenYD\u200b\nSubscribe to the official Future YouTube Channel: https://Future.lnk.to/subscribeYD\u200b\n\nWatch Future’s music videos:  https://Future.lnk.to/MusicVideosYD\u200b\n\nFollow Future:\u200b\nFacebook: https://Future.lnk.to/followFI\u200b\nTwitter:  https://Future.lnk.to/followTI\u200b\nInstagram:  https://Future.lnk.to/followII\u200b\nWebsite:  https://Future.lnk.to/followWI\u200b\nSpotify:  https://Future.lnk.to/followSI\u200b\n\nLyrics:\u200b\nWorkin' on a weekend like usual\nWay off in the deep end like usual\nNiggas swear they passed us, they doin' too much\nHaven't done my taxes, I'm too turnt up\nVirgil got a Patek on my wrist goin' nuts\nNiggas caught me slippin' once, okay, so what?\nSomeone hit your block up, I'd tell you if it was us\nManor house in Rosewood, this shit too plush\n\n#Future #LifeIsGood #HighOffLife",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/l0U7SxXHkPY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "l0U7SxXHkPY"
        }
      },
      "contentDetails": {
        "videoId": "l0U7SxXHkPY",
        "videoPublishedAt": "2020-01-10T05:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "eDAEHNOfpoqBfknwFIjAi2mZM0M",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42QTdDRkRERUJDMUFDNEZC",
      "snippet": {
        "publishedAt": "2020-01-14T21:20:22Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Maren Morris - The Bones (Official Video)",
        "description": "Listen to \"The Bones” by Maren Morris, available now on her second studio album, GIRL: http://smarturl.it/MMGIRL?IQid=youtube\n \nApple Music: http://smarturl.it/MMGIRL/applemusic?IQid=youtube\nSpotify: http://smarturl.it/MMGIRL/spotify?IQid=youtube\nAmazon Music: http://smarturl.it/MMGIRL/az?IQid=youtube\nYouTube Music: http://smarturl.it/MMGIRL/youtubemusic?IQid=youtube\nYouTube: http://smarturl.it/MMGIRL/youtube?IQid=youtube\nPandora: http://smarturl.it/MMGIRL/pandora?IQid=youtube\niTunes: http://smarturl.it/MMGIRL/itunes?IQid=youtube\nAll Retailers: http://smarturl.it/MMGIRL?IQid=youtube\n \nStay updated on Maren:\nOfficial website: http://www.marenmorris.com\nSubscribe: http://smarturl.it/MMyoutubesub?IQid=youtube\nFacebook: http://www.facebook.com/marenmorris\nTwitter: http://twitter.com/marenmorris\nInstagram: http://instagram.com/marenmorris\nJoin The HEROES Fan Club: http://smarturl.it/TheHEROESfanclub?IQid=youtube\nShop: http://smarturl.it/MarenMorrisShop?IQid=youtube\n \n#MarenMorris #TheBones #GIRL",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gvPMVKUI9go/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gvPMVKUI9go"
        }
      },
      "contentDetails": {
        "videoId": "gvPMVKUI9go",
        "videoPublishedAt": "2019-08-15T16:15:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2UZtlWYfG63xWphveE5HAfo0KWU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42MDFFQkM3NTlGNTI2MDcz",
      "snippet": {
        "publishedAt": "2020-07-04T17:27:41Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "SEBASTIAN PAUL - CRUSH (Official Music Video)",
        "description": "Stream/Download: https://stem.ffm.to/crush\n\nDirector: Sebastian Paul\nAssistant Director: Corey Mercer of FRNDS Agency\nDP: Jack Fitzwilliam of FRNDS Agency\nProduced by: FRNDS Agency\n\nSEBASTIAN PAUL:\nhttps://www.instagram.com/sebastianpaul\nhttps://twitter.com/sebastianpaul__\nhttps://www.facebook.com/officialsebastianpaul\n\nhttp://vevo.ly/6DaYte",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Go-2GWgJXbc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Go-2GWgJXbc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Go-2GWgJXbc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Go-2GWgJXbc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Go-2GWgJXbc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Go-2GWgJXbc"
        }
      },
      "contentDetails": {
        "videoId": "Go-2GWgJXbc",
        "videoPublishedAt": "2020-07-01T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "x1MMi5Et52plbyhZ0x4UQTEtYJw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zMEJFQkEzQzE3NDc3MzQy",
      "snippet": {
        "publishedAt": "2020-05-18T00:08:00Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Ariana Grande & Justin Bieber - Stuck with U (Official Video)",
        "description": "SB Projects along with longtime clients Ariana Grande and Justin Bieber release “Stuck with U” to benefit First Responders Children’s Foundation: https://stuckwithu.lnk.to/agjbPV\n\nIn response to the COVID-19 crisis and to help further bolster relief efforts, all net proceeds from the streams and sales of “Stuck with U” will be donated to First Responders Children’s Foundation to fund grants and scholarships for children of healthcare workers, emergency medical technicians (EMTs), paramedics, police officers and firefighters serving at the front lines during the global pandemic. \n\nThat means that by listening, watching, and sharing – you are helping to support families in need. If you would like to make an additional contribution to First Responders Children's Foundation, click the donate button. \n\nThank you to all the fans, friends and first responders who participated.\n\nCreated & directed by: Rory Kramer, Alfredo Flores, Ariana Grande, Justin Bieber, Scooter Braun \n\nLyrics:\n\nI’m not one to stick around\nOne strike and you’re out baby\nDon’t care if I sound crazy\nBut u never let me down \nNo, no\nThat’s why when the sun’s up I’m stayin\nStill laying in your bed sayin\n\nOoh, ooh, ooh, ooh\nGot all this time on our hands\nMight as well cancel our plans\nI could stay here\nFor a \nLifetime\n\nSo lock the door, and throw out the key\nCan’t fight this no more, it’s just u and me\nAnd there’s nothin I, nothin I \nI can do\nI’m stuck with u\nStuck with u\nStuck with u\nSo go ahead and drive me insane\nBaby run your mouth, I still wouldn’t change\nBeing stuck with u\nStuck with u\nStuck with u\nI’m stuck with u \nStuck with u\nStuck with u baby\n\nThere’s nowhere we need to be\nNo, no, no\nIma get to know u better\nKinda hope we’re here forever\nThere’s nobody on the streets\nAnd if u told me the world’s endin\nAin’t no other way that I can spend it\n\n[Pre-Chorus 2]\nOoh, ooh, ooh, ooh\nGot all this time in my hands\nMight as well cancel our plans\nI could stay here\nForever\n\nSo lock the door, and throw out the key\nCan’t fight this no more, it’s just u and me\nAnd there’s nothin I, nothin I\nI can do\nI’m stuck with u\nStuck with u\nStuck with u\nSo go ahead, and drive me insane\nBaby run your mouth, I still wouldn’t trade\nBeing stuck with u \nStuck with u\nStuck with u\nI’m stuck with u\nStuck with u\nStuck with u\n\nOh-oh-oh-oh\nBaby come take all my time\nGo on make me lose my mind\nWe got all that we need here tonight\n\nLock the door, and throw out the key\nCan’t fight this no more, it’s just u and me\nAnd there’s nothing I\nNothing I’d rather do\nI’m stuck with u\nStuck with u\nStuck with u\nSo go ahead and drive me insane\nBaby run your mouth, I still wouldn’t trade all this\nLovin u, hatin u, wantin u\nI’m stuck with u\nStuck with u\nStuck with \nu\nStuck with u\nStuck with u\nStuck with u\n\n#StuckwithU #ArianaGrande #JustinBieber\n\nMusic video by Ariana Grande, Justin Bieber performing Stuck with U. © 2020 Silent Records Ventures, LLC, Def Jam Recordings, a division of UMG Recordings, Inc., and Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/7lAqPq",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pE49WK-oNjU"
        }
      },
      "contentDetails": {
        "videoId": "pE49WK-oNjU",
        "videoPublishedAt": "2020-05-08T04:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lOAVBBRPLLvquGaf6PuZDHzW9so",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS41RjA2RTAyRENDRTUyQ0U5",
      "snippet": {
        "publishedAt": "2020-05-12T18:54:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Drake - Chicago Freestyle (Audio) ft. Giveon",
        "description": "Dark Lane Demo Tapes - available everywhere now: https://Drake.lnk.to/DLDTVD\n\nConnect with Drake:\nhttps://www.instagram.com/champagnepapi\nhttps://www.facebook.com/Drake\nhttps://twitter.com/drake\nhttps://www.drakeofficial.com\n\n#Drake #DarkLaneDemo #ChicagoFreestyle\n\nMusic video by Drake performing Chicago Freestyle (Audio). © 2020 OVO, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/ccopAh",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/p9pf5EyOgcs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/p9pf5EyOgcs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/p9pf5EyOgcs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/p9pf5EyOgcs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/p9pf5EyOgcs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "p9pf5EyOgcs"
        }
      },
      "contentDetails": {
        "videoId": "p9pf5EyOgcs",
        "videoPublishedAt": "2020-05-01T04:20:57Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "c4Pe2-9ETOa22gL_g67aNVO24Ak",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DNEVBNkRBRDUxQTVFNEYx",
      "snippet": {
        "publishedAt": "2020-01-14T21:20:05Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Harry Styles - Adore You (Official Video)",
        "description": "Listen to Harry Styles’ new album ‘Fine Line’ now: https://HStyles.lnk.to/FineLineAY \n\nHARRY STYLES. LOVE ON TOUR. 2020.\nhttps://hstyles.co.uk/tour\n\nFollow Harry Styles:\nFacebook: https://HarryStyles.lnk.to/followFI\nInstagram: https://HarryStyles.lnk.to/followII\nTwitter: https://HarryStyles.lnk.to/followTI\nWebsite: https://HarryStyles.lnk.to/followWI\nSpotify: https://HarryStyles.lnk.to/followSI\nYouTube: https://HarryStyles.lnk.to/subscribeYD\n\nDirected by Dave Meyers\nWritten by Chris Shafer & Dave Meyers\nStarring Harry Styles\nScore by Kid Harpoon\nProduced by Nathan Scherrer\nLine Produced by Jo Coombes, Ellen De Faux, & Tom Gardner\nCinematographer Scott Cunningham\nProduction Designer Laura Ellis Cricks\nMr. Styles Styling by Harry Lambert\nCast Styling by Verity May Lane\nEdited by Alyssa Oh\nTelecine Stefan Sonnenfeld\nVFX by Mathematic \nSound Design Chris Afzal at Wave Studios\nPost Produced by Adam Parker & Nathan Scherrer\nVideo Commissioner Bryan Younce\n \nA Freenjoy Production \n \nFull Stop Management\nColumbia Records\nContent Creative\n \nThanks:\nAudri Kenley\nLS Productions\nSomesuch\nEntire cast and crew\n\nLyrics:\n\nWalk in your rainbow paradise\nStrawberry lipstick state of mind\nI get so lost inside your eyes\nWould you believe it?\n\nYou don’t have to say you love me\nYou don’t have to say nothing\nYou don’t have to say you’re mine\n\nHoney\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\nLike it’s the only thing I’ll ever do\n\nYour wonder under summer skies\nBrown skin and lemon over ice\nWould you believe it?\n\nYou don't have to say you love me\nI just wanna tell you something\nLately you’ve been on my mind\n\nHoney\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\nLike it’s the only thing I’ll ever do\n\nIt’s the only thing I’ll ever do\n\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\n\nI’d walk through fire for you\nJust let me adore you\nOh honey\nOh honey\n\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\n\n#HarryStyles #AdoreYou #FineLine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VF-r5TtlT9w"
        }
      },
      "contentDetails": {
        "videoId": "VF-r5TtlT9w",
        "videoPublishedAt": "2020-01-09T14:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HvLcmzpD1bGe1B3LxX6iDlS2LnE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45RTI4QzhDMzlFMEJDNDRE",
      "snippet": {
        "publishedAt": "2020-06-22T17:56:58Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "TROLLZ - 6ix9ine & Nicki Minaj  (Official Music Video)",
        "description": "Stream / Download: https://cmg.ffm.to/TROLLZ\nLimited edition merch OUT NOW: https://www.6ix9inestore.com \n\nTROLLZ - 6ix9ine with Nicki Minaj (Official Music Video)\nDirector: CanonF8 & 6ix9ine, David Wept\nEP/Producer: Omar Reynoso & David Wept \nDP: Parris Stewart\nEditor: 6ix9ine, CanonF8, Omar Jones, Kenny Shimm\nArt Director: Omar Reynoso, 6ix9ine\nColorist: Bryan Smaller\nVFX: Max Colt\nProduction: Co- AT.LAS , FatKing Films\nProduced by: SadPony & Jahnei Clarke\nWritten by: Jeremiah Raisen, Daniel Hernandez, Onika Maraj, Aaron Clarke\nMixed by: Big Juice, Wizard Lee & Jahnei Clarke\nMastered by: Wizard Lee\nCover by: Alex Solis\n\nLyrics:\n6ix9ine:\n\nWatch, Mhm\nGlock, Mhm\nCocked, Mhm\nGot it, Mhm\nYou need that I got it \nThat’s cash in my pockets \nThat’s cash one hunnits \nYou need that I got it \nNeed it I got it \nCash pockets \nBands on me \nSticks on me \nYou need that I got it \nThat’s cash in my pockets \nThat’s cash one hunnits \nYou need that I got it \n\nYeah she like how I throw them racks up yeah x3\nKeep on throwing that cash yeah x5\nKeep on throwing that a$$ yeah x5\nBenz truck in the back yeah  x5\n\nVERSE:\n\nI know you don't like me, you wanna fight me\nYou don't want no problems at your party don't invite me\nI don't worry about you nig**,  please stop talking about me\nAlways talking about me cause you looking for the clouty\n6ixtynine the nine neena, riding in the 2 seater\nWith 2 neenas\nBaby got that aquafina, it’s cocaiana\nSmoking on that Og reeefer, no TMZ-a\n\nForgeatos on a Benz truck, make her friends f*ck\nTold her she could get Chanel if she let my friend f*ck\nSlide, shinin in the rolls royce, it got wrecked up\nWait hold up, nah I still dont give a f*ck\nVroom Vroom G5\nVroom Vroom we high\nYou the type of N** that will I never wanna be like\nYou the type of b*tch that will never get a reply\nHi hater, Bye hater, Vroom\n\n\nYeah she like how I throw them racks up yeah x5\nKeep on throwing that cash yeah x5\nKeep on throwing that a$$ yeah x5\nBenz truck in the back yeah x 5\n\n\nNicki Minaj:\n\nMinaj:\n\nDolla Dolla Bill come get her\nEven ya man KNOW Nicki's do it betterrrrrrrrrrr\nI know you don't like me, you wanna fight me\nAlways on my page, never double tap like me\nBaddies to my left and my right, never chase a corny N** put that on my life\nJust put it in his face, all this cake\nHe wanted a taste\nHe sippin on that ace \nItty bitty waste, pretty face\nYeah, eat it cookie monsta\nHe a slave to this p*ssy call me Masta\nReal wet, I say slurp it like its pasta\nThey get nervous when its Nicki on the Roster\nSomebody usher this N* into a clinic\nMy flow still sick I ain't talking a pandemic\nI write my own lyrics, a lot of these B*ches gimmicks\nThey study Nicki style now all of them want mimic \nTalking bout Snitches when it’s snitches in your camp\nNever stand alone you always itching for a stamp\nMe, I’m still money wrists light up like a lamp\nThey gon have to send they best fighter for the champ\n\nRacks, I got em. Mary, I’m Poppin\nThey keep hating, but still watching\nCheck the boards, I’m still topping\nBust down or Plain Jane, I got options\nIt's a bunch of mini-me’s, I’m the one they mocking\nShowed you how to get a bag now you going shopping\nWhen I come out all the sneak b*tches start plotting\nWhen I come out its a sweep b*tches start mopping\n\n6ix9ine:\n\nYeah she like how I throw them racks up yeah x5\nKeep on throwing that cash yeah x5\nKeep on throwing that a$$ yeah x5\nBenz truck in the back yeah x 5\n\nWatch, Mhm\nGlock, Mhm\nCocked, Mhm\nGot it, Mhm\n\nNicki Minaj:\nIf you like I throw it fast, real fast fast fast\nHe singing my old song yelling a$$ a$$ a$$\nThey be speeding, trying to be me then they crash crash crash\nStill a hundred like the number on my dash dash dash\n\nThat Real A$$ ain’t keep yo N* home!\n\n\n\n#6ix9ine #nickiminaj #TROLLZ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oNg3M9IJJlY"
        }
      },
      "contentDetails": {
        "videoId": "oNg3M9IJJlY",
        "videoPublishedAt": "2020-06-12T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "jiPCVGjQsPGYoQe9YuZy5MkJTuw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42NEE1NUNFRUEwNzI1Q0Y0",
      "snippet": {
        "publishedAt": "2020-05-03T10:33:00Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "THE SCOTTS, Travis Scott, Kid Cudi - THE SCOTTS (FORTNITE ASTRONOMICAL EVENT)",
        "description": "THE SCOTTS OUT NOW: https://THESCOTTS.lnk.to/THESCOTTS\n \nOFFICIAL STORE: https://shop.travisscott.com\n \nhttps://instagram.com/travisscott\nhttps://instagram.com/kidcudi\nhttps://instagram.com/cactusjack\nhttps://twitter.com/trvisXX\nhttps://twitter.com/KidCudi\nhttps://travisscott.com\nhttp://www.kidcudi.com/\n \n(C) 2020 Epic Records. With Cactus Jack / Wicked Awesome.\n\n#TravisScott #KidCudi #FORTNITE #ASTRONOMICAL #THESCOTTS #FortniteTravisScottEvent",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8oaW16lGNxE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8oaW16lGNxE"
        }
      },
      "contentDetails": {
        "videoId": "8oaW16lGNxE",
        "videoPublishedAt": "2020-04-24T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CmusIZUFdTwo7JHfSrUQKZy0tck",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40MEI3MjdFMzBBQkJCOTlF",
      "snippet": {
        "publishedAt": "2020-06-08T20:57:03Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Sub Urban - Freak (feat. REI AMI) [Official Music Video]",
        "description": "MERCH & ANNOUNCEMENTS: https://www.thatsuburban.com\nDebut EP 'Thrill Seeker' is out now: https://suburban.lnk.to/ThrillSeeker\n\nFollow Sub Urban:\nInstagram: https://www.instagram.com/thatsuburban/\nTwitter: https://twitter.com/thatSubUrban\nFacebook: https://www.facebook.com/thatSubUrban/\nSpotify: https://open.spotify.com/artist/7gXb99Sf9nNmpNYeAgIQFG?si=yjYjkA4NQzGqEYDeQihTsQ\nApple Music: https://music.apple.com/us/artist/sub-urban/429426385\n\nFollow REI AMI:\nInstagram -- http://reiami.link/IG\nTwitter -- http://reiami.link/TW\nDiscord: http://reiami.link/discord\nFacebook -- http://reiami.link/FB\nSpotify -- http://reiami.link/Spotify\nApple Music -- http://reiami.link/Apple\nSoundcloud -- http://reiami.link/SC\nAudiomack -- http://reiami.link/AM\n\nCredits:\nDirector - Andrew Donoho\n\nProducer - Valerie Bush\nExecutive Producer - Ryan Huffman\nProduction Company - Huffman Creative\nHead of Production - Luke Arreguin\nProduction Manager - Eli Raskin\nProduction Coordinator - Katie Sarrels\n \nVideo Commissioner (Warner Records) - Devin Sarno\nA&R (Warner Records) – Stefan Max\nManagement – Daniel Maisonneuve\n\nDirector of Photography - Kristian Zuniga\n1st AC - Riley Keaton\n2nd AC - Adrienne Durazo\nSteadicam - Thor Wixom\nBTS - Lorenzo Bellasen\n\n1st AD - Joe Suarez\n2nd AD - Chelsea Tummolo\n\nGaffer - Ryan Oppedisano\nBBE - Jeffrey Taylor\nElectric - Justin Mcwilliams\nSwing - Kyle Farmer\n\nKey Grip - Henry Martinez\nBBG - Leonel Sanchez\nGrip - John Portillo\n\nProduction Designer - Jade Spiers \nArt Director - Chris Hohman\nProp Master - Kira Colas\nSet Dresser - Steele O’Neal\nSet Dresser - Griffin Luttrell\nSet Dresser- Carly Glanzberg\n\nStylist - Krissie Torgerson\nStylist Assistant - Kristin Condia\nHMU Department Head - Alex Perrone\nKey HMU - Mazena Puksto\nAddtl HMU - Melissa Jimenez\nAddtl HMU - Jennifer Cabezas\nSFX Makeup - Kaeghlan Ashley\n\nProduction Assistant - Ted Keffer\nProduction Assistant - Gabe Braden\nProduction Assistant - Kory Boyer\nProduction Assistant - Shay Turner\nProduction Assistant - Nour Karadsheh\nProduction Assistant - Ryan Morgan\n\nEditor/VFX - Andrew Donoho\n3D VFX - Jesse Toves at MFX\nAdditional VFX - Navid Sanati\nColorist - Kristopher Smale\nRotoscoping - Anil Kumar from Kalp Media & Narendra Moond & Purple Patch\n\nSword Swallower - David Markham\nStrong Man - Brad Swanick\nWaltz Dancer - Sarah Polednak\nContortionist - Brynn Route\nFeatured Clown - Troy Huizar\nBackground Clown - Joshua Han\nBackgroundClown - Aaron Groben\nBackground Clown - Michael Hennessey\nBackground Clown - Adelina Saldana\nBackground Stilts - Devin Collins\nBackground Juggler - Joey Heyworth\nBackground Wheel - Nick Kane\nBackground Baton - Maki Saruwatari\nBackground Carnie - Joey Davis\nBackground Performer - Jose Angeles\n\nSub Urban - Freak (feat. REI AMI) [Official Music Video]\n\n#SUBURBAN #REIAMI #FREAK #THRILLSEEKER",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zNrKoWG7Cj0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zNrKoWG7Cj0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zNrKoWG7Cj0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zNrKoWG7Cj0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zNrKoWG7Cj0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zNrKoWG7Cj0"
        }
      },
      "contentDetails": {
        "videoId": "zNrKoWG7Cj0",
        "videoPublishedAt": "2020-03-13T15:00:15Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "M6TJp_G1DmTQbkzcjKicjGNNcRM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xRUE3NkZCRjhBNEFDRDA1",
      "snippet": {
        "publishedAt": "2020-02-12T23:01:43Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Camila Cabello - My Oh My (Official Music Video) ft. DaBaby",
        "description": "\"Romance\" available at:  https://CamilaCabello.lnk.to/Romance\n\nFollow Camila: \nhttps://twitter.com/camila_cabello\nhttps://www.instagram.com/camila_cabello\nhttps://www.facebook.com/camilacabello\nhttps://www.camilacabello.com\n\n(C) 2020 Simco Ltd. under exclusive license to Epic Records, a division of Sony Music Entertainment",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6fd2kkLmSDQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6fd2kkLmSDQ"
        }
      },
      "contentDetails": {
        "videoId": "6fd2kkLmSDQ",
        "videoPublishedAt": "2020-02-12T20:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3TTOp1oLaQBRpPJ77Nex6u6Dbqc",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BNkNBMDFDMkQzN0RDODRC",
      "snippet": {
        "publishedAt": "2020-02-03T19:48:20Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Billie Eilish - everything i wanted",
        "description": "Listen to “everything i wanted”, out now: http://smarturl.it/everythingiwanted\n\nDirected by Billie Eilish\nDeveloped/Edited by John Paul Horstmann\nVFX by Ingenuity Studios\n\nFollow Billie Eilish:\nFacebook: https://www.facebook.com/billieeilish\nInstagram: https://www.instagram.com/billieeilish\nTwitter: https://twitter.com/billieeilish\nYouTube: https://www.youtube.com/BillieEilish\nEmail: http://smarturl.it/BillieEilishEmail\nStore: http://smarturl.it/BillieEilishStore\n\nMusic video by Billie Eilish performing everything i wanted. © 2020 Darkroom/Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EgBJmlPo8Xw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EgBJmlPo8Xw"
        }
      },
      "contentDetails": {
        "videoId": "EgBJmlPo8Xw",
        "videoPublishedAt": "2020-01-23T20:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DozOjY4Lh_dItjHg6SzdTYuNyyY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EODAxMDM2RDQxOUQwRkIy",
      "snippet": {
        "publishedAt": "2020-05-11T23:11:36Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Drake - Pain 1993 (Audio) ft. Playboi Carti",
        "description": "Dark Lane Demo Tapes - available everywhere now: https://Drake.lnk.to/DLDTVD\n\nConnect with Drake:\nhttps://www.instagram.com/champagnepapi\nhttps://www.facebook.com/Drake\nhttps://twitter.com/drake\nhttps://www.drakeofficial.com\n\n#Drake #DarkLaneDemo #Pain1993\n\nMusic video by Drake performing Pain 1993 (Audio). © 2020 OVO, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/5Zipln",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Q5jnuOCJvK0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Q5jnuOCJvK0"
        }
      },
      "contentDetails": {
        "videoId": "Q5jnuOCJvK0",
        "videoPublishedAt": "2020-05-01T04:48:24Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oq125FOyBTfv-U2uqrXtgupTftw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44M0YwNkI0MUFDMzZBMEZC",
      "snippet": {
        "publishedAt": "2019-09-24T22:10:30Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lewis Capaldi - Someone You Loved",
        "description": "Stream/download ’Someone You Loved’ https://lewiscapaldi.lnk.to/LC_SYLYD\n\nGet the extended edition of my debut album 'Divinely Uninspired To A Hellish Extent' here: https://lewiscapaldi.lnk.to/DUTAHE_Repack\n\nListen to my latest single “Before You Go” here: https://lewiscapaldi.lnk.to/beforeyougo\n\nTickets: http://tickets.lewiscapaldi.com\n\nDirector: Ozzie Pullin\nProducer: Byron McNally\nDirector of Photography: Ula Pontikos BSC\nEditor: Meg Thorne @ Cut & Run\nProduction Company: Partizan\nExec Producer: Mayling Wong\nColour: Jack McGinity @ CHEAT\n\n——————————————————\n\nLyrics \n\nI’m going under and this time I fear there’s no one to save me\nThis all or nothing really got a way of driving me crazy\n\nI need somebody to heal\nsomebody to know\nsomebody to have\nsomebody to hold\nIt’s easy to say\nbut it’s never the same\nI guess I kinda liked the way you numbed all the pain\n\nNow the day bleeds, into nightfall\nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nI’m going under and this time I fear there’s no one to turn to\nThis all or nothing way of loving got me sleeping without you\nNow I need somebody to know \nsomebody to heal \nsomebody to have \njust to know how it feels\nIt’s easy to say\nbut it’s never the same\nI guess I kinda liked the way you helped me escape\n\nNow the day bleeds, into nightfall \nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nAnd I tend to close my eyes when it hurts sometimes\nI fall into your arms \nI'll be safe in your sound til I come back around\n\nFor now the day bleeds, into nightfall \nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nBut now the day bleeds, into nightfall \nand you’re not here, to get me through it all\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\nI let my guard down and then you pulled the rug\nI was getting kinda used to being someone you loved\n\n——————————————————\n\nLewis Capaldi \nSubscribe to Lewis: https://www.youtube.com/channel/UCveF...\nLike Lewis on Facebook: https://www.facebook.com/lewiscapaldi/\nFollow Lewis on Twitter: https://twitter.com/LewisCapaldi\nFollow Lewis on Instagram: https://www.instagram.com/lewiscapaldi/\nFollow Lewis online: https://www.lewiscapaldi.com/ \n\n#LewisCapaldi #SomeoneYouLoved #OfficialVideo\n\nMusic video by Lewis Capaldi performing Someone You Loved. © 2019 Universal Music GmbH",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zABLecsR5UE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zABLecsR5UE"
        }
      },
      "contentDetails": {
        "videoId": "zABLecsR5UE",
        "videoPublishedAt": "2019-08-29T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "26j5wreWqTFw38sbvsA5tgAg2Mw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FQjMwRUZGOTIyODI4MTlC",
      "snippet": {
        "publishedAt": "2020-01-09T11:20:37Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Justin Bieber - Yummy (Official Video)",
        "description": "Changes Out Now: https://justinbieber.lnk.to/Changes\n \nFollow Justin:\nhttp://facebook.com/justinbieber\nhttp://twitter.com/justinbieber\nhttp://instagram.com/justinbieber\n \nSign up for Justin’s newsletter: http://justinbiebermusic.com\n \nProduction Company: OBB Pictures\nDirected by: Nick DeMoura\nCo-Directed by: Jordan Taylor\nExecutive Producers: Justin Bieber, Scooter Braun, Allison Kaye, Michael D. Ratner, Scott Ratner, Miranda Sherman, Kfir Goldberg\nChoreography by: Sienna Lalau\nEditor: Jordan Taylor\n\n#Yummy #Changes\n\nMusic video by Justin Bieber performing Yummy (Official Video). © 2020 Def Jam Recordings, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8EJ3zbKTWQ8"
        }
      },
      "contentDetails": {
        "videoId": "8EJ3zbKTWQ8",
        "videoPublishedAt": "2020-01-04T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "r_Aa51wDMY5WvMGS-jxYkYMjyAI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44NjY0Rjk3NUZDNjc4Nzk0",
      "snippet": {
        "publishedAt": "2020-05-18T00:07:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "6IX9INE- GOOBA (Official Music Video)",
        "description": "STREAM/DOWNLOAD GOOBA: https://cmg.ffm.to/GOOBA\n\nDirector- CanonF8, David Wept & 6ix9ine \nEP/Producer- Omar Reynoso & David Wept \nDP- Franklin Ricart \nEditor- 6ix9ine, CanonF8, Omar Jones \nArt Director- Omar Reynoso , 6ix9ine\nG&E - Rec Squad TV\nAC-Karleigh Del Moral\nColorist- Bryan Smaller \nVFX- WITHIN \nCreative Director(VFX)- Zane Comer\nCG Generalist- Brennan Brinkley \nAnimator- Nicole Low\nProduction Co- AT.LAS , FatKing Films\n\nGOOBA - 6ix9ine (Official Music Video)\nProduced by: Jah\nMix and Mastered by: Wizard Lee\nCover by: Alex Solis\n\n#6ix9ine #GOOBA #musicvideo\n\nDistributed by Create Music Group",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pPw_izFr5PA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pPw_izFr5PA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pPw_izFr5PA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pPw_izFr5PA/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pPw_izFr5PA"
        }
      },
      "contentDetails": {
        "videoId": "pPw_izFr5PA",
        "videoPublishedAt": "2020-05-08T18:41:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "c3i-sRY9-IEYiZtmxn2CbzsAiLQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43OUQxQkZGNzZCNzJEMjJG",
      "snippet": {
        "publishedAt": "2020-05-12T18:52:41Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Gabby Barrett - I Hope (Official Music Video)",
        "description": "Gabby Barrett - I Hope (Official Music Video)\n\nCo-Directed By: \nTaylor Kelly \nBrian Vaughan\n\nProduced By: \nTaylor Kelly \n\nLISTEN: http://smarturl.it/gabbybarrett.IHope  \n\nFacebook: https://www.facebook.com/gabbybarrett5/\nTwitter: https://twitter.com/GabbyBarrett_\nInstagram: https://www.instagram.com/gabbybarrett_\nWebsite: https://www.gabbybarrettofficial.com/\n\nLYRICS: \n\nI, I hope she makes you smile\nThe way it made me smile on the other end of a phone in the middle of the highway driving alone\nOh baby I, I hope you hear a song\nThat makes you sing along and gets you thinking about her then the last 7 miles turns into a blur, yeah\n\nI hope you both feel the sparks by the end of the drive\nI hope you know she's the one by the end of the night\nI hope you never ever felt more free, tell your friends that your so happy\nI hope she comes along and wrecks every one of your plans\nI hope you spend your last dime to put a rock on her hand\nI hope she's wilder than your wildest dreams, she's everything you're ever gonna need\n\nAnd then I hope she cheats\nLike you did on me\nAnd then I hope she cheats\nLike you did on me\n\nYeah babe, I hope she shows up in a 2 am pic from her friend\nHanging on to a guy and you just hate him\nI hope you stay up all night all alone waiting by the phone\nAnd then she calls\nAnd baby I, I hope you work it out\nForgive and just about forget and take her on a first date again\nAnd when you lean in for a kiss\n\nI hope you both feel the sparks by the end of the drive\nI hope you know she's the one by the end of the night\nI hope you never ever felt more free, tell your friends that your so happy\nI hope she comes along and wrecks every one of your plans\nI hope you spend your last dime to put a rock on her hand\nI hope she's wilder than your wildest dreams, she's everything you're ever gonna need\n\nAnd then I hope she cheats\nLike you did on me\nAnd then I hope she cheats\nLike you did on me\n\nI hope it goes, come all the way around\nI hope she makes you feel the same way about her that I feel about you right now\n\nI hope you both feel the sparks by the end of the drive\nI hope you know she's the one by the end of the night\nI hope you never ever felt more free, tell your friends that your so happy\nI hope she comes along and wrecks every one of your plans\nI hope you spend your last dime to put a rock on her hand\nI hope she's wilder than your wildest dreams, she's everything you're ever gonna need\n\nAnd then I hope she cheats\nLike you did on me\nAnd then I hope she cheats\nLike you did on me\n\nLike you did on me",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/qcCH6JpcK5w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/qcCH6JpcK5w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/qcCH6JpcK5w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/qcCH6JpcK5w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/qcCH6JpcK5w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "qcCH6JpcK5w"
        }
      },
      "contentDetails": {
        "videoId": "qcCH6JpcK5w",
        "videoPublishedAt": "2019-02-07T15:30:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "16fmA_mJDl8StpXsqdf2BwtnqKw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5COENEOTIwNjM3Q0NGOEI5",
      "snippet": {
        "publishedAt": "2020-05-27T11:20:19Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Harry Styles - Watermelon Sugar (Official Video)",
        "description": "This video is dedicated to touching.\nListen to Harry Styles’ new album ‘Fine Line’ now: https://HStyles.lnk.to/FineLineAY \n\nFollow Harry Styles:\nFacebook: https://HarryStyles.lnk.to/followFI\nInstagram: https://HarryStyles.lnk.to/followII\nTwitter: https://HarryStyles.lnk.to/followTI\nWebsite: https://HarryStyles.lnk.to/followWI\nSpotify: https://HarryStyles.lnk.to/followSI\nYouTube: https://HarryStyles.lnk.to/subscribeYD\n\nLyrics: \n\nTastes like strawberries\nOn a summer evening\nAnd it sounds just like a song\nI want more berries\nAnd that summer feeling\nIt’s so wonderful and warm\nBreathe me in\nBreathe me out\nI don’t know if I could ever go without\nI’m just thinking out loud\nI don’t know if I could ever go without\n \nWatermelon sugar high\nWatermelon sugar high\nWatermelon sugar high\nWatermelon sugar high\nWatermelon sugar\n \nStrawberries\nOn a summer evening\nBaby, you’re the end of June\nI want your belly\nAnd that summer feeling\nGetting washed away in you\nBreathe me in\nBreathe me out\nI don’t know if I could ever go without\n \nWatermelon sugar high\n \nI just wanna taste it\nI just wanna taste it\nWatermelon sugar high\n \nTastes like strawberries\nOn a summer evening\nAnd it sounds just like a song\nI want your belly\nAnd that summer feeling\nI don’t know if I could ever go without\n \nWatermelon sugar high\n \nI just wanna taste it\nI just wanna taste it\nWatermelon sugar high\nI just wanna taste it\nI just wanna taste it\nWatermelon sugar high\n \nWatermelon Sugar\n\n#HarryStyles #WatermelonSugar #FineLine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "E07s5ZYygMg"
        }
      },
      "contentDetails": {
        "videoId": "E07s5ZYygMg",
        "videoPublishedAt": "2020-05-18T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9EvE8Jl09o1k1dMZeTQJVRCUDZc",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yQUIyMERDQzgzQkE0NTVG",
      "snippet": {
        "publishedAt": "2020-06-29T21:19:11Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jason Derulo & Jawsh 685 - Savage Love",
        "description": "Savage Love Official\n\nCONNECT WITH JASON DERULO:\u202c\nTikTok - https://www.tiktok.com/@jasonderulo\n\u202aInstagram - http://www.instagram.com/jasonderulo/ \n\u202aFacebook - http://facebook.com/jasonderulo \n\u202aTwitter - http://twitter.com/jasonderulo  \n\u202aOfficial Website - http://www.jasonderulo.com/\n\nShot & edited by - https://www.instagram.com/davidstrib/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gUci-tsiU4I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gUci-tsiU4I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gUci-tsiU4I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gUci-tsiU4I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gUci-tsiU4I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gUci-tsiU4I"
        }
      },
      "contentDetails": {
        "videoId": "gUci-tsiU4I",
        "videoPublishedAt": "2020-06-09T17:30:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "knVFqJGgd5JfNvhAzhrUzkiKQQs",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42NTYxQjU2MDU0OEZCMDNE",
      "snippet": {
        "publishedAt": "2020-05-27T11:19:12Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jonas Brothers - X ft. KAROL G",
        "description": "Official music video by Jonas Brothers ft. Karol G performing \"X\" - available everywhere now: https://JonasBrothers.lnk.to/JBXVVD\n\n►Subscribe for more official content from Jonas Brothers: https://JonasBrothers.lnk.to/SubcribeYD \n\n►Exclusive Merch: https://shop.jonasbrothers.com/ \n\n►Follow Jonas Brothers Online\nInstagram: https://www.instagram.com/jonasbrothers/\nFacebook: https://www.facebook.com/JonasBrothers/ \nTwitter: https://twitter.com/jonasbrothers \nWebsite: https://jonasbrothers.com/ \n\nVideo directed by Josh Rimmey & Zach Williams\nVideo produced by Elijah Austin & Nathan Larimer\nVideo edited by Josh Rimmey, Zach Williams & Tom Goulet\nfor Black Coffee Productions \n\nLyrics:\n\nYeah\nOoh-la-la, by the pool we're singing \"Bailando\"\nTwo na-nights with the view, yeah, keeping those blinds closed (Yeah)\nShe said, \"I want to find somebody by night fall\"\nOoh-na-na, could it be, yeah, baby, I like you?\n\nWatchin' her move, I was lost in the rhythms\nThen she pulled me close by the look in her eyes\nDon't know her name, but I know that I need her\nShe said, \"Boy, you won't be lonely tonight\"\n\nShe said, \"Ooh, ooh, ooh\nKiss me like your ex is in the room-oom-oom\nDon't you be afraid of something new\nIf you're playin' right\nYou can be that someone, yeah\nThat someone who\nWon't leave me lonely tonight\"\n\nYeah-yeah-yeah\nYeah-yeah-yeah\n\nYeah\nOoh-la-la, make a move, yeah, baby, by last call\nFull moon night with the lights up, baby, your eyes glow (Yeah)\nDon't know why, but I feel like I'ma go psycho (Psycho)\nOoh-la-la, if it's cool, yeah, baby, I'd like too\n\nWatchin' her move, I was lost in the rhythms\nThen she pulled me close by the look in her eyes\nDon't know her name, but I know that I need her\nShe said, \"Boy, you won't be lonely tonight\"\n\nShe said, \"Ooh, ooh, ooh (Woo, ooh, ooh)\nKiss me like your ex is in the room-oom-oom\n(Ooh, ooh, ooh)\nDon't you be afraid of something new\nIf you're playin' right\nYou can be that someone, yeah\nThat someone who\nWon't leave me lonely tonight\"\n\nCaliente, te pongo caliente (Uhh)\nNo te de miedo a vivir algo diferente (Eh-aye)\nLas ganas no se equivocan\nPon tu lengua en mi boca\nVive la vida loca-loca-loca, mm\n\nToda la noche bailando contigo\nSuave y salvaje como un animal\nSé que te gusta, pero esto es prohibido\nYo me voy contigo, dame la señal\n\nShe said, \"Ooh, ooh, ooh (Woo, ooh, ooh)\nKiss me like your ex is in the room-oom-oom (Woo, ooh, ooh)\nDon't you be afraid of something new\nIf you're playin' right\nYou can be that someone, yeah\nThat someone who (Yeah, yeah, uh)\nWon't leave me lonely tonight\"\n\nOoh, ooh, ooh (Woo, ooh, ooh)\n(Aye)\nWoo, ooh, ooh\nTonight\nWoo, ooh, ooh\nSomeone who\nYou won't be lonely tonight\n\n#JonasBrothers, #KAROLG #X\n\nMusic video by Jonas Brothers performing X. © 2020 Jonas Brothers Recording, Limited Liability Company, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/Fx3LNd",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/9hGdmEwBwbg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/9hGdmEwBwbg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/9hGdmEwBwbg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/9hGdmEwBwbg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/9hGdmEwBwbg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "9hGdmEwBwbg"
        }
      },
      "contentDetails": {
        "videoId": "9hGdmEwBwbg",
        "videoPublishedAt": "2020-05-18T21:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "C6IwpGhGhE_KH_fdQt450-LZ3wM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45NkUwQ0NENDQ3REM0RERC",
      "snippet": {
        "publishedAt": "2020-05-12T18:53:22Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Morgan Wallen - Chasin' You (Dream Video)",
        "description": "Music video by Morgan Wallen performing Chasin' You (Dream Video). Big Loud Records\n\nListen to \"Chasin' You\" here: https://MorganWallen.lnk.to/IfIKnowMe\nGet updates from Morgan Wallen here: https://bit.ly/2FRP7LK\nTo see all upcoming tour dates, visit: http://morganwallen.com/\n\nInstagram: https://www.instagram.com/morganwallen/\nFacebook: https://www.facebook.com/morgancwallen/\nTwitter: https://twitter.com/MorganWallen",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iBduQb1S-4s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iBduQb1S-4s"
        }
      },
      "contentDetails": {
        "videoId": "iBduQb1S-4s",
        "videoPublishedAt": "2019-01-04T06:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PDBAetOHByx2UdIbSKmwc50Jnbc",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43OEFDM0Q4REIzREZBNEY4",
      "snippet": {
        "publishedAt": "2020-05-12T18:54:24Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Blake Shelton - Nobody But You (Duet with Gwen Stefani) (Official Music Video)",
        "description": "Blake Shelton - Nobody But You (Duet with Gwen Stefani) (Official Music Video)\n\nLYRICS:\nDon’t have to leave this town to see the world\n’Cause it’s something that I gotta do\nI don’t wanna look back in thirty years\nAnd wonder who you’re married to\nWanna say it now, wanna make it clear\nFor only you and God to hear\nWhen you love someone\nThey say you set ’em free\nBut that ain’t gonna work for me\n\nI don’t wanna live without you\nI don’t wanna even breathe\nI don’t wanna dream about you\nI wanna wake up with you next to me\nI don’t wanna go down any other road now\nI don’t wanna love nobody but you\nLookin’ in your eyes now, if I had to die now\nI don’t wanna love nobody but you\n\nAll the wasted days, all the wasted nights\nI blame it all on being young\nGot no regrets ’cause it got me here\nBut I don’t wanna waste another one\nI been thinkin’ about what I want in my life\nIt begins and ends the same\nIf I had to choose what I couldn’t lose\nThere would only be one thing\n\nI don’t wanna live without you\nI don’t wanna even breathe\nI don’t wanna dream about you\nI wanna wake up with you next to me\nI don’t wanna go down any other road now\nI don’t wanna love nobody but you\nLookin’ in your eyes now, if I had to die now\nI don’t wanna love nobody but you\n\nI wanna say it now, wanna make it clear\nFor only you and God to hear\n\nI don’t wanna live without you\nI don’t wanna even breathe\nI don’t wanna dream about you\nI wanna wake up with you next to me\nI don’t wanna go down any other road now\nI don’t wanna love nobody but you\nLookin’ in your eyes now, if I had to die now\nI don’t wanna love nobody but you\n\nI don’t wanna love nobody but you\nI don’t wanna love nobody but you\n\nCheck out the Blake Shelton Official Music Videos Playlist!\r\nhttps://bit.ly/2DlxP9P\r\n\r\nSubscribe to Blake’s channel for all the best and latest official music videos, official audio, albums, behind the scenes, live performances and more!\r\nhttps://bit.ly/2Hjua0h\r\n\r\nSee Blake on the road! \r\nhttps://www.blakeshelton.com/tour \r\n\r\nGet your Blake Shelton merchandise here!\r\nhttps://store.blakeshelton.com/ \r\n\r\nExplore Blake’s iconic music catalog! \r\nhttps://BlakeShelton.lnk.to/discography\r\n\r\nStay in touch with Blake!\r\nWebsite: http://www.blakeshelton.com/ \r\nFacebook: https://www.facebook.com/blakeshelton/ \r\nTwitter: https://twitter.com/blakeshelton \r\nInstagram: https://www.instagram.com/blakeshelton/\r\n\r\nThe official YouTube channel of Blake Shelton.\r\n \r\nWarner Music Nashville’s Blake Shelton is a country music heavyweight with over 25 #1 hit songs like “God Gave Me You”, “Boys 'Round Here”, “Who Are You When I’m Not Looking”, “Honey Bee” and “I’ll Name The Dogs”. His iconic catalog also includes 6 #1 albums such as Red River Blue, Bringing Back The Sunshine, If I’m Honest and Texoma Shore. A celebrated singer, songwriter, musician and coach of Team Blake on hit TV show “The Voice”, Blake has redefined what it means to be an entertainment superstar. And if that weren’t enough, Blake also dabbles in the finer things by way of his Ole Red bar and restaurants, inspired by hit song \"Ol' Red\", and his award-winning Smithworks vodka. With every turn, Blake continues to expand his own and country music's horizons.\r\n  \r\n#BlakeShelton #TeamBlake #GwenStefani #NobodyButYou",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4h9o0Gujuoc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4h9o0Gujuoc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4h9o0Gujuoc/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4h9o0Gujuoc"
        }
      },
      "contentDetails": {
        "videoId": "4h9o0Gujuoc",
        "videoPublishedAt": "2020-01-21T16:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "G8eyBi6zmJ7T0xNb13dzfj3fqf8",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS42NkYzMkU0NDQ2MTM5NzVE",
      "snippet": {
        "publishedAt": "2019-10-08T14:31:09Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Maroon 5 - Memories (Official Video)",
        "description": "“Memories” is out now:\nhttps://smarturl.it/MemoriesMaroon5\n\nFor more, visit:\nhttps://www.facebook.com/maroon5\nhttps://twitter.com/maroon5\nhttps://www.instagram.com/maroon5\n\nSign up for updates: http://smarturl.it/Maroon5.News\n\n#Maroon5 #Memories #M5\n\nMusic video by Maroon 5 performing Memories. © 2019 Interscope Records (222 Records)\n\nhttp://vevo.ly/wdiQiA",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SlPhMPnQ58k/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SlPhMPnQ58k"
        }
      },
      "contentDetails": {
        "videoId": "SlPhMPnQ58k",
        "videoPublishedAt": "2019-10-08T14:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "05AT_tnpObeTOuDFNq03CAq4IKk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40QTE4NjI2MzAzQjU5OTAx",
      "snippet": {
        "publishedAt": "2020-01-15T18:55:30Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Trevor Daniel - Falling (Official Music Video)",
        "description": "Stream Falling: https://smarturl.it/TDFalling\n\nFollow Trevor Daniel:\n►Instagram: https://www.instagram.com/iamtrevordaniel/\n►Twitter:https://twitter.com/Iamtrevordaniel\n►Soundcloud: https://soundcloud.com/iamtrevordaniel\n►YouTube:https://www.youtube.com/channel/UCLvAxkjgDXIrO-IDNIBgnEg\n\n[Intro]\nOh\nOoh, ooh\n\n[Chorus]\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\n\n[Verse]\nTalk to me, I need to hear you need me like I need ya\nFall for me, I wanna know you feel how I feel for you, love\nBefore you, baby, I was numb, drown out pain by pourin' up\nSpeedin' fast on the run, never wanna get caught up\nNow you're the one that I'm callin'\nSwore that I'd never forget, don't think I'm just talkin'\nI think I might go all in, no exceptions, girl, I need ya\n\n[Bridge]\nThink I'm out of my mind, 'cause I can't get enough\nOnly one that I give my time, 'cause I got eyes for ya\nMight make an exception for ya, 'cause I been feelin' ya\nThink I might be out of my mind, I think that you're the one\n\n[Chorus]\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\nMy last made me feel like I would never try again\nBut when I saw you, I felt something I never felt\nCome closer, give you all my love\nIf you treat me right, baby, I'll give you everything\n\n[Outro]\nI'll never give my all again\n'Cause I'm sick of falling down\nWhen I open up and give my trust\nThey find a way to break it down\nBreak down\nTear me up inside\nWhen you break me down\n\n#falling #trevordaniel",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/L7mfjvdnPno/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "L7mfjvdnPno"
        }
      },
      "contentDetails": {
        "videoId": "L7mfjvdnPno",
        "videoPublishedAt": "2020-01-15T17:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FwSdMEnjHuL6K1ZtkF0oossdxUE",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43MkM2QkVFRDVBNDk1NDdB",
      "snippet": {
        "publishedAt": "2020-05-12T18:56:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Powfu - death bed (coffee for your head) (Official Video) ft. beabadoobee",
        "description": "Thank u to every single person that used this song in a YouTube video or tiktok or just shared it with your friends. I had a lot of fun filming this video! Love is all we need ❤ - Powfu \n\nOfficial video for \"death bed\" by Powfu featuring beabadoobee.  \n\nListen & Download “death bed” out now: https://powfu.lnk.to/deathbed\nListen to Powfu's new EP \"poems of the past\" out now: https://Powfu.lnk.to/POTP\n\nAmazon - https://powfu.lnk.to/deathbed/amazonmusic  \nApple Music - https://powfu.lnk.to/deathbed/applemusic \niTunes - https://powfu.lnk.to/deathbed/itunes\nSpotify - https://powfu.lnk.to/deathbed/spotify\nYouTube Music - https://powfu.lnk.to/deathbed/youtubemusic\n\n(Beabadoobee) \nDont stay awake for too long \nDont go to bed \nI'll make a cup of coffee for your head I\n'll get you up and going out of bed \n\n(Powfu) \nYeah, I don’t wanna fall asleep \nI don’t wanna pass away \nI've been thinking of our future \n'Cause I'll never see those days \n\nI don’t know why this has happened \nBut I probably deserve it \nI tried to do my best \nBut you know that I’m not perfect \n\nI've been praying for forgiveness \nYou’ve been praying for my health \nWhen I leave this earth \nHoping you’ll find someone else \n\n'Cause yeah we still young \nThere's so much we haven’t done \nGetting married \nStart a family \nWatch your husband with his son \n\nI wish it could be me \nBut I won’t make it off this bed \nHope I go to heaven so I see you once again \n\nMy life was kind of short \nBut I got so many blessings \nHappy you were mine \nIt sucks that its all ending \n\nDont stay awake for too long \nDont go to bed \nI'll make a cup of coffee for your head \nI'll get you up and going out of bed \n\nDont stay awake for too long \nDont go to bed \nI'll make a cup of coffee for your head \nI'll get you up and going out of bed \n\nI'm happy that you here with me \nI'm sorry if I tear up \nWhen me and you were younger \nYou would always make me cheer up \n\nTaking goofy videos \nAnd walking through the park \nYou would jump into my arms \nEvery time you heard a bark \n\nCuddle in your sheets \nSing me sound asleep \nAnd sneak out through your kitchen at exactly 1:03 \n\nSundays went to church \nOn Mondays watched a movie \nSoon you’ll be alone \nSorry that you have to lose me\n\nDirector: bedroom (@bedroom.projects)\nProduction Company: COMPULSORY (@compulsoryview)\nExec. Producer: Kiran Mandla (@kir.m_)\nProducer: Joseph J Goldman (@thewarthog)\nProducer/Commissioner: Saul Levitz\n \nProduction Service Co: BOLDLY (@filmboldly)\nProducer: Sebastien Galina (@sebastiengalina)\nDOP: Kaayla Whachell (@kaayla_whachell)\nDOP: Meliodic (@meliodic)\n1st AC: Thomas Wang (@wangerthomas)\nGaffer: Brandon Y Lee (@brandon_y_lee)\nKey Grip: Tom Armstrong (@armstronggrip93)\nGear: Primary Imaging (@primaryimaging)\nColourist: Thomas Mangham (@thomasmangham) @ The Mill\n\nFollow Powfu\nInstagram - https://www.instagram.com/pow.fu/\nTwitter - https://twitter.com/powfu\n\n#deathbed #Powfu #beabadoobee",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jJPMnTXl63E"
        }
      },
      "contentDetails": {
        "videoId": "jJPMnTXl63E",
        "videoPublishedAt": "2020-04-01T17:00:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lV7BQY1cJBdUm6cY9_eFHP-N4Tw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zMjY5ODU0NEU2NENGMkE1",
      "snippet": {
        "publishedAt": "2020-01-14T21:22:20Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Roddy Ricch - High Fashion (feat. Mustard) [Official Audio]",
        "description": "Roddy Ricch - High Fashion (feat. Mustard)\nStream - https://roddyricch.lnk.to/PleaseExcuseMeForBeingAntisocial\n\nFollow Roddy Ricch\nhttps://www.instagram.com/roddyricch\nhttps://twitter.com/roddyricch\nhttps://soundcloud.com/roddyricch\nhttps://www.facebook.com/RoddyRicch/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iGU66wsjIPA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iGU66wsjIPA"
        }
      },
      "contentDetails": {
        "videoId": "iGU66wsjIPA",
        "videoPublishedAt": "2019-12-06T05:05:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "E2Yz2AUNwEmu-5loDI_T_kl-GxY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45RTA1QUExQTlEOUIxRjM4",
      "snippet": {
        "publishedAt": "2020-05-12T18:58:59Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Luke Combs - Does To Me (Audio) ft. Eric Church",
        "description": "Listen to “Does To Me” from Luke Combs’ album, ‘What You See Is What You Get’, available now: http://smarturl.it/WYSIWYG?IQid=youtube\n \nSpotify: http://smarturl.it/WYSIWYG/spotify?IQid=youtube\nApple Music: http://smarturl.it/WYSIWYG/applemusic?IQid=youtube\nAmazon Music: http://smarturl.it/WYSIWYG/az?IQid=youtube\niTunes: http://smarturl.it/WYSIWYG/itunes?IQid=youtube\nYouTube Music: http://smarturl.it/WYSIWYG/youtubemusic?IQid=youtube\nPandora: http://smarturl.it/WYSIWYG/pandora?IQid=youtube\nAll retailers: http://smarturl.it/WYSIWYG?IQid=youtube\n \nConnect With Luke: \nInstagram: http://instagram.com/lukecombs\nFacebook: http://facebook.com/lukecombs\nTwitter: http://twitter.com/lukecombs\nSubscribe: http://smarturl.it/LCYTsub?IQid=youtube\nWebsite: http://www.lukecombs.com   \n \n#LukeCombs #DoesToMe #WhatYouSeeIsWhatYouGet",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/17fnUqLdm7o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/17fnUqLdm7o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/17fnUqLdm7o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/17fnUqLdm7o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/17fnUqLdm7o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "17fnUqLdm7o"
        }
      },
      "contentDetails": {
        "videoId": "17fnUqLdm7o",
        "videoPublishedAt": "2019-11-08T05:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5Fp9fApBY5bFN6GPZXr5PT_I4NI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wMUMzOEUwMzkxNkE2NkEw",
      "snippet": {
        "publishedAt": "2020-05-12T20:03:08Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Surfaces - Sunday Best (Official Music Video)",
        "description": "\"Sunday Best\" official music video from the 'Where The Light Is' album\n\n\nSummer Colors Tour \nGet tickets at https://www.surfacesmusic.com/tour\nMAY 14: Tampa, FL \nMAY 15: Ft. Lauderdale, FL\nMAY 16: Orlando, FL \nMAY 17: Hangout Fest \nJUN 16: Bonaroo\n**More dates to be added**\n\n\n\nDirector: Taylor Fauntleroy\nProducer: Stephen Bielecki\nCreative Supervisor: Drew Kirsch\nGuest Star: Hannah Meloche\nCinematographer: Joe Butler\nProduction Designer: Mike Benna\n\nfollow us:\n\ninstagram - http://instagram.com/surfacesmusic\nspotify - https://spoti.fi/32j1Gdh\nsoundcloud - http://soundcloud.com/surfaces-music\ntwitter - https://twitter.com/surfacesmusic\nfacebook - https://facebook.com/surfacesmusic\n\nLyrics\nFeeling good, like I should\nWent and took a walk around the neighborhood\nFeeling blessed, never stressed\nGot that sunshine on my Sunday best\nEveryday can be a better day despite the challenge\nAll you gotta do is leave it better than you found it\nIt's gonna get difficult to stand but hold your balance\nI just say whatever 'cause there is no way around it cause\nEveryone falls down sometimes\nBut you just gotta know it'll all be fine\nIt's ok, uh-huh, uh\nIt's okay, it's okay\nFeeling good, like I should\nWent and took a walk around the neighborhood\nFeeling blessed, never stressed\nGot that sunshine on my Sunday best\nSomedays you wake up and nothing works you feel surrounded\nGotta give your feet some gravity to get you grounded\nKeep good things inside your ears just like the waves and sound did\nAnd just say whatever 'cause there is no way around it\nE-E-Everyone falls down sometimes\nBut you just gotta know it'll all be fine\nIt's ok, uh-huh, uh\nIt's okay, it's okay\nFeeling good, like I should\nWent and took a walk around the neighborhood\nFeeling blessed, never stressed\nGot that sunshine on my Sunday best\nFeeling good, like I should\nWent and took a walk around the neighborhood\nFeeling blessed, never stressed\nGot that sunshine on my Sunday best\n\n#surfaces #sundaybest #musicvideo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_83KqwEEGw4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_83KqwEEGw4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_83KqwEEGw4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_83KqwEEGw4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_83KqwEEGw4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_83KqwEEGw4"
        }
      },
      "contentDetails": {
        "videoId": "_83KqwEEGw4",
        "videoPublishedAt": "2019-07-10T20:17:53Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BRWpCeBKfgCxCSBAXfRX0Bf66YM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44MURFOUQxQUU1MDJENzg3",
      "snippet": {
        "publishedAt": "2020-01-14T21:30:45Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Black Eyed Peas, J Balvin - RITMO (Bad Boys For Life)",
        "description": "\"RITMO (Bad Boys For Life)\" single available at: https://smarturl.it/RITMO\n\nFollow Black Eyed Peas online\nFacebook: https://www.facebook.com/blackeyedpeas\nTwitter: https://twitter.com/bep \nInstagram: https://www.instagram.com/bep\nMore Videos: https://www.youtube.com/playlist?list=PLgZwaNdNnwLpNLAN8Kh2DoWsD1ViSlNDN\n\nFollow Bad Boys For Life online\nOfficial Site: https://www.badboysforlife.movie/?hs308=ritmo\nWatch Trailer: https://www.youtube.com/watch?time_continue=1&v=jKCj3XuPG8M\nFacebook: https://www.facebook.com/BadBoysMovie\nTwitter: https://twitter.com/BadBoys\nInstagram: https://www.instagram.com/BadBoys/\n\nLyrics:\nThis is the rhythm, rhythm, rhythm, rhythm\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm, rhythm\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo\n\nRitmo \n\nNo son ni Reebok ni son Nike (No)\nSin estilista luzco fly (Yes)\nLa Rosalía me dice que luzco guay (La Rosalía)\nNo te lo niego porque yo sé lo que hay (Woo)\nLo que se ve, no se pregunta (Nah)\nSoy próspero y tengo claro que e' mi culpa (Mi culpa, culpa)\nComo Canelo en el ring nada me asusta\nVivo en mi base y la paz no me la tumban (Woo)\nHakuna Matata como Timón y Pumba\nVoy pa' leyenda así que dale zumba\nLos dejo ciego' con la vibra que me alumbra\nHaters pa' la tumba, nosotros pa' la rumba (Ra)\n\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\n[Chorus: J Balvin, Corona, will.i.am]\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo \n\nRitmo\n\nThe rhythm, the rebel\nStyles upon styles upon styles, I got several\nBorn to be wild 'cause I live like a daredevil\nLive it up, hit ‘em up, that’s the scenario \n2Pac, I get around like a merry go \nRooftop, I am on top of the pedestal \nFlu shot, I am so sick I need medical \nPuta, I learned that shit down in Mexico (Hahaha!)\nThe rhythm, the rebel\nNew and improved I be on a new level (Oh, yeah)\nThat’s how we do it, we buildin’ like LEGOs (Oh, yeah)\nFuel on the fire, you dealin' with fuego\nCan't stop, I am addicted I never quit\nWon't stop, don't need to speak to no therapist\nDon’t stop, keepin' it movin's the narrative\nNonstop, do it like Whoop! There it is \n\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo\n\nRitmo\nYou like that space?\n\nVisit Bad Boys For Life Official Site\nLink: https://www",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EzKkl64rRbM"
        }
      },
      "contentDetails": {
        "videoId": "EzKkl64rRbM",
        "videoPublishedAt": "2019-10-11T04:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2BvaLWp3U32MWfmHIHOVRvgyVOA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zQzVBQUY2NDAwQTgxODcz",
      "snippet": {
        "publishedAt": "2020-05-12T18:59:40Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Thomas Rhett - Beer Can’t Fix ft. Jon Pardi",
        "description": "Music video by Thomas Rhett performing Beer Can’t Fix. © 2020 Big Machine Label Group, LLC\n\nhttp://vevo.ly/r451Bx",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rct9Zs_Yd-I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rct9Zs_Yd-I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rct9Zs_Yd-I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rct9Zs_Yd-I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rct9Zs_Yd-I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rct9Zs_Yd-I"
        }
      },
      "contentDetails": {
        "videoId": "rct9Zs_Yd-I",
        "videoPublishedAt": "2020-03-25T04:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MntIv83BJMwMxnHXRonK-783jTs",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yREMyQThGRjREMUQzQ0Mw",
      "snippet": {
        "publishedAt": "2020-01-14T21:21:14Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "blackbear - hot girl bummer [big budget music video]",
        "description": "blackbear - hot girl bummer \n\nlisten: https://smarturl.it/hotgirlbummer\nspotify: https://smarturl.it/hotgirlbummer/spotify\napple music: https://smarturl.it/hotgirlbummer/applemusic\niTunes: https://smarturl.it/hotgirlbummer/itunes \n\nfollow bear: \nhttp://twitter.com/iamblackbear\nhttp://instagram.com/bear \nhttp://www.beartrap.la \n\n#blackbear #hotgirlbummer \n\nMusic video by blackbear performing hot girl bummer. © 2019 Beartrap, LLC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5cPW0ggFq04/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5cPW0ggFq04"
        }
      },
      "contentDetails": {
        "videoId": "5cPW0ggFq04",
        "videoPublishedAt": "2019-11-21T12:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Q1YBSPtYMkqAeJQt1P6WpfiN8qw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EM0QxODcwNzdGMDVDMENC",
      "snippet": {
        "publishedAt": "2020-01-14T21:28:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Rod Wave - Heart On Ice (Official Music Video)",
        "description": "Stream \"Pray 4 Love\" 🖤album - http://smarturl.it/pray4love\n#rodwave #pray4love\n\nStream PTSD: https://smarturl.it/rwptsd \n\nFollow Rod Wave:\n► Instagram: https://www.instagram.com/rodwave/?hl=en\n► TikTok: https://www.tiktok.com/@rodwave\n► Twitter: https://twitter.com/rodwave\n► Facebook: https://www.facebook.com/rodwave/\n► SoundCloud: https://soundcloud.com/rodwave\n► YouTube: https://smarturl.it/RWYTSub",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/deMLg4FPFhQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "deMLg4FPFhQ"
        }
      },
      "contentDetails": {
        "videoId": "deMLg4FPFhQ",
        "videoPublishedAt": "2019-05-23T03:59:02Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 100,
    "resultsPerPage": 50
  }
}

    http_version: null
  recorded_at: Wed, 08 Jul 2020 02:18:03 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=100&pageToken=CDIQAA&part=snippet,contentDetails&playlistId=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 08 Jul 2020 02:18:03 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "jzGQ5onQ_4wM49pVnWYwoLKiGCw",
  "prevPageToken": "CDIQAQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "5IWRQji1cZuTZla33eN70hGg7HU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xQTNBM0VERjQ0QTIzRUMz",
      "snippet": {
        "publishedAt": "2019-11-26T13:17:28Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Mustard - Ballin’ ft. Roddy Ricch",
        "description": "'Perfect Ten' out now: http://smartURL.it/PerfectTen\n\nFollow Mustard:\nhttp://www.instagram.com/Mustard\nhttp://www.facebook.com/DJMustardOnTheBeat\nhttp://www.twitter.com/Mustard\n\n#Mustard #RoddyRicch #Ballin #PerfectTen\n\nMusic video by Mustard performing Ballin’. © 2019 10 Summers Records, Inc./Interscope Records\n\nhttp://vevo.ly/CuRI6I",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YS0h2-hy9rw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 50,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YS0h2-hy9rw"
        }
      },
      "contentDetails": {
        "videoId": "YS0h2-hy9rw",
        "videoPublishedAt": "2019-10-02T16:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wqRuFQHngIjzHs28QEsDtUQTUfk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BQkJGMzVGMDQ5MENGQjEw",
      "snippet": {
        "publishedAt": "2020-05-12T19:00:57Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Travis Denning - After A Few",
        "description": "Stream Here: http://strm.to/AfterAFewYD\n\nFollow Travis: \nFacebook: https://www.facebook.com/travisdenningmusic/\nTwitter: http://www.twitter.com/Travis_Denning \nInstagram: http://www.instagram.com/TravisDenning\nWebsite: www.travisdenning.com\n\n\nMusic video by Travis Denning performing After A Few. © 2019 UMG Recordings, Inc.\n\nhttp://vevo.ly/zHaeJD",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ReJsy1nnCS4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ReJsy1nnCS4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ReJsy1nnCS4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ReJsy1nnCS4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ReJsy1nnCS4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 51,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ReJsy1nnCS4"
        }
      },
      "contentDetails": {
        "videoId": "ReJsy1nnCS4",
        "videoPublishedAt": "2019-05-15T04:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0NhzIVNXfapUeyinRAKZvDzXDhY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DMUM4MDIwOUM1QjAxMjEx",
      "snippet": {
        "publishedAt": "2019-11-26T13:17:15Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "TONES AND I - DANCE MONKEY (OFFICIAL VIDEO)",
        "description": "2nd single from debut EP 'The Kids Are Coming' out now. https://tonesandi.lnk.to/TheKidsAreComingYT\n\nWatch Tones And I's 'Artist On The Rise' video: https://youtu.be/UkwZILz_EKE\n\nTones And I - Dance Monkey - https://tonesandi.lnk.to/DanceMonkeyYT\n\nDirected by: Liam Kelly & Nick Kozakis\nDirector of Photography: Carl Allison\nMakeup by: Danielle Ruth\nProduced by: Visible Studios\nhttps://www.visiblestudios.com.au/\n\nDon't forget to subscribe to my channel: http://smarturl.it/TonesAndI.YT\n\nFollow: \nhttps://www.tonesandi.com\nhttps://www.facebook.com/TONESANDI\nhttps://www.instagram.com/tonesandi\n\nContact Management Worldwide: \nLemon Tree Music + Artists Only\nmgmt@tonesandi.com\n\nLYRICS:\nThey say oh my god I see the way you shine \nTake your hands my dear and place them both in mine\nYou know you stopped me dead while I was passing by\nAnd now I beg to see you dance just one more time \nOhhh I \nSee you see you seen you every time \nand oh my I, I like you style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh \nI’ve never seen anybody do the things you do before \nThey say\nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again \n\nI said \nOh my god I see you walking by \nTake my hands my dear and look me in my eyes\nJust like a monkey I’ve been dancing my whole life \nBut you just beg to see me dance just one more time \nOoh I \nSee you see you seen you every time\nAnd oh my I, I like your style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\n\nOooooo\n\nThey say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nAll again",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/q0hyYWKXF0Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 52,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "q0hyYWKXF0Q"
        }
      },
      "contentDetails": {
        "videoId": "q0hyYWKXF0Q",
        "videoPublishedAt": "2019-06-24T22:01:36Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0B-opP05lP6_5Y_sQoCAiUvN2Cg",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yRDM5NUY1QjA4Rjg1OUMz",
      "snippet": {
        "publishedAt": "2020-05-12T20:06:47Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Carly Pearce, Lee Brice - I Hope You’re Happy Now",
        "description": "Music video by Carly Pearce, Lee Brice performing I Hope You’re Happy Now. © 2019 Big Machine Label Group, LLC\n\nhttp://vevo.ly/6Q14yQ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SBBhyMYnwCw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 53,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SBBhyMYnwCw"
        }
      },
      "contentDetails": {
        "videoId": "SBBhyMYnwCw",
        "videoPublishedAt": "2019-11-20T18:30:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Np1FwloHww-Yt4BAHjvtsyPsmjI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EMDk0RkM0MjRDODBDNUE3",
      "snippet": {
        "publishedAt": "2020-03-06T00:50:28Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lewis Capaldi - Before You Go (Official Video)",
        "description": "Get the extended edition of my debut album 'Divinely Uninspired To A Hellish Extent' here: https://lewiscapaldi.lnk.to/DUTAHE_Repack \n\nListen to the “Before You Go” EP here:\nhttps://lewiscapaldi.lnk.to/BYG_Acoustic \n \nTickets: http://tickets.lewiscapaldi.com \n\nDirected by: Kyle Thrash\nProduced by: Stephen Buchanan and Krista Worby\nDP: Frank Mobilio\n\nStarring:\nSasha Lane\nCypress Hayunga\nJack Luceno\nRomey Morello\n\nProduction company: More Media \n\n\nLyrics:\nI fell by the wayside like everyone else\nI hate you, I hate you, I hate you but I was just kidding myself\nOur every moment I start to replace‘\nCos now that they’re gone all I hear are the words that I needed to say\n\nWhen you hurt under the surface\nLike troubled water running cold\nWell time can heal but this won’t\n\nSo, before you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting \nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nWas never the right time whenever you called\nWent little by little by little until there was nothing at all\nOur every moment I start to replay but all I can think about is seeing that look on your face\n\nWhen you hurt under the surface\nLike troubled water running cold \nWell time can heal but this won’t \n\nSo, before you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting\nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nWould we be better off by now\nIf I’d have let my walls come down\nMaybe I guess we’ll never know \nYou know, you know\n\nBefore you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting \nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nMusic video by Lewis Capaldi performing Before You Go. © 2020 Universal Music GmbH\n\nhttp://vevo.ly/FxI3tT",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 54,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Jtauh8GcxBY"
        }
      },
      "contentDetails": {
        "videoId": "Jtauh8GcxBY",
        "videoPublishedAt": "2020-01-24T18:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "x2n1sv9N35wOQJfiM5-s8Vefhqs",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40MkFEQTBGM0Q3REE5MUUy",
      "snippet": {
        "publishedAt": "2020-05-12T19:01:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "BENEE - Supalonely ft. Gus Dapperton",
        "description": "MADE WITH THE SUPPORT OF NZ ON AIR\n\nStream / Download STELLA & STEVE: https://BENEE.lnk.to/STELLASTEVEYD\n\nFollow BENEE\nInstagram: https://www.instagram.com/beneemusic \nFacebook: https://www.facebook.com/BENEE\nTwitter: https://twitter.com/BENEEMUSIC\n\nLYRICS: \nI know I fucked up I'm just a loser shouldn’t be with ya guess I’m a quitter \n  \nwhile ur out there drinking I’m just here thinking bout where I should’ve been  \n  \n(I been lonely mm aah yeah) \n  \nWater pouring down from the ceiling  \nI knew this would happen \n  \nStill hard to believe it  \nMaybe I’m dramatic  \nI don’t wanna seem it  \nI don’t wanna panic  \n\nI’m a sad girl  \nIn this big world \nIt’s a mad world  \n  \nAll of my friends  \nKnow what’s happened \nYou’re a bad thing  \n  \n(Grrrr) \n  \nI know I fucked up I'm just a loser shouldn’t be with ya guess I’m a quitter \n  \nwhile ur out there drinking I’m just here thinking bout where I should’ve been  \n  \n(I been lonely mm aah yeah) \n  \nLalalala lalalala lonely  \n(I’m a lonely bitch)  \nLalalala lalalala lonely  \n(SupaLonely) \n  \nNow I’m in the bathtub crying  \nThink I’m slowly sinking  \n  \nBubbles in ma eyes now  \nMaybe I’m just dreaming  \n  \nNow I’m in the sad club  \nJust tryna get a back rub\n\nI’m a sad girl  \nIn this big world \nIt’s a mad world  \n  \nAll of my friends  \nKnow what’s happened \nYou’re a bad thing  \n  \n(Grrrr) \n  \nI know I fucked up I'm just a loser shouldn’t be with ya guess I’m a quitter \n  \nwhile ur out there drinking I’m just here thinking bout where I should’ve been  \n  \n(I been lonely mm aah yeah) \n  \nLalalala lalalala lonely  \n(I’m a lonely bitch)  \nLalalala lalalala lonely  \n(SupaLonely) \n\n(Gus Dapperton verse) I loathe romancing in itself yea I’d be damned to try I’m only dancing by myself so I don't slam my Irish buck compostable cups b-b-benee i can't stress this enough I would hate to mess things up but my boogie still stays restless as fuck \n  \nI know I fucked up I'm just a loser shouldn’t be with ya guess I’m a quitter \n  \nwhile ur out there drinking I’m just here thinking bout where I should’ve been  \n  \n(I been lonely mm aah yeah) \n  \nLalalala lalalala lonely  \n(I’m a lonely bitch)  \nLalalala lalalala lonely  \n(SupaLonely)\n\n1. Add credits below the lyrics in the description: \nDirected & Edited by ROME\nProducer: Gregory Kelly + Ron Brown\nDirector of Photography: Jesse Gohier Fleet\nProduction designer: Pernell Marsden\nStylist: Sarah Pritchard  \nHair & Makeup Artist: Georgia Gaillard  \nGaffer: Ian Dart + Andrew Lock\nBest Boy: Jayden De Oliveira\nSteadicam: Lachlan Wright\n1st AC: Shawkat Husseini +  Taylan Ceylan\nCamera Assist/Grip: David Chavez\nStyling for Benee: Sarah Pritchard\nWardrobe Assist: Laura Vaquero  \nWardrobe Assist: Will Stevens\nArt Assistant: Sasha Vulling +  Shannon Biviano\nArt Dept Graphics: Ahmad Arief A\nDriver: Scott Marrinan\nProduction Assistant: Bec Smith\nColourist: Abe Wynen\n\n\n\nMusic video by BENEE performing Supalonely. © 2020 Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/WcYMrp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Rb6Scz-5YOs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Rb6Scz-5YOs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Rb6Scz-5YOs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Rb6Scz-5YOs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Rb6Scz-5YOs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 55,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Rb6Scz-5YOs"
        }
      },
      "contentDetails": {
        "videoId": "Rb6Scz-5YOs",
        "videoPublishedAt": "2020-02-04T21:00:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "V48o5BEibXuAOgA_Fd4nyxSJPtY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43RjJDODY0NjU3N0JFRkZC",
      "snippet": {
        "publishedAt": "2020-05-12T19:01:24Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Sam Hunt - Hard To Forget (Official Music Video)",
        "description": "The official music video for Sam Hunt’s Hard To Forget.\n \nSubscribe to this channel: https://umgn.us/SamHuntSubscribe\nWatch more official videos from Sam Hunt: https://umgn.us/SamHuntVideos\nSign up to receive email updates from Sam Hunt: https://umgn.us/samhuntupdates \nListen to Sam Hunt’s latest music: https://strm.to/SamHuntMusic\n \n******************************************\nWebsite: http://www.samhunt.com/\nFacebook: https://www.facebook.com/SamHuntMusic\nInstagram: https://www.instagram.com/samhuntmusic\nTwitter: https://twitter.com/samhuntmusic\n \n******************************************\n#SamHunt #HardToForget #CountryMusic\n\nMusic video by Sam Hunt performing Hard To Forget. © 2020 UMG Recordings, Inc.\n\nhttp://vevo.ly/yWSbLA",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Wxhv_HsEIl4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Wxhv_HsEIl4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Wxhv_HsEIl4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Wxhv_HsEIl4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Wxhv_HsEIl4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 56,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Wxhv_HsEIl4"
        }
      },
      "contentDetails": {
        "videoId": "Wxhv_HsEIl4",
        "videoPublishedAt": "2020-03-20T15:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DjCH5ACJlloVxpMtsDI26ySzVWQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DRjk1QzcyRTk3OTI5NzU1",
      "snippet": {
        "publishedAt": "2020-05-12T19:01:42Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby - Emotionally Scarred (Official Video)",
        "description": "Watch the music video for Lil Baby's \"Emotionally Scarred.\"\n\nStream/Download “My Turn - Deluxe” Here: https://qualitycontrol.lnk.to/MyTurnYD\n\nFollow Lil Baby Everywhere:\nhttps://www.instagram.com/lilbaby_1/\nhttps://twitter.com/lilbaby4PF\nhttps://www.facebook.com/4pflilbaby\n\nText Lil Baby at 678-496-7757\n\nEmotionally Scarred Lyrics:\n\n[Verse 1]\nA love letter came through the mail, it said, \"\"I miss you\"\"\nI ripped it up and flushed with the tissue, try to forget you\nI ain't got nothing against you, we human, we all got issues\nBut I'm tired of being tired of being tired\nThat part of me done died\nI see it, then I don't, act like I'm blind\nI'm confident it won't be one of mine\nI know emotions come with lies, so I tell the truth all the time\nAin't got no sympathy for no bitch\nI admit that I'm rich and I'm lit\nJumpin' up on stages, I get two hundred an occasion\nBro had really fucked the game up, we made niggas shut they trap down\nThey see how I made it, I'm the reason they won't rap now\nSee me out in traffic, make a hater pull his hat down\nThe biggest OG's salute me, a stylist can't even style me\nThe robbers probably wanna get me, I'm hoppin' out Lamborghinis\nThe youngins turn in my city, they try me, I get it cracking\nSome of this still would happen if I never had started rapping\nMy people them still steady trapping and they still be getting active\nI tell 'em to chill, I'm tryna run up these M's\nPaid cash and then he post the crib (Nah)\nI can't show nobody where my mama live, that's how I 'posed to feel\nMy niece just asked me were my diamonds real, I said, \"\"Of course\"\"\nI just played the hand that I was dealt, didn't have to force\nAll around the world they know it's me, they hear my voice\nAnd I done it all in a pair of Diors, yeah\n\n[Chorus]\nYoung age, learned how to get paid (We gon' get the money)\nBig stage, long way from Section 8 (Ballin' other countries)\nBig wave, he gon' have to get saved (Big old wave)\nRidin' in the foreign, chiefin' on the forest\nI know I wasn't there for you, at least I said I'm sorry\nYou know what it was, I told you that I was heartless\nI'm emotionally scarred, that ain't even your fault\nBut don't listen to them haters tryna fill your ears with salt\n\n[Verse 2]\nAll this revenue coming in, I'll probably never spend\nI just bought my BM a Benz, now that's another Benz\nI just cut off all of my friends and brought my brothers in\nI don't see nobody but me, who I'm gon' lose to?\nI can't move around without tools, these niggas loose screws\nI can see me taking the lead over the new school\nThey remember me from selling weed at my old school\nOnly hit it once and now it's old news\nBlew up, who the fuck would knew? Paint my Trackhawk Nipsey Blue\nIf I get one, you get one too, I really move how bosses move\nI never call myself a G.O.A.T., I leave that up to the people\nEverybody can't go to the top, I had to leave some people\nI'ma be forever scheming, woke up, I thought I was dreaming\nWatched my lil' boy play with toys, I just dropped a tear of joy\nSome shit that I feel for\nI been going crazy with that scoring, call me Baby Harden\nThey say I'll be great, I guess I'm waiting for it\n\n[Chorus]\nYoung age, learned how to get paid (We gon' get the money)\nBig stage, long way from Section 8 (Ballin' other countries)\nBig wave, he gon' have to get saved (Big old wave)\nRidin' in the foreign, chiefin' on the forest\nI know I wasn't there for you, at least I said I'm sorry\nYou know what it was, I told you that I was heartless\nI'm emotionally scarred, that ain't even your fault\nBut don't listen to them haters tryna fill your ears with salt\nYoung age, learned how to get paid (We gon' get the money)\nBig stage, long way from Section 8 (Ballin' other countries)\nBig wave, he gon' have to get saved (Big old wave)\nRidin' in the foreign, chiefin' on the forest\nI know I wasn't there for you, at least I said I'm sorry\nYou know what it was, I told you that I was heartless\nI'm emotionally scarred, that ain't even your fault\nBut don't listen to them haters tryna fill your ears with salt\n\nDirected By: Keemotion\n\n#LilBaby #EmotionallyScarred #MyTurn\n\nMusic video by Lil Baby performing Emotionally Scarred. © 2020 Quality Control Music, LLC, under exclusive license to UMG Recordings, Inc.\n\nhttp://vevo.ly/T7fNJC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iXUPeEuM1CM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iXUPeEuM1CM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iXUPeEuM1CM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iXUPeEuM1CM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iXUPeEuM1CM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 57,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iXUPeEuM1CM"
        }
      },
      "contentDetails": {
        "videoId": "iXUPeEuM1CM",
        "videoPublishedAt": "2020-04-30T22:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gF_p2PW-xxTECblZvVtZu7seifk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FRUE2NUY1OEM3NkQwMUVE",
      "snippet": {
        "publishedAt": "2020-05-12T19:01:54Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby - Sum 2 Prove (Official Video)",
        "description": "Stream/Download \"Sum 2 Prove\": https://qualitycontrol.lnk.to/Sum2Prove\n\nFollow Lil Baby Everywhere:\nhttps://www.instagram.com/lilbaby_1/\nhttps://twitter.com/lilbaby4PF\nhttps://www.facebook.com/4pflilbaby\n\nwww.iamlilbaby.com\n\n[Verse 1]\nYou know Lil Ced, that's my nigga, I made him a millionaire, fuck it, we all rich\nI ain't tryna have babies right now, so we fuck with the rubber, but I got a raw bitch\nKnow this money bring envy, you probably wan' be me, but bro, we can't beef 'bout no small shit\nOverseas, got the crowd doin' moshpits\nCan't believe that I'm still in the 'partments\nBusinessman, went and got me an office\nMillion dollar deals, I get 'em often\nMe and Dolla was servin' on Sparks Street\nHot lil' jit, he gon' stay with the chopstick\nI got robbed, that shit made me a monster\nEviction notice, my sister, my mamas\nNow they houses as big as they want 'em\nI done ran up them motherfuckin' commas, look at lil' Dominique\nLivin' like we in a race, I might come in first or second, but I won't ever be last\nLately I been in my bag\nBro told me don't take my foot off the gas\nIf they give you a inch, go'n and take you a mile\nI'ma shoot by myself like a technical foul\nCity to city, got girls goin' wild\nBetter not reach for my chain when I jump in the crowd\nLambo' so low, gotta squat\nWe finally made it, let's pop us some bottles\nI took the lead and let everyone follow\nThey know I'm runnin' it right to the bank\nThey want me to ease up, I didn't leave 'em any breathin' room, sorry, I told 'em, \"I can't\"\nHeard you a rat, so you know what's gon' happen whenever we catch you, I run with them snakes\nPeep all the moves I been makin', by time I get forty, I gotta be one of them greats\nWatch how I move with this paper, I know if I slip up one time they gon' try to come take it\nReal as it get and these niggas be fakin', I don't want they vibes, so they hand I ain't shakin'\nShe on that '42 straight with no chaser\nI'm tryna get out of here and go taste her, yeah\n\n[Chorus]\nYeah, my diamonds be VV's (VV's)\nThey don't wan' see us on TV unless it's the news\nI got somethin' to prove (Somethin' to prove)\nYeah, I'm young, but got somethin' to lose (Somethin' to lose)\nIn the street, I done paid all my dues (Yeah)\nNo extortion, ain't talking 'bout literally (Nah)\nI be walkin' on beats, is you hearin' me? (Huh?)\nI just pray that my kids be a bigger me, they can't get rid of me\nMy diamonds be VV's (VV's)\nThey don't wan' see us on TV unless it's the news\nI got somethin' to prove (Somethin' to prove)\nYeah, I'm young, but got somethin' to lose (Somethin' to lose)\nIn the street, I done paid all my dues (Yeah)\nNo extortion, ain't talking 'bout literally (Nah)\nI be walkin' on beats, is you hearin' me? (Huh?)\nI just pray that my kids be a bigger me, they can't get rid of me\n\n[Verse 2]\nWake up every day, somebody harrassin' me\nI got rich, they need money, they askin' me\nI was sittin' in jail, they ain't look out for me\nOnes who need me them same ones who doubted me\nI been handlin' my own, they can vouch for me\nHead way down with me, know that she proud of me\nTurn the heat up, ain't nobody hot as me\nEverywhere dollars be, that's how I gotta be\nI done gave her the world, now she not leavin'\nSay she love me to death, told her, \"Stop breathin'\"\nHe try do what I do, but we not even\nI want all of the beef, I am not vegan\nBoy, you said it was smoke, nigga, stop speakin'\n'Ventador, drop the top, I can't stop speedin'\nTryna see if this bitch hit the top speed\nHit the bitch from the back, have her knock knee\nCall me Baby, ho, I control the rock\nIf the rap slow, I control the block\nYeah, I'm really it, and you niggas not\nGot a couple coupes, I can drop the top\nI done made it, nigga, all these digits comin' in\nI'm savin' for the bigger picture, know one day I'll need 'em\nMight as well get used to me\nMy biggest fear is endin' up a used-to-be, yeah\n\n[Chorus]\nYeah, my diamonds be VV's (VV's)\nThey don't wan' see us on TV unless it's the news\nI got somethin' to prove (Somethin' to prove)\nYeah, I'm young, but got somethin' to lose (Somethin' to lose)\nIn the street, I done paid all my dues (Yeah)\nNo extortion, ain't talking 'bout literally (Nah)\nI be walkin' on beats, is you hearin' me? (Huh?)\nI just pray that my kids be a bigger me, they can't get rid of me\nMy diamonds be VV's (VV's)\nThey don't wan' see us on TV unless it's the news\nI got somethin' to prove (Somethin' to prove)\nYeah, I'm young, but got somethin' to lose (Somethin' to lose)\nIn the street, I done paid all my dues (Yeah)\nNo extortion, ain't talking 'bout literally (Nah)\nI be walkin' on beats, is you hearin' me? (Huh?)\nI just pray that my kids be a bigger me, they can't get rid of me\n\n#LilBaby #Sum2Prove #MyTurn\n\nMusic video by Lil Baby performing Sum 2 Prove. © 2020 Quality Control Music, LLC, under exclusive license to UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xOjy0tL5EuA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xOjy0tL5EuA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xOjy0tL5EuA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xOjy0tL5EuA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xOjy0tL5EuA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 58,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xOjy0tL5EuA"
        }
      },
      "contentDetails": {
        "videoId": "xOjy0tL5EuA",
        "videoPublishedAt": "2020-02-18T20:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XvcQpUShdkTiimup3BOQ2jEyF0A",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44MTA2QkYxNUZFRkY5QjQ4",
      "snippet": {
        "publishedAt": "2020-05-12T19:02:11Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Luke Combs - Six Feet Apart (Lyric Video)",
        "description": "Listen to “Six Feet Apart” by Luke Combs, out now: https://LC.lnk.to/SFAAY\n\nApple Music: https://LC.lnk.to/SFAAY/applemusic\nSpotify: https://LC.lnk.to/SFAAY/spotify\nAmazon Music: https://LC.lnk.to/SFAAY/amazonmusic \niTunes: https://LC.lnk.to/SFAAY/itunes\nYouTube Music: https://LC.lnk.to/SFAAY/youtubemusic \nPandora: https://LC.lnk.to/SFAAY/pandora\n \nChorus:\nI miss my mom, I miss my dad\nI miss the road, I miss my band\nGiving hugs and shaking hands\nIt’s a mystery I suppose\nJust how long this thing goes\nBut there’ll be crowds and there’ll be shows\nAnd there will be light after dark\nSome day when we aren’t six feet apart\n \nListen to his latest single “Does To Me” by Luke Combs (ft. Eric Church), plus other tracks from the album, ‘What You See Is What You Get’, out now: https://LC.lnk.to/WYSIWYGYT  \n  \nFollow Luke Combs: \nInstagram: https://LC.lnk.to/profileYT/instagram\nFacebook: https://LC.lnk.to/profileYT/facebook\nTwitter: https://LC.lnk.to/profileYT/twitter\nTikTok: https://LC.lnk.to/profileYT/tiktok\nTwitch: https://LC.lnk.to/profileYT/twitch\nSubscribe to his channel: https://LC.lnk.to/profileYT/youtube\nWebsite/Tour Dates/Bootleggers Fan Club: https://LC.lnk.to/profileYT/officialsite \n \n#LukeCombs #SixFeetApart #Lyrics #Official",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Sayh8ZASxk8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Sayh8ZASxk8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Sayh8ZASxk8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Sayh8ZASxk8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Sayh8ZASxk8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 59,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Sayh8ZASxk8"
        }
      },
      "contentDetails": {
        "videoId": "Sayh8ZASxk8",
        "videoPublishedAt": "2020-05-01T04:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "E9dLDUolrOo3upPsibNvQ9oDPUo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4wRUY3NzJGODYyMjQzNUU0",
      "snippet": {
        "publishedAt": "2020-05-12T19:02:21Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "twenty one pilots - Level of Concern (Official Video)",
        "description": "twenty one pilots - Level of Concern (Official Video)\nofficial video for \"Level of Concern\" - available now on Fueled By Ramen.  \n \nhttps://top.lnk.to/levelofconcern\n \nExclusive Crew Nation hoodie available now - https://smarturl.it/TOPCrewNation\nA portion of proceeds from this song + the TØP Crew Nation hoodie will go to Crew Nation - Global Relief Fund For Live Music Crews.Crew Nation is powered by Music Forward Foundation, a charitable 501c3 organization, that will be administering the fund.\n\nLYRICS\nPanic on the brain, world has gone insane,\nThings are starting to get heavy.\nI can’t help but think I haven’t felt this way,\nSince I asked you to go steady.\n\nWondering,\nWould you be, my little quarantine?\nOr is this the way it ends?\n\n'Cause I told you, my level of concern,\nBut you walked by like you never heard,\nAnd you could bring down my, level of concern,\nJust need you to tell me we’re alright, tell me we’re okay.\n\nPanic on the brain, Michael’s gone insane,\nJulie starts to make me nervous,\nI don't really care what they would say\nI'm asking you to stay\nin my bunker underneath the surface.\n\nWondering,\nWould you be, my little quarantine?\nOr is this the way it ends?\n\n'Cause I told you, my level of concern,\nBut you walked by like you never heard,\nAnd you could bring down my, level of concern,\nJust need you to tell me we’re alright, tell me we’re okay.\n\nTell me we’re alright, tell me we’re okay.\nTell me we’re alright, tell me we’re okay.\nBring down my, level of concern,\nJust need you to tell me we’re alright, tell me we’re okay.\n\n'Cause I told you, my level of concern,\nBut you walked by like you never heard,\nYou could bring down my, level of concern,\nJust need you to tell me we’re alright, tell me we’re okay.\n\nI need you to tell me we’re alright, tell me we’re okay.\nNeed you to tell me we’re alright, tell me we’re okay.\nI Need you to tell me we’re alright, tell me we’re okay.\nNeed you to tell me we’re alright, tell me we’re okay.\n\nNeed you now.\nI need you now...\n\n'Cause I told you, my level of concern,\nBut you walked by like you never heard,\nYou could bring down my, level of concern,\nJust need you to tell me we’re alright, tell me we’re okay.\n\nTell me we’re alright, tell me we’re okay.\nTell me we’re alright, tell me we’re okay.\nYou could bring down my, level of concern,\nJust need you to tell me we’re alright, tell me we’re okay.\n\nIn a world, where you could just lie to me\nand I'd be okay.\nWe'll be okay.\nWe're gonna be okay.\n\nSubscribe for more official content from twenty one pilots: https://top.lnk.to/subscribe \n\nStore: https://store.twentyonepilots.com \nSite: http://smarturl.it/TOPsite\nSpotify: http://smarturl.it/TOPspotify\nFacebook: http://smarturl.it/TOPfacebook\nInstagram: http://smarturl.it/TOPinstagram\nTwitter: http://smarturl.it/TOPtwitter\nTumblr: http://smarturl.it/TOPtumblr\n\n#twentyonepilots #levelofconcern",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/loOWKm8GW6A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/loOWKm8GW6A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/loOWKm8GW6A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/loOWKm8GW6A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/loOWKm8GW6A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 60,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "loOWKm8GW6A"
        }
      },
      "contentDetails": {
        "videoId": "loOWKm8GW6A",
        "videoPublishedAt": "2020-04-09T16:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fjqWa4T48J4h__n8bOUCynos7pI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xQkI2NzVGNThBMDhCNDc0",
      "snippet": {
        "publishedAt": "2020-05-12T19:02:36Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby x 42 Dugg - We Paid (Official Video)",
        "description": "Watch the music video for Lil Baby x 42 Dugg's \"We Paid.\"\n\nStream/Download “My Turn - Deluxe” Here: https://qualitycontrol.lnk.to/MyTurnYD\n\nFollow Lil Baby Everywhere:\nInstagram: https://www.instagram.com/lilbaby_1/\nTikTok: https://www.tiktok.com/@lilbaby \nTwitter: https://twitter.com/lilbaby4PF\nFacebook: https://www.facebook.com/4pflilbaby\n\nText Lil Baby at 678-496-7757\n\n\"\"We Paid\"\" Lyrics:\n\n[Intro: 42 Dugg]\nCan't be fucked with\nAyy, 4 Pockets, huh\n(Section 8 just straight cooked this motherfucker up)\n\n[Verse 1: 42 Dugg]\n'Fore I go broke like Joc\nFuck with that dog like Vick (Roof)\nNot that rock, that pit'\nPalm Angels down to my sock\nCan't hold my Glock, reason I don't really like that shit (Nigga, I don't)\nYoung turnt nigga, can't wife no bitch (At all)\nExcuse my French, don't like no bitch (Nope)\nLimo tinted, all five of my cars, yeah, I had it hard\nSeen my bitch broke bad, I ain't had a heart\nSkrrt, yeah, that's us\nTwo-tone AP, yeah, I'm bust\nGot the head from her, I ain't even wanna fuck (Fuck her)\nWhy? Slut, bye (Fuck on)\nNothin' on me from Saks, everything Revive\nOld nigga tellin' on bro, should've died\nNo, he ain't kill 'em, dawg, he ain't even try\nStill'll bet my last shootin' dice in the hood\nTake who chain? Nah bitch, not Dugg's\nProbably in somethin' fast with a Glock in the hood\nCourtside tickets, spillin' Wock' on the wood\n\n[Chorus: 42 Dugg & Lil Baby]\nFirst turnt nigga from the hood, they curious\nFour in cars, 'bout five in jewelry\nI get the commas with numbers, that's period\nI got your BM wan' put on Amiris\nFirst young nigga in the A with two Lams\nRun up fourteen mil', started fourteen grams (Same day)\nDope boy Dickies and diamonds and Timbs\nYou shouldn't play with that boy, he is not one of them\nBro, I kept taking L's, finally got me a M\nStill making double, I don't count what I spend\nS550 2018\nGotta come twenty if you hoppin' in the Benz\nYoung turnt nigga from the D to the A\nI'm rockin' with the Lions, yeah, I'm rocking with the Braves\nYeah, yeah, yeah, yeah, yeah, we paid\nYeah, yeah, yeah, yeah, yeah, we paid\n\n[Verse 2: Lil Baby]\nI'ma turn it up a lil' more this time\nUsed to dream about gettin' it, now I got it, I don't drive\nI had a spot like a varsity, what do you have?\nYou buy twenty, I'll front what you buy\nI put on drip, I believe I can I fly\nNiggas know that I'm rich, but they know not to try\nI had a show in Detroit and I stopped at Revive\nAnd spent fifty on all the guys\nAll of these hoes in these stores make commission\nAnd plus I'ma tip 'em, they holdin' my size\nGet in your car and just put on your flashers\nAnd follow the hearse since you say you gon' ride\n'Cause somebody gon' die if they fuck with us\nTurn a five to a dime, that's a double up\nFuck around, walk through church with my double cup\nThis shit a habit, I'm prayin' I give it up\nTiger stay with the wood, make 'em give it up\nKnow I ran through a mil' every week coppin' weed\nBruh beat the charge, I can get me some sleep\nGot a backend to pick up, I won't even leave\nRun it up, fuck around, give the 'Vette to DT\nKeep a hotboy with me, I got love for BG\nChasin' this paper since twelve or thirteen\nRunnin' 'round in these streets, it was me and Marquise\n\n[Chorus: 42 Dugg & Lil Baby]\nFirst turnt nigga from the hood, they curious\nFour in cars, 'bout five in jewelry\nI get the commas with numbers, that's period\nI got your BM wan' put on Amiris\nFirst young nigga in the A with two Lams\nRun up fourteen mil', started fourteen grams (Same day)\nDope boy Dickies and diamonds and Timbs\nYou shouldn't play with that boy, he is not one of them\nBro, I kept taking L's, finally got me a M\nStill making double, I don't count what I spend\nS550 2018\nGotta come twenty if you hoppin' in the Benz\nYoung turnt nigga from the D to the A\nI'm rockin' with the Lions, yeah, I'm rocking with the Braves\nYeah, yeah, yeah, yeah, yeah, we paid\nYeah, yeah, yeah, yeah, yeah, we paid\nFirst turnt nigga from the hood, they curious\nFour in cars, 'bout five in jewelry\nI get the commas with numbers, that's period\nI got your BM wan' put on Amiris\nFirst young nigga in the A with two Lams\nRun up fourteen mil', started fourteen grams (Same day)\nDope boy Dickies and diamonds and Timbs\nYou shouldn't play with that boy, he is not one of them\nBro, I kept taking L's, finally got me a M\nStill making double, I don't count what I spend\nS550 2018\nGotta come twenty if you hoppin' in the Benz\nYoung turnt nigga from the D to the A\nI'm rockin' with the Lions, yeah, I'm rocking with the Braves\nYeah, yeah, yeah, yeah, yeah, we paid\nYeah, yeah, yeah, yeah, yeah, we paid (Yeah)\n\nDirected by: KeeMotion\n\n#LilBaby #42Dugg #WePaid\n\nMusic video by Lil Baby, 42 Dugg performing We Paid. © 2020 Quality Control Music, LLC, under exclusive license to UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GErG9femMQk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GErG9femMQk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GErG9femMQk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GErG9femMQk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GErG9femMQk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 61,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GErG9femMQk"
        }
      },
      "contentDetails": {
        "videoId": "GErG9femMQk",
        "videoPublishedAt": "2020-05-06T19:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qsv71X3AQ98wKhPWcQNg4faOZa4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BMTI0Q0Y2N0ZFREI0OTlB",
      "snippet": {
        "publishedAt": "2020-05-12T19:02:46Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "The Weeknd - In Your Eyes (Official Video)",
        "description": "Official music video by The Weeknd performing \"In Your Eyes\"– 'After Hours\" available everywhere now: http://theweeknd.co/afterhoursYD\n\n►Subscribe to The Weeknd on YouTube: http://theweeknd.co/subscribeYD \n\n►Get tickets: https://www.theweeknd.com/tour\n\n►Get exclusive merch: https://shop.theweeknd.com/\n\n►Follow The Weeknd:\nhttps://twitter.com/theweeknd \nhttps://www.facebook.com/theweeknd \nhttps://www.instagram.com/theweeknd \nhttps://www.theweeknd.com \n\nDirector: Anton Tammi\n\nStarring: Zaina Miuccia\n\nProduction Company: Somesuch\nExecutive Producer: Saskia Whinney\n\nProducer: Sarah Park\n\nDirector of Photography: Oliver Millar\n2nd Unit DP: Devin \"Daddy\" Karringten\nSteadicam Op: Nick Mueller\n\nProduction Designer: Miranda Lorenz\nCostume Designer: Alana Morshead\nSFX Makeup: Koji Ohmura\n\nMake up Artist: Fatma Bendris\nMake up Artist: Christine Nelli\n\n1st AD: Kenneth Taylor\n\nEditor: Andreas Arvidsson\nAssistant Editor: Janne Vartia\n2nd Assistant Editor: Tim Montana\nPost Production Supervisor: Alec Ernest\n\nColorist: Nicke Jacobsson\nAssistant Colorist: Sander van Wijk\nEditorial/Color Talent Mgmt: Sofia Misgena & Helene\nMisgena @ The Talent Group\n\nSound Design: Anton Ahlberg @ Red Pipe Studios\n\nVFX: Mathematic\nTitle Design: Aleksi Tammi\n\nLyrics:\n\nI just pretend that I’m in the dark\nI don’t regret cause my heart can’t take a loss\nI’d rather be so oblivious\nI’d rather be with you\nWhen it’s said, when it’s done yeah\nI don’t ever wanna know\nI can tell what you done yeah\nWhen I look at you\nin your eyes\nI see there’s something burning inside you\nOh inside you\nIn your eyes, I know it hurts to smile\nBut you try to, oh you try to\nYou always try to hide the pain\nYou always know just what to say\nI always look the other way\nI’m blind, I’m blind\nIn your eyes, you lie but I don’t let it define you\nOh define you\nI tried to find love in someone else too many times\nBut I hope you know I mean it\nWhen I tell you you’re the one that was on my mind oh\nWhen it’s said, when it’s done\nI would never let you know\nI’m ashamed of what I done\nWhen I look at you\nIn your eyes\nI see there’s something burning inside you\nOh inside you\nIn your eyes I know it hurts to smile\nBut you try to, oh you try to\nYou always try to hide the pain\nYou always know just what to say\nI always look the other way\nI’m blind, I’m blind\nIn your eyes you lie but I don’t let it define you\nOh define you\nIn your eyes\nI see there’s something burning inside you\nOh inside you\nYou always try to hide the pain\nYou always know just what to say\nI always look the other way\nI’m blind, I’m blind\nIn your eyes you lie but I don’t let it define you\nOh define you\n\n#TheWeeknd #InYourEyes #AfterHours\n\n\nMusic video by The Weeknd performing In Your Eyes. © 2020 The Weeknd XO, Inc., manufactured and marketed by Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 62,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dqRZDebPIGs"
        }
      },
      "contentDetails": {
        "videoId": "dqRZDebPIGs",
        "videoPublishedAt": "2020-03-23T16:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wp1Ffvb9SwL1HTJ2oPefeGFvQ0Y",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GODY3RDUzODU3MUI2OTE2",
      "snippet": {
        "publishedAt": "2020-03-06T00:15:31Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "POP SMOKE - DIOR (OFFICIAL VIDEO)",
        "description": "Dior - (Official Video) by Pop Smoke \nDownload here: https://PopSmoke.lnk.to/MeetTheWooYD\n \nSubscribe to Pop Smoke’s channel:\nhttps://PopSmoke.lnk.to/Subscribe \n \nFollow Pop Smoke:\nhttps://instagram.com/realpopsmoke \nhttps://facebook.com/realpopsmoke\nhttps://twitter.com/popsmoke10\nhttps://soundcloud.com/biggavelipro\n \nCredits:\nVideo Director: JLShotThat\nVideo Producer: JLShotThat\nVideo Editor: JLShotThat\n \n#PopSmoke #Dior #RealPopSmoke\n \nMusic video by Pop Smoke performing Dior. Victor Victor Worldwide;  © 2019 Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oorVWW9ywG0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 63,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oorVWW9ywG0"
        }
      },
      "contentDetails": {
        "videoId": "oorVWW9ywG0",
        "videoPublishedAt": "2019-09-03T21:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "tDFwwG50P63dPzf2iHWhx4pYBQ4",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DQTFBQ0Y0MjA5NUVGRDhC",
      "snippet": {
        "publishedAt": "2020-05-12T19:03:06Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "StaySolidRocky- Party Girl (Official Music Video)",
        "description": "Follow my instagram for more updates @staysolidrocky\nToxic and Soft Aggression Links:\nhttps://www.youtube.com/watch?v=Pf9nTwXsIiE\nhttps://www.youtube.com/watch?v=iYfYm7colx8\nShot by: 96Digital",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1KlNDZpCkHc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1KlNDZpCkHc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1KlNDZpCkHc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1KlNDZpCkHc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1KlNDZpCkHc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 64,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1KlNDZpCkHc"
        }
      },
      "contentDetails": {
        "videoId": "1KlNDZpCkHc",
        "videoPublishedAt": "2019-12-24T23:15:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Zux7m7UZfPvKOXBVGOKsaEIGPRU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5CNDBGM0VEN0QwQjk2Njk1",
      "snippet": {
        "publishedAt": "2020-05-12T19:03:15Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby - Social Distancing (Audio)",
        "description": "Listen to the official audio for Lil Baby's “Social Distancing”\n\nStream/Download “My Turn - Deluxe” Here: https://qualitycontrol.lnk.to/MyTurnYD\n\nFollow Lil Baby Everywhere:\nhttps://www.instagram.com/lilbaby_1/\nhttps://twitter.com/lilbaby4PF\nhttps://www.facebook.com/4pflilbaby\n\nText Lil Baby at 678-496-7757\n\nSocial Distancing Lyrics:\n\n[Intro]\n(Section 8 just straight cooked this motherfucker up)\n(What's happenin', Chi Chi?)\n\n[Verse 1]\nI told her to fly and she scared of the virus, I sent her a private to get here\nI made four hundred dollars off of each of these pounds, I ain't trippin', it's gon' be a good year\nSolomon drivin' while I got my hands on the chopper, I'm keepin' my eyes in the rearview\nI'm from Atlanta where they pay to triple cross niggas, they'll dap you up, then they'll kill you\nThese niggas fake and I'm real, I don't feel 'em\nMy niggas takers, ain't worried 'bout 'em stealing\nI run with apes and some baby gorillas\nI know a few (Shh), I can buy me a nigga\nSaid I wouldn't change but my change a lil' bigger\nFour-carat ring leave a scar if I hit you\nLook like a spaceship, got stars in my vehicle\nThese niggas fake and I don't wanna deal with 'em all\n\n[Chorus]\nI'm social distancing\nMan, these niggas can't touch me, I can't get sick\nGood excuse for me to pour up medicine (Syrup)\nShe say I ain't got no heart and I'm devil-sent\nI'm on some savage shit, ah\nI got the drop on the opps, switched the cars\nI got a hundred inside of a drum\nWe pull up clapping, a round of applause\nWe just gon' say that they won the award\n\n\n[Verse 2]\nSlide in the daytime, then come back at night\nWe gon' make sure that nobody play with us\nThey make me mad, I'ma turn up\nLet's talk about money, I swear I been savin' up\nI'm really sick with this shit, got 'em throwin' up\nHe hit a lick for a brick, now he goin' up\nMy niggas rapping, you see us, we blowin' up\nHit the bitch for a rack, then ignore her\nI'm so sick of these rats and these whores\nI might marry my girl and just go away\nEat her out if she rich, got expensive taste\nWe ain't got rush, told the pilot to fuckin' wait\nAin't no way I can go on no fuckin' date\nI don't know her and she don't know me\nMy lil' boy 'dem turnt up at a young age\nYou can say that it run in my genes\n\n[Chorus]\nI'm social distancing\nMan, these niggas can't touch me, I can't get sick\nGood excuse for me to pour up medicine (Syrup)\nShe say I ain't got no heart and I'm devil-sent\nI'm on some savage shit, ah\nI got the drop on the opps, switched the cars\nI got a hundred inside of a drum\nWe pull up clapping, a round of applause\nWe just gon' say that they won the award\nI'm social distancing\nMan, these niggas can't touch me, I can't get sick\nGood excuse for me to pour up medicine (Syrup)\nShe say I ain't got no heart and I'm devil-sent\nI'm on some savage shit, ah\nI got the drop on the opps, switched the cars\nI got a hundred inside of a drum\nWe pull up clapping, a round of applause\nWe just gon' say that they won the award\n\n\n[Outro]\nI'm social distancing\nMan, these niggas can't touch me, I can't get sick\n\n#LilBaby #SocialDistancing #MyTurn\n\nMusic video by Lil Baby performing Social Distancing (Audio). © 2020 Quality Control Music, LLC, under exclusive license to UMG Recordings, Inc.\n\nhttp://vevo.ly/kE2Nm2",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/laVkWgZE9pw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/laVkWgZE9pw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/laVkWgZE9pw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/laVkWgZE9pw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/laVkWgZE9pw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 65,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "laVkWgZE9pw"
        }
      },
      "contentDetails": {
        "videoId": "laVkWgZE9pw",
        "videoPublishedAt": "2020-05-01T04:00:23Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KsMzuX2UgBi3UAVdTZE8ZBHnLFk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yNkQ0OEUyMUVCRkU3MTc0",
      "snippet": {
        "publishedAt": "2020-05-12T19:03:38Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Diplo presents: Thomas Wesley - Heartless feat. Morgan Wallen (Official Music Video)",
        "description": "Diplo presents: Thomas Wesley - Heartless feat. Morgan Wallen (Official Music Video) \n\nSubscribe to Diplo YouTube Channel - http://diplo.fm/YouTube\n\nDiplo Presents Thomas Wesley Chapter 1: Snake Oil Album Out Now:\nhttps://Diplo.lnk.to/SnakeOil\n\nListen to ‘Heartless’ https://diplo.lnk.to/Heartless  \nSpotify: https://diplo.lnk.to/Heartless/Spotify \nApple Music: https://diplo.lnk.to/Heartless/AppleMusic   \n\nDirected by Brandon Dermer\nProduced by Jonas Dolkart\nDirector of Photography - Wojciech Kielar \n2nd Unit - George Nienhuis \nProduction Design - Racey North \nEdited by Splice Jones\nColored by RKM Studios\n\nFollow Diplo:\nFacebook: https://www.facebook.com/diplo \nTwitter: https://twitter.com/diplo \nInstagram: https://www.instagram.com/diplo \nSoundCloud: https://soundcloud.com/diplo \n \nFollow Morgan Wallen: \nFacebook: https://www.facebook.com/morgancwallen/ \nTwitter: https://twitter.com/morganwallen \nInstagram: https://www.instagram.com/morganwallen/ \n\nLyrics: \nHeartless heartless heartless\nSo heartless so heartless so heartless\nSay you’re going out late \nI count down till you call me \nIt’s just one of those things \nThat you do when you’re lonely \nAnd you’re all about the chase \nBut you won’t ever let me catch you \nAnd I wish I was the same \nBut I know I’m gunna let you in again and when I do \nIts gunna hurt like hell and you don’t mean to \nThat’s what I tell myself \n \nBut, why you gotta be so heartless \nI know you think it’s harmless\nYou’re tearing me apart \nAnd girl the hardest part is \nYou’re so high on attention \nTaking miles from inches \nLeave me in the darkness \nNever finish what we started \nGirl why you gotta be so heartless (so heartless)\nWhy you gotta be so heartless (so heartless) \n \nMonday night was definitely not our night \nTuesday night was just another fight \nWednesday I thought everything would change\nThursday came and it was still the same\nFriday night we went out on the town \nSaturday we should have burned it down \nSunday morning came and now you’re gone \nI should probably know this shit by now\nAh ohh \nI should probably know this shit by now \nBut no, no\n \nWhy you gotta be so heartless \nI know you think it’s harmless\nYou’re tearing me apart \nAnd girl the hardest part is \nYou’re so high on attention \nTaking miles from inches \nLeave me in the darkness \nNever finish what we started \nGirl why you gotta be so heartless (so heartless)\nWhy you gotta be so heartless (so heartless) \n \nGirl why you gotta be so in between \nLoving me and leaving, leaving \nAh ohh\nI should probably know this shit by now \nBut no, no\n\nWhy you gotta be so heartless \nI know you think it’s harmless\nYou’re tearing me apart \nAnd girl the hardest part is \nYou’re so high on attention \nTaking miles from inches \nLeave me in the darkness \nNever finish what we started \nGirl why you gotta be so heartless (so heartless)\nWhy you gotta be so heartless (so heartless) \n\n#Diplo\n#MorganWallen\n#Heartless\n#ThomasWesley",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LOQnx1HBmiI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LOQnx1HBmiI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LOQnx1HBmiI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LOQnx1HBmiI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LOQnx1HBmiI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 66,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LOQnx1HBmiI"
        }
      },
      "contentDetails": {
        "videoId": "LOQnx1HBmiI",
        "videoPublishedAt": "2019-09-05T14:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZPwHfyBpUqv6uBB8qirc6X_gvTs",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EMzNDODE0QjM5MTNBNDZE",
      "snippet": {
        "publishedAt": "2020-05-12T19:04:35Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Kenny Chesney - Here And Now (Official Music Video)",
        "description": "Kenny Chesney - Here And Now (Official Music Video) \n\nListen to Kenny's new album Here And Now: https://wmna.sh/hereandnowalbum\n\nLYRICS: \n\nI’ve seen the skyline in New York City\nFireflies in Tennessee\nSipped a little ‘shine from a paper sack\nThat’ll knock the horns off a Cadillac\nI must’ve sat on a dozen islands\nI’ve watched the sun sink into the sea\nBeen there done that got the t-shirt and hat\nBut my favorite place to be is\nHere and now\n\nNowhere else in this world tonight\nYou and me, ain’t it good to be alive\nAin’t no better place, ain’t no better time\nThan here and now\nEverybody’s waitin’, but they’re waitin’ on what\nBetter get to livin’ ’cause all we got is\nHere and now\n\nThink I fell in love for the first time\nWith the Gulf of Mexico\nThought I found a true love in Malibu, but\nThat water was a little too cold\nYeah I left a few tears in the rearview\nOne or two that were hard to forget\nWhy you think we call the present the present\n’Cause there ain’t no better gift than\nHere and now\n\nNowhere else in this world tonight\nYou and me, ain’t it good to be alive\nAin’t no better place, ain’t no better time\nThan here and now\nEverybody’s waitin’, but they’re waitin’ on what\nBetter get to livin’ ’cause all we got is\nHere and now\n\nA lot of people dreamin’ ’bout a one day\nSomedays waitin’ just around the bend\nI used to be one, wonderin’ when they’d come\nBut now I’m living in (but now I’m living in)\n(Here and now)\nYeah I’m living in the\n\nHere and now\nNowhere else in this world tonight\nYou and me, ain’t it good to be alive\nAin’t no better place, ain’t no better time\nThan here and now\nEverybody’s waitin’, but they’re waitin’ on what\nBetter get to livin’ ’cause all we got is\nHere and now\n\nCheck out the Kenny Chesney Official Music Videos Playlist!\r\nhttps://bit.ly/2HJPPy3\r\n\r\nSubscribe to Kenny’s channel for all the best and latest official music videos, official audio, albums, behind the scenes, live performances and more!\r\nhttps://bit.ly/2T5Q87k\r\n\r\nSee Kenny on the road! \r\nhttps://www.kennychesney.com/events \r\n\r\nGet your Kenny Chesney merchandise here!\r\nhttps://www.kennychesney.com/store\r\n\r\nExplore Kenny’s iconic music catalog! \r\nhttps://KennyChesney.lnk.to/discography\r\n\r\nStay in touch with Kenny!\r\nWebsite: http://www.kennychesney.com/\r\nFacebook: https://www.facebook.com/KennyChesney/\r\nTwitter: https://twitter.com/kennychesney\r\nInstagram: https://www.instagram.com/kennychesney/\r\n\r\nThe official YouTube channel of Kenny Chesney. \r\n \r\nAn eight-time Entertainer of the Year award winner, Kenny Chesney is a country music icon with 30 #1 hit songs like “There Goes My Life”, “The Good Stuff”, “How Forever Feels”, and “Get Along” as well as 16 #1 albums such as No Shoes, No Shirt, No Problems, When The Sun Goes Down, The Road and the Radio, and Songs For The Saints. His legendary catalog also includes popular duets like “I’m Alive” with Dave Matthews, “Everybody Wants to Go to Heaven” with The Wailers and the GRAMMY-nominated hits “Down The Road” with Mac McAnally, “Shiftwork” with George Strait, “You & Tequila” with Grace Potter, and “Setting the World on Fire” with P!NK. All the hits and awards aside, Kenny is renowned for his inspiring live shows attended by his legions of fans, known as No Shoes Nation, each year.\r\n  \r\n#KennyChesney #HereAndNow",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BPYrX7m5Vcs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BPYrX7m5Vcs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BPYrX7m5Vcs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BPYrX7m5Vcs/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 67,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BPYrX7m5Vcs"
        }
      },
      "contentDetails": {
        "videoId": "BPYrX7m5Vcs",
        "videoPublishedAt": "2020-03-25T15:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Y_jRxb5nfGN127NHwbXkyDv2wqM",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xQjBFMUZBNkNGQkFFMkNF",
      "snippet": {
        "publishedAt": "2020-05-12T19:04:53Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Ingrid Andress - More Hearts Than Mine (Official Music Video)",
        "description": "Ingrid Andress - More Hearts Than Mine (Official Music Video)\n\nListen to \"More Hearts Than Mine\" here: http://wmna.sh/mhtm\n\nSubscribe for more content: https://wmna.sh/ingridsubscribe\n\nLYRICS: \n\nI can’t wait to show you where I grew up\nWalk you ’round the foothills of my town\nProbably feel like you’ve been there before\nAfter hearing all the stories I’ve been telling you\nFor six months now\n\nWe’ll probably have to sleep in separate bedrooms\nPack a shirt for church because we’ll go\nI’m not trying to scare you off \nBut I just thought that we should talk a few things out\nBefore we hit the road\n\nIf I bring you home to Mama\nI guess I better warn ya\nShe falls in love a little faster than I do\nAnd my dad will check your tires\nPour you whiskey over ice\nAnd take you fishing but pretend that he don’t like you\nIf we break up, I’ll be fine\nBut you’ll be breaking more hearts than mine\n\nMy sister’s gonna ask a million questions\nSay anything she can to turn you red\nAnd when you meet my high school friends\nThey’ll buy you drinks and fill you in\nOn all the crazy nights I can’t outlive\n\nSo if I bring you home to Mama\nI guess I better warn ya\nShe falls in love a little faster than I do\nAnd my dad will check your tires\nPour you whiskey over ice\nAnd buy you dinner but pretend that he don’t like you\nIf we break up, I’ll be fine\nBut you’ll be breaking more hearts than mine\n\nIf I bring you home to Mama\nI guess I better warn ya\nShe feels every heartache I go through\nAnd if my dad sees me crying\nHe’ll pour some whiskey over ice\nAnd tell a lie and say he never really liked you\nIf we break up, I’ll be fine\nBut you’ll be breaking more hearts than mine\nYou’ll be breaking more hearts than mine\n\nWhat is an Ingrid? Learn more: http://ingridandress.com/ \n\nFollow Ingrid: \nhttps://www.instagram.com/ingridandress/\nhttps://www.facebook.com/IngridAndress/\nhttps://twitter.com/ingridandress\n\nMusic video by Ingrid Andress. ©2019 Warner Music Nashville.\n\n#IngridAndress #MoreHeartsThanMine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/j_A8Zjwr9m0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 68,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "j_A8Zjwr9m0"
        }
      },
      "contentDetails": {
        "videoId": "j_A8Zjwr9m0",
        "videoPublishedAt": "2019-04-24T16:00:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MIMMnuqHMfZGlqm0LSbxUOp3QME",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43OUYyMjk3OEQwRjlBODVG",
      "snippet": {
        "publishedAt": "2020-05-12T19:05:02Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Demi Lovato - I Love Me",
        "description": "Listen to “I Love Me”: https://DemiLovato.lnk.to/ILOVEME\nShop: https://shop.demilovato.com/ \n\nDirected by Hannah Lux Davis\nProduced by Brandon Bonfiglio\nProduction Company: London Alley\n\nConnect with Demi:\nSubscribe: https://www.youtube.com/user/therealdemilovato/?sub_confirmation=1\nInstagram http://instagram.com/ddlovato\nTwitter http://twitter.com/ddlovato\nFacebook http://facebook.com/demilovato\nOfficial site http://demilovato.com\n\nJoin her mailing list to stay up to date: \nhttp://www.demilovato.com/#mailing-list\n\nLyrics:\n\nFlipping through all of these magazines\nTelling me who I’m supposed to be\nWay too good at camouflage\nCan’t see what I am,\nI just see what I’m not\nI’m guilty ‘bout everything that I eat (every single thing)\nFeeling myself is a felony\nJedi level sabotage\nVoices in my head make up my entourage\n\nCause I’m a black belt when I’m beating up on myself\nBut I’m an expert at giving love to somebody else\nI – me and myself and\nI – don’t see eye to \nEye – me and myself and\nI – \n\nOh, why do I compare myself to everyone\nAnd I always got my finger on the self destruct\nI wonder when I love me is enough (yeah, yeah, yeah)\nI wonder when I love me is enough (yeah, yeah, yeah)\n\nWhy am I always looking for a ride or die\nCause mine’s the only heart I’m gonna have for life\nAfter all the times I went and fucked it up (all the times I went and fucked it up)\nI wonder when I love me is enough (yeah, yeah, yeah)\n\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\nI wonder when I love me is enough\nI wonder when I love me is enough\n\nHaters that live on the internet\nLive in my head, should be paying rent\nI’m way too good at listening\nAll these comments fucking up my energy\n\nCause I’m a black belt when I’m beating up on myself\nBut I’m an expert at giving love to somebody else\nI – me and myself and\nI – don’t see eye to \nEye – me and myself and\nI – \n\nOh, why do I compare myself to everyone\nAnd I always got my finger on the self destruct\nI wonder when I love me is enough (yeah, yeah, yeah)\nI wonder when I love me is enough (yeah, yeah, yeah)\n\nWhy am I always looking for a ride or die\nCause mine’s the only heart I’m gonna have for life\nAfter all the times I went and fucked it up (all the times I went and fucked it up)\nI wonder when I love me is enough (yeah, yeah, yeah)\n\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\nI wonder when I love me is enough\nI wonder when I love me is enough\n\nI’m my own worst critic\nTalk a whole lot of shit\nBut I’m a ten out of ten\nEven when I forget\nI-I-I-I (I’m a ten out of ten, don't you ever forget it)\n\nI’m my own worst critic\nTalk a whole lot of shit\nBut I’m a ten out of ten\nEven when I forget\nI-I-I-I \n\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\nI wonder when I love me is enough\nI wonder when I love me is enough\n\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\nYeah, yeah\n\n#ILoveMe #DemiLovato\n\nMusic video by Demi Lovato performing I Love Me. © 2020 Island Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/vImvzQCb0o8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/vImvzQCb0o8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/vImvzQCb0o8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/vImvzQCb0o8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/vImvzQCb0o8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 69,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "vImvzQCb0o8"
        }
      },
      "contentDetails": {
        "videoId": "vImvzQCb0o8",
        "videoPublishedAt": "2020-03-06T05:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_xi9FV8c17VwTHtdGSoa97T-LkU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zRkY0NTlGQjYwNjJDMEJB",
      "snippet": {
        "publishedAt": "2020-05-12T19:05:10Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "JP Saxe - If the World Was Ending (Official Video) ft. Julia Michaels",
        "description": "Official Music Video | JP Saxe ft. Julia Michaels – If The World Was Ending\n\nListen to If The World Was Ending\nhttps://JPSaxe.lnk.to/IfTheWorldWasEnding\n\nListen to Hold It Together\nhttps://JPSaxe.lnk.to/HoldItTogether  \n\nWatch the Hey Stupid, I Love You official video\nhttps://JPSaxe.lnk.to/HeyStupidILYVideo\n\nSubscribe to the JP Saxe YouTube Channel\nhttps://JPSaxe.lnk.to/YouTube\n\nFollow JP Saxe\nWebsite: https://www.jpsaxe.com\nInstagram: https://www.instagram.com/jpsaxe/\nFacebook: https://www.facebook.com/jpsaxe/\nTwitter: https://twitter.com/jpsaxe\n\nDirected by Jason Lester\nProduced by Laura Burhenn for Our Secret Handshake\nCinematography by Powell Robinson\n\nLyrics\nI was distracted \nand in traffic \nI didn’t feel it \nwhen the earthquake happened \n \nbut it really got me thinkin’ \nwere you out drinkin’ \nwere you in the living room \nchillin' watchin’ television \nah it’s been a year now \nthink I've figured out how \nhow to let you go and let \ncommunication die out \n\nI know you know we know you weren’t down for forever and it’s fine \nI know you know we know we weren’t meant for each other and it’s fine \n\nbut if the world was ending \nyou’d come over right \nyou’d come over and you’d stay the night \nwould you love me for the hell of it \nall our fears would be irrelevant \nif the world was ending \nyou’d come over right \nthe sky’d be falling and I’d hold you tight \nand there wouldn’t be a reason why \nwe would even have to say goodbye \nif the world was ending \nyou’d come over right \nRight? \nIf the world was ending  \nYou’d come over right \nRight? \n\nI tried to imagine \nyour reaction \ndidn’t scare me when the earthquake happened \nBut it really got me thinkin’ \nthat night we went drinkin’ \nstumbled in the house \nand didn’t make it past the kitchen \nah it’s been a year now \nthink I've figured out how \nhow to think about you \nwithout it rippin’ my heart out \n\nI know you know we know you weren’t down for forever and it’s fine \nI know you know we know we weren’t meant for each other and it’s fine \n\n#jpsaxe | #IfTheWorldWasEnding",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1jO2wSpAoxA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1jO2wSpAoxA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1jO2wSpAoxA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1jO2wSpAoxA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1jO2wSpAoxA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 70,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1jO2wSpAoxA"
        }
      },
      "contentDetails": {
        "videoId": "1jO2wSpAoxA",
        "videoPublishedAt": "2019-10-17T17:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "m4vbwyVmXOIVS3ss5lkXF0m1gTw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FNDFENTJFMDlFNEQyODU3",
      "snippet": {
        "publishedAt": "2020-05-12T19:05:20Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Sam Smith, Demi Lovato - I'm Ready",
        "description": "'I’m Ready’ out now: http://samsmith.world/ImReadyID\n \nListen to Sam Smith’s Complete Collection here: http://samsmith.world/CatalogueID\n \nDirected by Jora Frantzis\nProduced by PRETTYBIRD\nVideo Commissioner - Kevin Kloecker\nVP / Executive Producer - Candice Dragonas\nExexcutive Producer - Chris Clavadetscher\nDirector of Photography - Rob Witt\nChoreographer -  Sean Bankhead\nHead of Production - Rika Osenberg\nLine Producer - Autumn Hymes\nProduction Supervisor - Kenia Gutierrez\nSam Smith Stylist - Adam Winder\nSam Smith HMU - Sienree Du\nDemi Lovato Stylist - Siena Montesano\nDemi Lovato HMU - Paul Norton, Rokael Lizama\n\nLyrics\nIt’s a cold night in my bed in the heat of the summer\nI’ve been waiting patiently for a beautiful lover\nHe’s not a cheater\nA believer\nHe’s a warm, warm blooded achiever\nIt’s a lonely night in my bed in the heat of the summer\n\nIt’s so hard when you’re with someone\nYour heart breaks and it ain’t no fun\nBut I gotta take that risk tonight\n\nI’m ready, I’m ready, I’m ready, I’m ready\nFor someone to love me\nI’m ready, I’m ready, I’m ready, I’m ready\nFor someone to love me\nFor someone to love me\n\nIt’s a hot night in my head in the chill of the winter, no\nI’ve been looking hard for a lover disguised as a sinner, no\nNot a cheater\nA redeemer\nHe’s a cold, cold blooded defeater\nIt’s a hot night in my head in the chill of the winter, no\n\nIt’s so hard when you’re with someone\nYour heart breaks and it ain’t no fun\nBut I gotta take that risk tonight\n\nI’m ready, I’m ready, I’m ready, I’m ready\nFor someone to love me\nI’m ready, I’m ready, I’m ready, I’m ready\nFor someone to love me\nFor someone to love me\n\nIt’s a cold night in my bed in the heat of the summer\nNo, I’ve been looking hard for a lover disguised as a sinner\n\nI’m ready, I’m ready, I’m ready, I’m ready\nFor someone to love me\nI’m ready, I’m ready, I’m ready, I’m ready\nFor someone to love me\nFor someone to love me\n\nListen to Sam Smith's Complete Collection here: http://samsmith.world/CatalogueID\n\nFollow Sam Smith:\nhttp://samsmithworld.com\nhttp://facebook.com/samsmithworld\nhttp://instagram.com/samsmith\nhttp://twitter.com/samsmith\n\nConnect with Demi:\nSubscribe https://www.youtube.com/user/therealdemilovato\nInstagram http://instagram.com/ddlovato\nTwitter http://twitter.com/ddlovato\nFacebook http://facebook.com/demilovato\nOfficial site http://demilovato.com\nJoin her mailing list to stay up to date http://www.demilovato.com/#mailing-list\n \nSpecial thanks to The Trevor Project, the world’s largest suicide prevention and crisis intervention organization for LGBTQ young people, for the organization's support in the making of this video.\n\n#SamSmith #DemiLovato #ImReady\n\nMusic video by Sam Smith, Demi Lovato performing I’m Ready. © 2020 Universal Music Operations Limited\n\nhttp://vevo.ly/hrs2SX",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/glD1M418bC0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/glD1M418bC0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/glD1M418bC0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/glD1M418bC0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/glD1M418bC0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 71,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "glD1M418bC0"
        }
      },
      "contentDetails": {
        "videoId": "glD1M418bC0",
        "videoPublishedAt": "2020-04-16T23:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Ir99ol2CxwGlSXFNU9GwBrZvBnk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GRDVGMERBOEMzQ0FFMzMz",
      "snippet": {
        "publishedAt": "2020-05-12T19:38:55Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Yo Perreo Sola - Bad Bunny ( Video Oficial )",
        "description": "Yo Perreo Sola - Bad Bunny\n#YHLQMDLG\n\nDOWNLOAD YHLQMDLG: https://rimas.io/YHLQMDLG\n\nMERCH: https://YHLQMDLG.com\n\n-Click para suscribirte: http://bit.ly/badbunnypr\n\nFollow Me / Sigueme en: \n\nInstagram: https://www.instagram.com/badbunnypr/\nFacebook: https://www.facebook.com/BadBunnyOfficial/\nTwitter: https://twitter.com/sanbenito\n\nbooking@rimasmusic.com\n\n#BadBunny \n\n© 2020 Rimas Entertainment",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GtSRKwDCaZM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GtSRKwDCaZM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GtSRKwDCaZM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GtSRKwDCaZM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GtSRKwDCaZM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 72,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GtSRKwDCaZM"
        }
      },
      "contentDetails": {
        "videoId": "GtSRKwDCaZM",
        "videoPublishedAt": "2020-03-27T19:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DAp2AJT0WHuwUNHiJUy9ZYCwKjk",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45ODY0RDA1N0ZBMkE1M0E1",
      "snippet": {
        "publishedAt": "2020-05-12T19:39:16Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Regard - Ride It (Official Video)",
        "description": "🕵️🔍 Your third clue…what’s the second letter on the car’s number plate? For your final clue, head to the Secrets track on Spotify. What letter is hidden in the corner of the visual? Once you’ve found it, go to https://lnk.to/SecretsSTU and enter the password for your reward!\n\nRegard - Ride It: Out Now  https://lnk.to/DJRegardRideItyd\n\nRegard Spotify Playlist\nhttps://open.spotify.com/playlist/5AOBM6DGWZDVAe0ZnqqGCk?si=niFVrY6lSBSvUB9KrAGE8g\n \n\nFollow Regard\nhttps://www.instagram.com/djregardofficial\nhttps://www.facebook.com/DjRegardOfficial\nhttps://twitter.com/DardanRegard\nhttps://www.tiktok.com/@djregard\nhttps://open.spotify.com/artist/4ofCBoyEiGSePFAG500xev?si=8AicYeD5R2ydd6Lp-nrIFQ\n\n\nMusic video by DJ Regard performing Ride It (Official Audio). \n(C) 2019 Ministry of Sound Recordings\n\n\nRegard Management\nwww.leafmanagement.net\nleaf.management1@gmail.com\n\n#Regard #RideIt",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ucVUEmjKsko/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ucVUEmjKsko/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ucVUEmjKsko/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ucVUEmjKsko/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ucVUEmjKsko/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 73,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ucVUEmjKsko"
        }
      },
      "contentDetails": {
        "videoId": "ucVUEmjKsko",
        "videoPublishedAt": "2019-10-04T08:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "mNguVInI18_T1Os4SD__JMVLGlQ",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44Njg1MDU3QjI0RTQyRjdD",
      "snippet": {
        "publishedAt": "2020-05-12T19:39:31Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "H.E.R. - Slide (Official Video) ft. YG",
        "description": "“Slide” feat. YG Out Now! https://smarturl.it/zSlide\n\nFollow H.E.R.\nhttps://www.facebook.com/officialHERmusic/\nhttps://twitter.com/HERMusicx\nhttps://www.instagram.com/hermusicofficial \n\nFollow YG: \nhttps://www.instagram.com/yg/\nhttps://twitter.com/YG \nhttps://www.facebook.com/Yg400/\n\n#HER #Slide #YG",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SUJloylmEZM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 74,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SUJloylmEZM"
        }
      },
      "contentDetails": {
        "videoId": "SUJloylmEZM",
        "videoPublishedAt": "2019-10-17T18:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7PjeAt7filLkzF100rGVViQKpAU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45OTQ4OEMyNDg3RDJDMjZE",
      "snippet": {
        "publishedAt": "2020-05-12T19:39:47Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Miranda Lambert - Bluebird (Official Video)",
        "description": "Listen to Miranda Lambert’s album ‘Wildcard', featuring “Bluebird”, out now: https://Miranda.lnk.to/WildcardAY   \n\nApple Music: https://Miranda.lnk.to/WildcardAY/applemusic \nSpotify: https://Miranda.lnk.to/WildcardAY/spotify \nAmazon: https://Miranda.lnk.to/WildcardAY/amazonmusic \nYouTube Music: https://Miranda.lnk.to/WildcardAY/youtubemusic \nYouTube: https://Miranda.lnk.to/WildcardAY/youtube \nPandora: https://Miranda.lnk.to/WildcardAY/pandora \n\nSign up to receive email updates from Miranda Lambert: http://2ml.us/yt-updates\nSubscribe to Miranda Lambert’s Channel: https://Miranda.lnk.to/profileAY/youtube \nSee Miranda Lambert on Tour: http://2ml.us/yt-tour\n \nFollow Miranda:\nFacebook: https://Miranda.lnk.to/profileAY/facebook \nInstagram: https://Miranda.lnk.to/profileAY/instagram \nTwitter: https://Miranda.lnk.to/profileAY/twitter \nTikTok: https://Miranda.lnk.to/profileAY/tik-tok \nVisit Website: https://Miranda.lnk.to/profileAY/officialsite \n \n#MirandaLambert #Bluebird #OfficialVideo #Wildcard",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nUB8ogvze_8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nUB8ogvze_8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nUB8ogvze_8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nUB8ogvze_8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nUB8ogvze_8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 75,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nUB8ogvze_8"
        }
      },
      "contentDetails": {
        "videoId": "nUB8ogvze_8",
        "videoPublishedAt": "2020-03-20T16:15:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ISQ0cEaiestz-WJ_v28B6Sz_p7c",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4xNjcxNzY5NzMzMUJFQ0Q4",
      "snippet": {
        "publishedAt": "2020-05-12T19:40:10Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "JACKBOYS & Travis Scott feat. Young Thug - OUT WEST (Official Music Video)",
        "description": "JACKBOYS OUT NOW: https://JACKBOYS.lnk.to/JACKBOYS\nOFFICIAL STORE: https://JACKBOYS.travisscott.com/\n\nDirected by CACTUS JACK & WHITE TRASH TYLER \n\nhttps://instagram.com/travisscott\nhttps://instagram.com/sheckwes\nhttps://instagram.com/dontoliver\nhttps://instagram.com/ogchaseb\nhttps://instagram.com/cactusjack\nhttps://travisscott.com\n\n(C) 2020 Epic Records. With Cactus Jack.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/qAlF70MdfwU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/qAlF70MdfwU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/qAlF70MdfwU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/qAlF70MdfwU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/qAlF70MdfwU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 76,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "qAlF70MdfwU"
        }
      },
      "contentDetails": {
        "videoId": "qAlF70MdfwU",
        "videoPublishedAt": "2020-03-20T23:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DWOlQKNhjBcTA59YGww1z51dWBo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS41OEY2MTgxM0Y5NDkxRUY2",
      "snippet": {
        "publishedAt": "2020-05-12T19:40:26Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Brett Young - Catch",
        "description": "Music video by Brett Young performing Catch. © 2019 Big Machine Label Group, LLC\n\nhttp://vevo.ly/1R1wbv",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SBqPLI0Oskc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 77,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SBqPLI0Oskc"
        }
      },
      "contentDetails": {
        "videoId": "SBqPLI0Oskc",
        "videoPublishedAt": "2019-06-04T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2UwOKQOawymKL91Ve29ElUkUMlI",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45NEUzRkY0MTgzMjIwMTNB",
      "snippet": {
        "publishedAt": "2020-05-12T19:48:38Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Eminem - Godzilla ft. Juice WRLD (Dir. by @_ColeBennett_)",
        "description": "In Loving Memory of Jarad \"Juice WRLD\" Higgins\n\nLyrical Lemonade Presents:\n\nEminem - Godzilla ft. Juice WRLD (Official Music Video)\n\nDirector, Writer, Editor - Cole Bennett\nVFX - Scissor Films\nVFX Supervisor - Sam Malko\nVFX Producer - Joe Grayem\nDirector of Photography - Taylor Randall\nSteadicam - Renard Cheren\nExecutive Producer - Paul Rosenberg\nExecutive Producer - Salvatore Tarantino\nProducer - Kathy Angstadt \nProducer - Jay Tauzin\nLine Producer - Krista Worby\nGaffer: Ronnie Gotch & 7th Light Entertainment\nProduction Designer - Cody Fusina\nArt Director - Rashi Jain\nProduction Manager - Henri Coleman\nKey Wardrobe - Dawn Boonyachlito & Angela McBride\nKey Groomer - Michelle Willis \nBackground Wardrobe - Rasheeda Ameera\nBackground Casting - Mill Ticket Entertainment\nAssistant Director - Bashir Taylor\nAssistant Director - Kelo Thompson\nProduct Graphic Design - George Hammond & Jake Brode\nSupervising Producer - Jake Wilson\nSupervising Producer - Bernard \"Buru\" Niyonzima\n\nSpecial Guest Appearances from Mike Tyson & Dr Dre\n\n\n--\n\nOfficial Channel of Lyrical Lemonade \n\nSubscribe for updates on music videos, interviews, performance videos, etc.\n\nLyrical Lemonade's Hot 25 Spotify Playlist:\nhttps://open.spotify.com/user/gh3vdz775oy18ah1wp9ucxsj5/playlist/5UuPeWDR2I8a8pORvW9vmr\n\nLyrical Lemonade Socials:\n\nhttp://www.twitter.com/lyricalemonade\nhttp://www.instagram.com/lyricalemonade\nhttp://www.facebook.com/lyricalemonade\nhttp://www.lyricallemonade.com\n\n\nCole Bennett Socials:\n\nhttp://www.twitter.com/_colebennett_\nhttp://www.instagram.com/_colebennett_\n\nLENNY ~ our hidden character representing happiness & good energy\nhttp://instagram.com/lenny",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/r_0JjYUe5jo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/r_0JjYUe5jo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/r_0JjYUe5jo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/r_0JjYUe5jo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/r_0JjYUe5jo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 78,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "r_0JjYUe5jo"
        }
      },
      "contentDetails": {
        "videoId": "r_0JjYUe5jo",
        "videoPublishedAt": "2020-03-09T19:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "JctjVVJ84EZJM1tnLtcX8y-Vheo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BRDg0REVEQjA2QTMzQzky",
      "snippet": {
        "publishedAt": "2020-05-12T19:49:04Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Don Toliver - After Party [Official Music Video]",
        "description": "Don Toliver - After Party\nStream/Download the new album 'Heaven or Hell': https://DonToliver.lnk.to/HeavenOrHellID \nOfficial Store: https://shop.dontolivermusic.com/\n\nFollow Don Toliver\nhttps://www.instagram.com/dontoliver\nhttps://twitter.com/dontoliver\nhttps://soundcloud.com/dontoliver\nhttps://www.facebook.com/DonToliver/\n\n#DonToliver #AfterParty #HeavenOrHell",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4IahvCIqeOc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4IahvCIqeOc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4IahvCIqeOc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4IahvCIqeOc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4IahvCIqeOc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 79,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4IahvCIqeOc"
        }
      },
      "contentDetails": {
        "videoId": "4IahvCIqeOc",
        "videoPublishedAt": "2020-03-18T19:01:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Hp1ibZNE1nymKFOuiQV-N5WzZXY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43NUVCRUMxQjU0MkM5QjI2",
      "snippet": {
        "publishedAt": "2020-05-12T19:49:20Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Scotty McCreery - In Between (Official Music Video)",
        "description": "Watch the official music video for \"In Between\" by Scotty McCreery\nListen to Scotty McCreery: https://ScottyMcCreery.lnk.to/listenYD\n\nSubscribe to the official Scotty McCreery YouTube channel: https://ScottyMcCreery.lnk.to/subscribeYD\n\nWatch more Scotty McCreery videos: https://ScottyMcCreery.lnk.to/listenYC/youtube\n\nFollow Scotty McCreery:\nFacebook: https://ScottyMcCreery.lnk.to/followFI\nInstagram: https://ScottyMcCreery.lnk.to/followII\nTwitter: https://ScottyMcCreery.lnk.to/followTI\nWebsite: https://ScottyMcCreery.lnk.to/followWI\nSpotify: https://ScottyMcCreery.lnk.to/followSI\nYouTube: https://ScottyMcCreery.lnk.to/subscribeYD\n\nChorus:\nI'm in between\nFriday night wild\nAnd quiet Sunday morning\nBetween\nDone after one\nAnd keep on pouring\nAin't too high\nAin't too low\nJust holding down the middle\nI'm steady as I go\nI ain't all holy water\nAnd I ain't all Jim Beam\nI'm somewhere in between\n\n#ScottyMcCreery #InBetween #OfficialMusicVideo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/d-n1Cjlsws8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/d-n1Cjlsws8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/d-n1Cjlsws8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/d-n1Cjlsws8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/d-n1Cjlsws8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 80,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "d-n1Cjlsws8"
        }
      },
      "contentDetails": {
        "videoId": "d-n1Cjlsws8",
        "videoPublishedAt": "2019-06-20T07:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sRBaNWzyCqkVL_VodqhCbmveZk0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5DNzlCN0E4RTY3NDM3MzdF",
      "snippet": {
        "publishedAt": "2020-05-12T19:49:45Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Luke Bryan - One Margarita (Official Music Video)",
        "description": "The official music video for Luke Bryan’s One Margarita.\n \nSubscribe to this channel: https://umgn.us/LukeBryanSubscribe\nWatch more official videos from Luke Bryan: https://umgn.us/LukeBryanVideos\nSign up to receive email updates from Luke Bryan: https://umgn.us/lukebryanupdates \nListen to Luke Bryan’s latest music: https://strm.to/LukeBryanMusic\n \n******************************************\nWebsite: http://www.lukebryan.com/\nFacebook: https://www.facebook.com/lukebryan\nInstagram: https://www.instagram.com/lukebryan\nTwitter: https://twitter.com/LukeBryanOnline\n \n******************************************\n#LukeBryan #OneMargarita #CountryMusic\n\nMusic video by Luke Bryan performing One Margarita. © 2020 Row Crop Records, LLC, under exclusive license to UMG Recordings, Inc.\n\nhttp://vevo.ly/tLvwvC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YEq-cvq_cK4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YEq-cvq_cK4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YEq-cvq_cK4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YEq-cvq_cK4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YEq-cvq_cK4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 81,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YEq-cvq_cK4"
        }
      },
      "contentDetails": {
        "videoId": "YEq-cvq_cK4",
        "videoPublishedAt": "2020-03-13T04:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7oxF6i8abxRMRjmMjvFs-eeqGG8",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FN0Y4Q0RBOTE2RTQ2MTk0",
      "snippet": {
        "publishedAt": "2020-05-12T19:50:00Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby & 42 Dugg - Grace (Official Video)",
        "description": "Stream/Download Lil Baby’s New Album “My Turn”: https://qualitycontrol.lnk.to/MyTurnYD\n\nFollow Lil Baby Everywhere:\nhttps://www.instagram.com/lilbaby_1/\nhttps://twitter.com/lilbaby4PF\nhttps://www.facebook.com/4pflilbaby\n\nwww.iamlilbaby.com\n\n[Verse 1: 42 Dugg & Lil Baby]\nGot a lotta new flames need 'em blue\nThree hundred fifty thou', times that by two\nNew down the roof, I still the sky\nPeace to my grandma, I still see my guys\nHurtin' this bad must feel like dyin'\nHeard a thou' seven hundred, what you gon' bet now?\nYeah, you used to twerk bitch, a vet now\nLuke, get up, doggy, I need you\nOnly nigga made sure that I was eatin'\nFree Nef still, nigga, RIP Reese\nGet her nails done, still charge for the feature\nBaby, we ain't that, nah, we ain't this\nAll that fuckin', I don't do no kiss\nBitch ain't shit, word to my niggas\nAll in my mansions (Yeah)\nBitch really wanna get higher\nTell the lil' hoes I'm Bryson\nI done hit more shit than Mike Tyson\nGet popped, nigga, I ain't doin' no fight\nSendin' my cash, I ain't doin' no right\nCar too fast, can't stop at no light\nI hit the gas, skrrt and I pull off\nI'm on they ass, I just took a year off\nShe shakin' her ass, call me when she get off\nTook half a mil' for my lil' bro to get out\nThat new Richard Mille made me feel like a boss\nFeel like I'm Meech when I'm runnin' these cars\nWho you know? Pull up, whole entourage in a foreign\nI got designer for days but it's somethin' about 'em\nGo crazy for white Air Force One, maybe 'cause I'm a dope boy\nHe be live but he ain't makin' no noise\n'Ventador on the ground like a skateboard\nIf I want it, I get it, I pay for it\nI pay extra, I ain't tryna wait for it\nEverything that I got, it was made for me\nI was servin' them trap houses faithfully\nEverybody with me gotta eat\nSay you grace with me\n\n[Chorus: Lil Baby]\nThou shall not try one of us, if they do I'ma bust\nPlease don't reach for no chain\nNot 'bout the set, but it's more 'bout respect\nIf they get me upset, they gon' die, that's on gang\nRan up my check, when I walk in the bank\nThey greet me at the door by my government name\nI made a promise, I'm never gon' change\nRolls Royce umbrella, I'm hopin' it rain, yeah\n\n[Verse 2: Lil Baby]\nRight back on it, designer my garments\nCorner store mornings, there until the sun down\nI don't trust no one, I can't put my gun down\nGoin' number one now, how this sound?\nHands down, bands out, pants down, yeah, I'm thuggin'\nI done got rich, everybody my cousin\nHe ain't servin' no packs with me, he ain't my brother\nEl Chapo go through shit, I call her \"\"The Cutter\"\"\nI just bought a new whip, I went bought another\nMy mother, she happy now\nAin't no cap and gown, but I graduated\nHer house paid for, and that new Mercedes\nKnow you that they been tryna be me lately\nI'm a heavy hitter like Gervonta Davis\nThat shit ain't gon' save 'em, leave 'em on the pavement\nAll I know is get this motherfuckin' paper\n\n[Chorus: Lil Baby]\nThou shall not try one of us, if they do I'ma bust\nPlease don't reach for no chain\nNot 'bout the set, but it's more 'bout respect\nIf they get me upset, they gon' die, that's on gang\nRan up my check, when I walk in the bank\nThey greet me at the door by my government name (Hello?)\nI made a promise, I'm never gon' change\nRolls Royce umbrella, I'm hopin' it rain, yeah\n\n[Verse 3: 42 Dugg]\nBitches ain't shit, doggybone, I get it\nFell in love twice, had me in my feelings\nThree months, dropped damn near a half a million\nNigga, fuck a house, I damn near lost a building\nFucked nigga's hoes, so he say he wanna kill me\nI miss Terri, she was different\nI miss Nef, rest in peace to my nigga\nDamn near wasn't there when they told me they killed you\nTry and rat? Nigga, fuck on\nThirteen thou' VVS, Buffs on\nStill a flooded nigga, time worth a truckload\nGet to hatin', I'm out, I don't trust hoes\nIf the feds in the house, a nigga told on me\nI pray to God my soul to keep\nG5, just be as murder\nGotta get picked up, doggy I'm hurt\nStill paid the lawyer even though I'm nervous\n\n[Chorus: Lil Baby]\nThou shall not try one of us, if they do I'ma bust\nPlease don't reach for no chain\nNot 'bout the set, but it's more 'bout respect\nIf they get me upset, they gon' die, that's on gang\nRan up my check, when I walk in the bank\nThey greet me at the door by my government name\nI made a promise, I'm never gon' change\nRolls Royce umbrella, I'm hopin' it rain, yeah\n\n#LilBaby #Grace #MyTurn \n\nMusic video by Lil Baby, 42 Dugg performing Grace. © 2020 Quality Control Music, LLC, under exclusive license to UMG Recordings, Inc.\n\nhttp://vevo.ly/O7MR6e",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3npC_24Iq9s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3npC_24Iq9s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3npC_24Iq9s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3npC_24Iq9s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3npC_24Iq9s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 82,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3npC_24Iq9s"
        }
      },
      "contentDetails": {
        "videoId": "3npC_24Iq9s",
        "videoPublishedAt": "2020-03-13T19:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "INagXchGhVLoFnag5CPsPeDm8Xw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45MDJBMDhCRTlGMzlBQTA0",
      "snippet": {
        "publishedAt": "2020-05-12T19:50:41Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Keith Urban - God Whispered Your Name (Official Music Video)",
        "description": "The official music video for Keith Urban’s “God Whispered Your Name” - available everywhere: https://strm.to/KUGWYN \n\nSubscribe to this channel: https://umgn.us/KeithUrbanSubscribe\nWatch more official videos from Keith Urban: https://umgn.us/KeithUrbanVideos\nSign up to receive email updates from Keith Urban: https://umgn.us/keithurbanupdates \nListen to Keith Urban’s latest music: https://strm.to/KeithUrbanMusic\n\n******************************************\nWebsite: http://keithurban.net/\nFacebook: https://www.facebook.com/keithurban\nInstagram: http://instagram.com/KeithUrban\nTwitter: https://twitter.com/keithurban\n\n******************************************\n#KeithUrban #GodWhisperedYourName #CountryMusic\n\nMusic video by Keith Urban performing God Whispered Your Name. © 2020 Hit Red Records, under exclusive license to UMG Recordings, Inc.\n\nhttp://vevo.ly/O1HRbD",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yyn7_u-sha8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yyn7_u-sha8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yyn7_u-sha8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yyn7_u-sha8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yyn7_u-sha8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 83,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yyn7_u-sha8"
        }
      },
      "contentDetails": {
        "videoId": "yyn7_u-sha8",
        "videoPublishedAt": "2020-04-02T16:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3YOqKuCknHd7puYCNEjoxnX0b48",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS44MzFGMTU1MDYzMEY5MkQ3",
      "snippet": {
        "publishedAt": "2020-05-12T19:51:49Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jordan Davis - Slow Dance In A Parking Lot",
        "description": "The official video for Jordan Davis' Slow Dance In A Parking Lot. \n\nSubscribe to this channel: Watch more official videos from Jordan Davis: https://umgn.us/JordanDavisSubscribe \nWatch more official videos from Jordan Davis: https://umgn.us/JordanDavisVideos\nSign up to receive email updates from Jordan Davis: https://umgn.us/JordanDavisUpdates \nListen to Jordan Davis’s latest music: https://strm.to/JordanDavisMusic\n\n******************************************\nWebsite: https://www.jordandavisofficial.com/\nFacebook: https://www.facebook.com/jordandavisofficial/\nInstagram: https://www.instagram.com/jordandavisofficial/\nTwitter: https://twitter.com/JordanCWDavis \n\n******************************************\n#JordanDavis #SlowDanceInAParkingLot #CountryMusic\n\nMusic video by Jordan Davis performing Slow Dance In A Parking Lot. © 2019 UMG Recordings, Inc.\n\nhttp://vevo.ly/em6g3C",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0D3V4s4zzxc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 84,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0D3V4s4zzxc"
        }
      },
      "contentDetails": {
        "videoId": "0D3V4s4zzxc",
        "videoPublishedAt": "2019-07-15T13:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cLM4iqk2lkWlR0Ibgm-NFfAC7uo",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40MDU2NzhGOTAyMzU1RkRB",
      "snippet": {
        "publishedAt": "2020-05-12T19:52:05Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jake Owen - Homemade (Official Music Video)",
        "description": "Based on true events. Watch Jake Owen's newest music video for \"Homemade\" \n\nLyrics:\n\nWhere I grew up getting dressed up means\nA button down shirt and a good pair of jeans\nWasn’t Sunday supper without collard greens\nDad was boss, Christ is king\nFriday night was living for them lights to come on\nThen it turned to Miller Lites when I turned 21\nThere’s some things about me that I can’t change\nI’ll always be the man that home made\n\nHome made me a love a dirt road\nHome made me crave some ice cold\nHomemade sweet tea only mama knows how to make, homemade\nHome made me love a small town\nHome made me wanna settle down\nIn a home made for the two of us\nEverything I love is Homemade\n\nMy pickup lines didn’t seem to work\nGuess my pickup truck musta got to her\nWindows down singing every word\nTo that George Strait mixtape that was homemade\n\nHome made me a love a dirt road\nHome made me crave some ice cold\nHomemade sweet tea only mama knows how to make, homemade\nHome made me love a small town\nHome made me wanna settle down\nIn a home made for the two of us\nEverything I love is Homemade\n\nHey what we got you can’t get from a store\nHey the good stuff comes from the good lord\nHomemade\n\nHome made me a love a dirt road\nHome made me crave some ice cold\nHomemade sweet tea only mama knows how to make, homemade\nHome made me love a small town\nHome made me wanna settle down\nIn a home made for the two of us\nEverything I love is Homemade\n\nHomemade, homemade, homemade\nHomemade, homemade, yeah it’s homemade\nHomemade, homemade, homemade\n\n---\n\nListen to \"Homemade\" here: https://JakeOwen.lnk.to/GreetingsFromJake\nGet updates from Jake Owen here: https://www.jakeowen.net/mailing-list\nTo see all upcoming tour dates, visit: https://www.jakeowen.net/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/NiFCN66k7Cs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/NiFCN66k7Cs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/NiFCN66k7Cs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/NiFCN66k7Cs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/NiFCN66k7Cs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 85,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "NiFCN66k7Cs"
        }
      },
      "contentDetails": {
        "videoId": "NiFCN66k7Cs",
        "videoPublishedAt": "2019-09-27T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "v8378bGlYY-tIiC09maOd-Ya5MY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5ERkRCN0UxMDI4N0JCMzFE",
      "snippet": {
        "publishedAt": "2020-05-12T19:52:26Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Halsey - You should be sad",
        "description": "Halsey’s new album ‘Manic’ out now! https://halsey.lnk.to/manicthealbumID\niTunes: https://halsey.lnk.to/manicthealbumID/iTunes\nSpotify: https://halsey.lnk.to/manicthealbumID/spotify \nApple Music: https://halsey.lnk.to/manicthealbumID/applemusic\nAmazon: https://halsey.lnk.to/manicthealbumID/amazon\nGoogle Play: https://halsey.lnk.to/manicthealbumID/google-play\n\nGet tickets to #ManicWorldTour! Each ticket purchase comes with a physical copy of ‘Manic’.\nhttps://halsey.lnk.to/MANICWorldTourID\n\nFollow Halsey –\nTwitter: http://twitter.com/halsey \nFacebook: https://www.facebook.com/HalseyMusic \nInstagram: http://instagram.com/iamhalsey\nSpotify: https://halsey.lnk.to/InMyHeadID\nOfficial Site: http://iamhalsey.com\n\n#halsey #manic #youshouldbesad\n\nMusic video by Halsey performing You should be sad. © 2020 Capitol Records, LLC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8nBFqZppIF0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 86,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8nBFqZppIF0"
        }
      },
      "contentDetails": {
        "videoId": "8nBFqZppIF0",
        "videoPublishedAt": "2020-01-10T05:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "whiOE53eUleEZqptuqK5L_W6x5U",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS41Qzc2Qzk0NzY4Njk4MTg1",
      "snippet": {
        "publishedAt": "2020-05-12T19:52:42Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Maddie & Tae - Die From A Broken Heart (Official Music Video)",
        "description": "The official Music Video for Maddie & Tae’s Mama Can You Die From A Broken Heart.\n\nSubscribe to this channel: https://umgn.us/MaddieAndTaeSubscribe  \nWatch more official videos from Maddie & Tae: https://umgn.us/MaddieandTaeVideos\nSign up to receive email updates from Maddie & Tae: https://umgn.us/MaddieAndTaeUpdates\nListen to Maddie & Tae’s latest music: https://strm.to/MNTMusic\n\n******************************************\nWebsite:http://www.maddieandtae.com\nFacebook: https://www.facebook.com/maddieandtae \nInstagram: http://instagram.com/maddieandtae\nTwitter: https://twitter.com/MaddieandTae \n \n******************************************\n#Maddie&Tae #MamaCanYouDieFromABrokenHeart #CountryMusic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Xbaoi-lifOM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Xbaoi-lifOM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Xbaoi-lifOM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Xbaoi-lifOM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Xbaoi-lifOM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 87,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Xbaoi-lifOM"
        }
      },
      "contentDetails": {
        "videoId": "Xbaoi-lifOM",
        "videoPublishedAt": "2019-08-08T19:58:44Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "q9rlEw-3aqmQDsQUN-PbLXl81L0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4zNTQyNDRERENEMDhGODIz",
      "snippet": {
        "publishedAt": "2020-05-12T19:53:23Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Lil Baby Feat. Gunna - Heatin Up (Official Video)",
        "description": "Stream/Download Lil Baby’s New Album “My Turn”: https://qualitycontrol.lnk.to/MyTurnYD\n\nFollow Lil Baby Everywhere:\nhttps://www.instagram.com/lilbaby_1/\nhttps://twitter.com/lilbaby4PF\nhttps://www.facebook.com/4pflilbaby\n\nwww.iamlilbaby.com\n\n[Intro]\n(Cook that shit up, Quay)\n4PF look like we hit licks how we sell bricks\nWe don't sell shit, we just make hits, yeah\nTurn up\n\n[Verse 1: Lil Baby]\nKeepin' my composure, never sober\nNever chokin', always smokin doja\nFuck 'em if they gettin' over\nGot a Moncler coat because the kid the coldest\nI ain't changed, I stayed the same and maintained\nIt's safe to say the kid gettin' older\nForever gang, I'm never switchin' over\nMade a lane and niggas can't get over\nI can't match with rappers, they be bogus\nReally get a pack and keep the over\nBig dripper, stand up in the ocean\nEverybody trappin', we get loads in\nHe ain't 4PF if he ain't got motion\nMade a half a ticket off promotion\nShout out Swishers Sweet, they keep me rollin'\nBut if we catch the opp, we gotta smoke him\nRidin' 'round with Dracs like we OVO\nI got some racks and I want some more\nStill got them passin' the hood, call it give-and-go\nKeep a nigga main bitch in a figure-four\nLet me fuck when I want, I just come and go\nMan, these racks gettin' too big for these skinny clothes\nI might put me an M in some big Girbaud\nLet lil' bro hit the stick, had start gettin' old\nI spent five hundred racks on a Lambo'\nAnd didn't even know how to make that motherfucker go\nOn my birthday, I just wanna lift the door\nBarely flex, but don't play with me, period\nShooters follow behind in a Urus\nIn the Rolls truck, I feel like a tourist\nI'm the one from the bottom who sold all my partners them pounds\nUsed to drive in a Buick\n\n[Chorus: Lil Baby & Gunna]\nHot, hot, hot, I'm heatin' up\nI fuck with slimes and I'm gonna bust (Bah, bah)\nHe can't put on that drip, he ain't one of us\nHow you ridin' in a Benz and a Tonka truck?\nHow you got everybody lit, pipin' up?\nOh, she bad with no swag, I can pipe her up\nMade my last one my last one, I'm wifin' her\nCount the money up fast like I'm typin' somethin'\nI'm the type to get active and never run (Wunna)\n\n[Verse 2: Gunna]\nKeep the Rugers, my niggas ain't scared of nothin' (Nah)\nAnd ain't no rules, you got racks, you can get it done (Yeah)\nOn a light day, I keep me a honey bun (One hundred)\nMakin' hit after hit, call me Barry Bonds (Hits)\nFor this Christmas, I bought everybody guns (Swear)\nBustin' choppers and FN's for everyone (Grrat)\nTake that roof off the car, let her feel the sun (Wow)\nMy bro go see his bop-bop five times a month (Yeah)\nGot this bitch out the college, she suckin' and swallow (Uh)\nI stick it in, she feel it in her gut (in her gut)\nWe don't run from our problems, we stackin' up guala and guala I'm tryna get that mega bucks (Racks)\nWe them drippers, lil' nigga, best watch your step (Them drippers)\nThis top shelf, got forty designer belts (Drip)\n4PF look like the new BMF\nThink I'm deaf, got stones in my right and left (Ice)\nHow you crank up the car? Ain't no key in there\nJust pull up, spin they block, and get out of there (Get out of there)\nWake up, have a hard time findin' what to wear\nTreat these hoes like a tire, I keep a spare\nWant a strap because I'm war ready (War)\nCheck the trust account, it's more fetti (Yeah)\nSkydweller, Jubilee, and a Presi' (No cap)\nHundred-fifty plain Richard Millie (No cap)\nI'ma milk the game until it's empty\nLil cuzzo spit that flame until it's empty (Yeah)\nI am not a killer, but don't tempt me (Nah)\nSpendin' rate 'bout thousand to a fifty\n\n[Chorus: Lil Baby]\nHot, hot, hot, I'm heatin' up\nI fuck with slimes and I'm gonna bust (Bah, bah)\nHe can't put on that drip, he ain't one of us\nHow you ridin' in a Benz and a Tonka truck?\nHow you got everybody lit, pipin' up?\nOh, she bad with no swag, I can pipe her up\nMade my last one my last one, I'm wifin' her\nCount the money up fast like I'm typin' somethin'\nI'm the type to get active and never run\n\n#LilBaby #HeatinUp #MyTurn #Gunna\n\nMusic video by Lil Baby, Gunna performing Heatin Up. © 2020 Quality Control Music, LLC, under exclusive license to UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Dpsk-Evr8GM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Dpsk-Evr8GM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Dpsk-Evr8GM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Dpsk-Evr8GM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Dpsk-Evr8GM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 88,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Dpsk-Evr8GM"
        }
      },
      "contentDetails": {
        "videoId": "Dpsk-Evr8GM",
        "videoPublishedAt": "2020-02-28T20:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KWOacNPIBWPupIAAgcCyWf80-ac",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS4yMEE5NzEwNzQ3OTc4OTND",
      "snippet": {
        "publishedAt": "2020-01-14T21:33:59Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Jimmie Allen - Make Me Want To (Official Music Video)",
        "description": "\"MAKE ME WANT TO\" the second single from my debut album MERCURY LANE is out now!!! https://jimmieallen.lnk.to/mercurylane\n\nDirector - Justin Key\nAssistant Director - Jimmie Allen\nWardrobe - Cherie Kilchrist\nGlam - Sharla Pruitt Higgins\nCo-Star - Sydney Chiyoko\n\nSubscribe to Jimmie's Channel:  https://jimmieallen.lnk.to/ytchnlsubscribe\n\nConnect with Jimmie:\nhttps://www.jimmieallenmusic.com/\nhttps://www.facebook.com/jimmieallenmusic\nhttps://www.instagram.com/jimmieallen/\nhttps://twitter.com/jimmieallen/\n\n\n#MakeMeWantTo #MercuryLane #JimmieAllen",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OVdemLamwHs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 89,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OVdemLamwHs"
        }
      },
      "contentDetails": {
        "videoId": "OVdemLamwHs",
        "videoPublishedAt": "2019-05-23T15:03:57Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "L-BcskXbu-5FZ1ezhgclqmcFXx0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5FN0JGNzg3MzhFN0IyQjky",
      "snippet": {
        "publishedAt": "2020-01-14T21:27:17Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Sam Hunt - Kinfolks (Official Audio)",
        "description": "Purchase Sam Hunt’s latest music: http://umgn.us/samhuntpurchase\nStream the latest from Sam Hunt: http://umgn.us/samhuntstream\nSign up to receive email updates from Sam Hunt: http://umgn.us/samhuntupdates\n\nBest of Sam Hunt: https://goo.gl/pvKaG4\nSubscribe here: https://goo.gl/pHwRMr\n\nWebsite: http://www.samhunt.com/\nFacebook: https://www.facebook.com/SamHuntMusic\nInstagram: https://www.instagram.com/samhuntmusic\nTwitter: https://twitter.com/samhuntmusic\n\n#SamHunt #CountryMusic #Kinfolks\n\nMusic video by Sam Hunt performing Kinfolks (Audio). © 2019 UMG Recordings, Inc.\n\nhttp://vevo.ly/0k79IC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Wk7ITw2Bl8s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 90,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Wk7ITw2Bl8s"
        }
      },
      "contentDetails": {
        "videoId": "Wk7ITw2Bl8s",
        "videoPublishedAt": "2019-10-10T21:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QL3Hpp_vBcKWwVOZ0umFp8UW-iA",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GMEYwNkFCMzcyMjRBN0JG",
      "snippet": {
        "publishedAt": "2020-01-14T21:20:51Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Old Dominion - One Man Band",
        "description": "Listen to “One Man Band” by Old Dominion from their self-titled album, out now: http://smarturl.it/OD3?IQid=youtube\n \nApple Music: http://smarturl.it/OD3/applemusic?IQid=youtube\nSpotify: http://smarturl.it/OD3/spotify?IQid=youtube\nAmazon Music: http://smarturl.it/OD3/az?IQid=youtube\niTunes: http://smarturl.it/OD3/itunes?IQid=youtube\nYouTube Music: http://smarturl.it/OD3/youtubemusic?IQid=youtube\nPandora: http://smarturl.it/OD3/pandora?IQid=youtube  \nAll Retailers: http://smarturl.it/OD3?IQid=youtube\n  \nConnect with Old Dominion: \nInstagram: https://www.instagram.com/olddominionmusic/\nFacebook: https://www.facebook.com/olddominionband/\nTwitter: https://twitter.com/olddominion\nSubscribe to their channel: http://smarturl.it/ODYTsub?IQid=youtube\nSign up for their Newsletter: https://smarturl.it/ODNewsletter?IQid=youtube \nWebsite: https://weareolddominion.com\n \n#OldDominion #OneManBand #CountryMusic #WeAreOldDominion",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0lxA1FXOiv0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 91,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0lxA1FXOiv0"
        }
      },
      "contentDetails": {
        "videoId": "0lxA1FXOiv0",
        "videoPublishedAt": "2019-01-18T08:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ChmH-nbtwBS8k-fnCL-yoa57DI0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5BRUY4MjgyRUVGRjNGOUU2",
      "snippet": {
        "publishedAt": "2020-05-12T19:54:33Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Young T & Bugsey - Don't Rush (ft. Headie One) [Music Video] | GRM Daily",
        "description": "🚨 SUBSCRIBE: http://bit.ly/GRMsubscribe  \n\nListen: https://smarturl.it/YTB_DontRush\n\nFollow:\n\nhttps://www.instagram.com/youngtandbugsey/\nhttps://www.instagram.com/youngtmusic/\nhttps://www.instagram.com/bugseymusic/\nhttps://www.instagram.com/headieone/\n\nhttps://twitter.com/YoungTandBugsey\nhttps://twitter.com/YoungTMusic\nhttps://twitter.com/BugseyMusic\nhttps://twitter.com/HeadieOne\n\n\nDIRECTOR: KLVDR\nSTYLIST: ALIZE DEMANGE\nPRODUCER: ERIN SAYDER\nEXEC. PRODUCER: RIK GREEN\nPROD CO: PULSE FILMS\n\n📲 FOLLOW: @grmdaily\n\n📰 VISIT: http://grmdaily.com/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ouCuyQI9pXc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ouCuyQI9pXc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ouCuyQI9pXc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ouCuyQI9pXc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ouCuyQI9pXc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 92,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ouCuyQI9pXc"
        }
      },
      "contentDetails": {
        "videoId": "ouCuyQI9pXc",
        "videoPublishedAt": "2019-11-07T20:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "jaEwexThxAYa1eplazylWVLR2Mw",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS45MUZCQkZGRUM2NzlFRjI1",
      "snippet": {
        "publishedAt": "2020-05-27T11:18:52Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Future - Solitaires (Audio) ft. Travis Scott",
        "description": "\"High Off Life\" available at: https://future.lnk.to/HighOffLife \nOfficial Store: https://shop.freebandz.com/\n\nFuture online:\nhttps://www.twitter.com/1future\nhttps://www.instagram.com/future\nhttps://www.soundcloud.com/futureisnow\nhttps://www.facebook.com/FutureOfficial\nhttp://www.freebandz.com/\n\n(C) 2020 Epic Records, a division of Sony Music Entertainment. With Freebandz.\n\n#Future #Solitaires #HighOffLife",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nG2oV1h5KxM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nG2oV1h5KxM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nG2oV1h5KxM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nG2oV1h5KxM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nG2oV1h5KxM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 93,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nG2oV1h5KxM"
        }
      },
      "contentDetails": {
        "videoId": "nG2oV1h5KxM",
        "videoPublishedAt": "2020-05-15T04:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kjsmyUa_vFCcKmZTFdPbOmEMQu8",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS40QzlFNTc5REZCQjNEM0Q2",
      "snippet": {
        "publishedAt": "2020-06-21T10:53:45Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "YoungBoy Never Broke Again - One Shot (feat. Lil Baby) [Official Audio]",
        "description": "The official audio of One Shot (feat. Lil Baby) by Youngboy Never Broke Again from the Road to Fast 9 Mixtape.\n\nStream/Download: https://FastAndFurious9.lnk.to/OneShot\n\nSubscribe for more official content from YoungBoy NBA: \nhttps://youngboy.lnk.to/Subscribe\n\nConnect with YoungBoy Never Broke Again:\nhttp://www.youngboynba.com\nhttps://www.facebook.com/nbayoungboy\nhttps://www.twitter.com/GGYOUNGBOY\nhttps://www.instagram.com/nba_youngboy\nhttps://www.soundcloud.com/nba-youngboy \n\nSubscribe for more official content from Atlantic Records:\nhttps://Atlantic.lnk.to/subscribe\n\nFollow Atlantic Records\nhttps://facebook.com/atlanticrecords\nhttps://instagram.com/atlanticrecords\nhttps://twitter.com/AtlanticRecords\nhttp://atlanticrecords.com\n\nThe official Atlantic Records YouTube Channel is home to the hottest in hip-hop, rock, pop, R&B, indie, musicals and soundtracks. \n\nWith over 70 years of global recorded music history, Atlantic Records’ legacy and passion for artistry continues with Top 40 hitmakers like Wiz Khalifa, Sean Paul, Trey Songz, Bruno Mars, Charlie Puth, Janelle Monáe, and B.o.B. \n\nAtlantic Records prides itself for working on Motion Picture Soundtracks, such as “The Greatest Showman”, “Suicide Squad” and “The Fate of the Furious.” As well as Musical Soundtracks including “Dear Evan Hansen,” and Grammy and Tony Award Winning “Hamilton”.\n It is home to world-renowned record labels representing music from every genre, including Asylum, Big Beat, Canvasback, Elektra, Fueled By Ramen, Rhino, Roadrunner, and Sire.\n \nSubscribe for the latest official music videos, official audio videos, performances, bts and more from our artists and projects.\nhttps://Atlantic.lnk.to/YTSubscribe\n\n#AtlanticRecords #Atlantic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JjiPNsUfrZ8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JjiPNsUfrZ8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JjiPNsUfrZ8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JjiPNsUfrZ8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JjiPNsUfrZ8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 94,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JjiPNsUfrZ8"
        }
      },
      "contentDetails": {
        "videoId": "JjiPNsUfrZ8",
        "videoPublishedAt": "2020-06-18T17:14:34Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6OcejMHGgFi9TwQDYRedrpxay60",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS41QzgzQTNDMjYxMzc1MTgy",
      "snippet": {
        "publishedAt": "2020-07-03T16:51:32Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "POP SMOKE - GOT IT ON ME (OFFICIAL VIDEO)",
        "description": "Got It On Me - (Official Music Video) by Pop Smoke\nDownload here: https://PopSmoke.lnk.to/SFTSAFTM\n \nSubscribe to Pop Smoke’s channel:\nhttps://PopSmoke.lnk.to/Subscribe   \n\nBuy Merch: https://shop.realpopsmoke.com\n\nFollow Pop Smoke:\nhttps://instagram.com/RealPopSmoke  \nhttps://instagram.com/ShootForTheStars  \n@.com/RealPopSmoke \n@.com/PopSmoke10\n@lipro",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LPnnX7hOcQM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LPnnX7hOcQM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LPnnX7hOcQM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LPnnX7hOcQM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LPnnX7hOcQM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 95,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LPnnX7hOcQM"
        }
      },
      "contentDetails": {
        "videoId": "LPnnX7hOcQM",
        "videoPublishedAt": "2020-07-03T04:01:50Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Pew6xk7AaWQOVomwIo4JvVkyHkY",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5EMDk3NkYyMTM0MUIxN0ZG",
      "snippet": {
        "publishedAt": "2020-06-26T00:45:19Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "TONES AND I - UR SO F**KING COOL (OFFICIAL VIDEO)",
        "description": "Official video for 'Ur So F**kInG cOoL'\nListen to the song here: https://TonesAndI.lnk.to/USFC\n\nA Visible Studios Production\n\nDirectors -  Nick Kozakis, Liam Kelly & Tones And I\nCharacters  - Tones And I\nOld Tones - Abbie Thorpe \nExecutive Producer - Timothy Whiting\nProducer  - Fabiana Weiner\nCinematographer - Carl Allison\nProduction Designer - Callum Preston \nStylist & Photographer - Giulia McGauran\nArt Department Assistants - Mo Wyse, Ed Fraser, and Rosa Mercedes\nMakeup Artist & SFX - Danielle Ruth (Wow FX)\nMakeup Artist Assistant - Yasmin Saad\n1st Assistant Director - Anna Bardsley-Jones\nFocus Puller & BTS Photographer - Anthony Littlechild\nMotion Control Operator (BOLT) - Tom David (RobotFace)\nMotion Control Assistant (BOLT) - Andrew Dale (RobotFace)\nGaffer - Branco Grabovac\nBest Girl - Hannah Palmer\nProduction Assistant - Carlia Capozza\nProduction Runner - Alexander Anderson and Jacqui Whiting\nEditors - Nick Kozakis & Liam Kelly\nPost Production Audio - John Servedio \nPost Production Supervisor  - Timothy Whiting\nColourist - Timothy Whiting\nAnimator - Luke Jeffs\nCompositors - Vince Buffalino and Theo Touren\nRoto Artists - Talha Rana, Theo Touren, and Paul Pleming\nVFX Artist - Dmitry Bashkov\nSenior Risk Advisor - Trent Bekis\nBehind the Scenes Filmmaker - Jesse Leaman \nGear Hire - Creative Head Rentals and Savage Film Services \nCatering - Canadian Bay Hotel\n\nSpecial thanks to Steve Clements\n\nFollow: \nhttps://www.tonesandi.com\nhttps://www.facebook.com/tonesandi\nhttps://www.instagram.com/tonesandi\n\nContact Management Worldwide: \nLemon Tree Music + Artists Only\nmgmt@tonesandi.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/N6GLTz0_rCA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/N6GLTz0_rCA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/N6GLTz0_rCA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/N6GLTz0_rCA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/N6GLTz0_rCA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 96,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "N6GLTz0_rCA"
        }
      },
      "contentDetails": {
        "videoId": "N6GLTz0_rCA",
        "videoPublishedAt": "2020-05-29T12:25:56Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "88D5nuY--eVyae5I0IpOB1lDu_g",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS5GREE0Q0U5OUU2QzREMkZD",
      "snippet": {
        "publishedAt": "2020-07-04T17:29:11Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Moneybagg Yo – Said Sum (Official Music Video)",
        "description": "Moneybagg Yo's new track 'Said Sum' out now: https://smarturl.it/SaidSum\n\n\nFollow Moneybagg Yo:\nhttp://www.instagram.com/moneybaggyo/\nhttp://www.twitter.com/moneybaggyo/\nhttp://www.facebook.com/moneybaggyo/ \n\n#MoneybaggYo #SaidSum\n\n\n\nSaid Sum (Lyrics)\n\nHuh what uh I thought a broke nigga said sum\nTalkin shit but they still ain’t sayin nothin \nWe gon trap dis bitch out til the Feds come (run it up run it up)\nHuh? what she say?  Uh I thought a pussy hoe said sum uh\nHow it go when I’m talkin you listen (just listen)\nCut her off because she spoke on the business (go)\n\nHunnids and Fifties can’t swap a dime for a penny\nYou know that’s a stupid decision \nHead first wit it I shot a shot at my nigga bitch really didn’t think before I did it \nMake it make sense (please)\nLuckily I was on point with the last hoe \nKept my receipts (why?)\nWarranty good made sure I gotta full refund\nWhen I gave her back to the streets\nForever I rep put the set on the chain \nI’m thuggin you already know how I came\nYea he got money but niggas be lame \nI Lambo’d her life told her get out that Range \nHer mani and pedi same color as my teeth (white)\nShe gotta blue check and a check without me (nice)\nHood nigga ridin in a foreign on E (Still)\nSick of these niggas Covid-19 (ugh)\nKawhi the rocket tryna keep the cup\nCame up like Giannis I’m tryna get the bigger Bucks \nGot 4 different choppas right there in this truck\nI’m just being honest I could get you touched \nPut you in the blender I could get you slushed \nI see the comments but really I’m bothered \nI know it’s hurtin she salty I scarred her \nBeware what you lay up and say to these bitches they can’t hold water (period)\n\nHuh what uh I thought a broke nigga said sum\nTalkin shit but they still ain’t sayin nothin \nWe gon trap dis bitch out til the Feds come (run it up run it up)\nHuh? what she say?  Uh I thought a pussy hoe said sum uh\nHow it go when I’m talkin you listen (just listen)\nCut her off because she spoke on the business (go)\n\nI thought a nigga who watch what I do but he can’t get his bitch back said sum (Tuh)\nIs it true that he postin another nigga money prolly I don’t put that pass him (maybe so)\nI thought a hoe that be speakin on me but be fuckin a broke nigga said sum (listen)\nHol up lil bitch get a nigga that’s lit \nI’m the whole loaf he the breadcrumbs (gang)\nRappers with these mixed feelins (what)\nI ain’t fuckin wit em (nope)\nLike a Richard Mille let me know what time it is\nBagg where da Runtz at? Know you got it on you ‘posed to be smell proof bussin out the vacuum seal\nThese niggas lil boys childish Fisher Price\nConfident I’m not cocky so get it right \nShe bending over but I want some head first \nI’ont even wanna know what the P***y like \nTrippin too close to fallin so I’m ballin \nIt’s crazy my opp got shot but I ain’t call it\nSlow up I come around niggas gon put they hoe up these bitches stay on my channel (yea) must’ve seen me on TV (yea)\nIt took me six hours to count a mill exactly \nI’m accurate with that cheese (yea) Big Bagg \n\nHuh what uh I thought a broke nigga said sum\nTalkin shit but they still ain’t sayin nothin \nWe gon trap dis bitch out til the Feds come (run it up run it up)\nHuh? what she say?  Uh I thought a pussy hoe said sum uh\nHow it go when I’m talkin you listen (just listen)\nCut her off because she spoke on the business (go)",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/T8pi91qWnRw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/T8pi91qWnRw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/T8pi91qWnRw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/T8pi91qWnRw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/T8pi91qWnRw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 97,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "T8pi91qWnRw"
        }
      },
      "contentDetails": {
        "videoId": "T8pi91qWnRw",
        "videoPublishedAt": "2020-06-30T16:59:58Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TlB4OYz5wpncOUfuHBCYj5fikF0",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43RDU5MEE3QTZGRDM5MjVC",
      "snippet": {
        "publishedAt": "2020-07-04T17:31:10Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Luke Bryan - Build Me A Daddy (Official Music Video)",
        "description": "The official music video for Luke Bryan’s Build Me A Daddy.\n \nSubscribe to this channel: https://umgn.us/LukeBryanSubscribe\nWatch more official videos from Luke Bryan: https://umgn.us/LukeBryanVideos\nSign up to receive email updates from Luke Bryan: https://umgn.us/lukebryanupdates \nListen to Luke Bryan’s latest music: https://strm.to/LukeBryanMusic\n \n******************************************\nWebsite: http://www.lukebryan.com/\nFacebook: https://www.facebook.com/lukebryan\nInstagram: https://www.instagram.com/lukebryan\nTwitter: https://twitter.com/LukeBryanOnline\n \n******************************************\n#LukeBryan #BuildMeADaddy #CountryMusic\n\nMusic video by Luke Bryan performing Build Me A Daddy. © 2020 Row Crop Records, LLC, under exclusive license to UMG Recordings, Inc.\n\nhttp://vevo.ly/g6IZPC",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/T8t4S6ovrDs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/T8t4S6ovrDs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/T8t4S6ovrDs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/T8t4S6ovrDs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/T8t4S6ovrDs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 98,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "T8t4S6ovrDs"
        }
      },
      "contentDetails": {
        "videoId": "T8t4S6ovrDs",
        "videoPublishedAt": "2020-06-12T04:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-3TRWDZ4iQCp7UIPyKJ4e_LifQU",
      "id": "UExESW9VT2hRUVBsWHI2M0lfdndGOUdEOHNBS2g3N2RXVS43NENFRjc0RkJFMjNCMEM1",
      "snippet": {
        "publishedAt": "2020-07-05T22:06:34Z",
        "channelId": "UCX9oPuvJYZsG8wnHTwOBVPA",
        "title": "Beyoncé BLACK PARADE (Official Audio)",
        "description": "Happy Juneteenth Weekend! I hope we continue to share joy and celebrate each other, even in the midst of struggle. Please continue to remember our beauty, strength and power. “Black Parade” celebrates you, your voice and your joy and will benefit Black-owned small businesses. Learn more at: https://beyonce.com/black-parade-route/\n\nBLACK PARADE out now: https://Beyonce.lnk.to/BlackParadeID\n\nAmazon Music: https://Beyonce.lnk.to/BlackParadeID/amazonmusic\nApple Music: https://Beyonce.lnk.to/BlackParadeID/applemusic\nDeezer: https://Beyonce.lnk.to/BlackParadeID/deezer\niTunes: https://Beyonce.lnk.to/BlackParadeID/itunes\nSoundcloud: https://Beyonce.lnk.to/BlackParadeID/soundcloud\nSpotify: https://Beyonce.lnk.to/BlackParadeID/spotify\nTidal: https://Beyonce.lnk.to/BlackParadeID/tidal\n\nYouTube Music: https://Beyonce.lnk.to/BlackParadeID/youtubemusic\n\nBeyoncé:\nhttps://www.Beyonce.com\nhttps://www.instagram.com/Beyonce\nhttps://www.facebook.com/Beyonce\n\nhttps://twitter.com/Beyonce \n\n#Beyonce #BlackParade",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EJT1m1ele00/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EJT1m1ele00/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EJT1m1ele00/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EJT1m1ele00/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EJT1m1ele00/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chillax",
        "playlistId": "PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU",
        "position": 99,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EJT1m1ele00"
        }
      },
      "contentDetails": {
        "videoId": "EJT1m1ele00",
        "videoPublishedAt": "2020-06-20T04:32:00Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 100,
    "resultsPerPage": 50
  }
}

    http_version: null
  recorded_at: Wed, 08 Jul 2020 02:18:03 GMT
recorded_with: VCR 5.1.0
