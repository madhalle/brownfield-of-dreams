---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=100&pageToken&part=snippet,contentDetails&playlistId=RDQMVYZqmir5xl0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 08 Jul 2020 02:18:02 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "Ht3CJGXw-w_9dPJOcYqFBVcs1d8",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "uwtbP-3NWV5FlBGE83DbUbWzr4Q",
      "id": "UkRRTVZZWnFtaXI1eGwwLmRSMTdVNS1WS3R3",
      "snippet": {
        "publishedAt": "2018-10-14T17:45:00Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "3:30 a.m. ~ lofi hip hop / jazzhop / chillhop mix [study/sleep/homework music]",
        "description": "🎼 Feardog's Spotify playlists: https://spoti.fi/2mM0pLC\n\n▬★Subscribe and click the bell icon for more chill hip hop beats ♫♪★▬\n\n►I want to thank each and every one of you for 100 THOUSAND subscribers! It has been one of my biggest goals and we did it in just a little over a year which is absolutely astounding! Here is a sequel of my most popular mix - \"3 a.m. [lo-fi hip hop / jazzhop / chillhop mix] (Study/Sleep/Relax music)\". This mix is great for studying, gaming, meditatng, sleeping or just chilling in general! I hope all of you have a fantastic day/night!! \n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n▬★TRACKLIST★▬\n\n00:05 jishle - Remnants of Summer\n02:04 tzelun - searching\n04:11 Kerusu - First Snow\n07:22 Kerusu - Stay With Me\n11:10 sad boy with a laptop - i was lost until i met you\n12:59 WYS - close my eyes\n16:13 omar - journey\n18:31 T s u n a m i i - Just Imagine\n22:16 charlie toØ human - Walk In The Park\n23:31 a boy with a balloon - stay all night long (sc)\n25:39 a boy with a balloon - fly away for a day\n27:51 e-clips - transform the world\n29:28 indigoKyoto - i got lost in western tokyo\n31:37 Key-One - Love me\n33:08 Mon-day - c u soon\n34:24 jishle - Early Morning, Late Night \n\n▬★Support the artists★▬\njishle: https://soundcloud.com/jishle\ntzelun: https://soundcloud.com/tzelun\nKerusu: https://soundcloud.com/kerusu\nsad boy with a laptop: https://soundcloud.com/sadboywithalaptop\nWYS: https://soundcloud.com/wyslofi\nomar: https://soundcloud.com/momarm\nT s u n a m i i: https://soundcloud.com/tsunamii-tsu \ncharlie toØ human: https://soundcloud.com/charlietoohuman\na boy with a baloon: https://soundcloud.com/aboywithaballoon\ne-clips: https://soundcloud.com/e-clips-music\nindigoKyoto: https://soundcloud.com/indigokyoto\nKey-One: https://soundcloud.com/key-one-416068217\nMon-day: https://soundcloud.com/mondayat7am\n\n\n☯DISCORD SERVER: https://discord.gg/N3f5Nwc\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n▬★ Social Media ★▬\n►DISCORD SERVER: https://discord.gg/N3f5Nwc\n►CHANNEL: http://youtube.com/FeardogMusic\n►SOUNDCLOUD: https://soundcloud.com/feardogmusic\n►BUSINESS E-MAIL: feardog.business@gmail.com\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n▬MY CHANNEL INFO▬\nMy channel is the best place to find amazing chill/jazzy hip hop songs and mixes on YouTube.\nGenres: lo-fi hip hop / jazzhop / chillhop / vaporwave, krnb / khiphop / korean indie\nFeedback is always appreciated!\nConsider subscribing to my channel and hitting the bell icon, you won't regret it!\n\n▬★HELP ME OUT★▬\n\nYOU can help by...\n\n● Putting my channel in your youtube channel sub box\n● Remember to rate my videos as you watch them as it helps greatly\n● Share a video you enjoyed on your Facebook wall or your Twitter account\n● Help my channel get discovered via word of mouth by telling friends & family\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nIf you enjoyed this video be sure to THUMBS UP & FAVOURITE!\nI also LOVE your COMMENTS!\nYou keep watching my videos and I will keep making them :)\n\n📷Amazing artwork by:\nhttp://days-e.tumblr.com/\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n►3:30 a.m. ~ lofi hip hop / jazzhop / chillhop mix [study/sleep/relax music playlist]\n►3:30 a.m. ~ lo-fi hip hop / jazzhop / chillhop mix [study/sleep/relax music playlist]\n►3:30 a.m. ~ lo fi hiphop / jazzhop / chillhop mix [study/sleep/homework music playlist]\n\n♦♦♦\n#Feardog #lofi #aesthetic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dR17U5-VKtw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dR17U5-VKtw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dR17U5-VKtw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dR17U5-VKtw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dR17U5-VKtw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dR17U5-VKtw"
        }
      },
      "contentDetails": {
        "videoId": "dR17U5-VKtw",
        "videoPublishedAt": "2018-10-14T17:45:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xg2TrW45n86579IJWvRqb319_og",
      "id": "UkRRTVZZWnFtaXI1eGwwLlhYR0czOWJIUWk0",
      "snippet": {
        "publishedAt": "2018-12-13T15:48:56Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "lofi study mix for homework ~ [lofi hip hop / jazzhop / chillhop mix] - beats to chill/study/relax",
        "description": "Homework, Study, Chill Music\nLofi chill study beats, lo fi hiphop mix, study background music playlist, for work, study, reading, drawing, sleep. べんきょう おんがく\nHomework & Chill Study Music [Lofi Hip Hop / Jazzhop / Chillhop Mix] - Beats to chill/study/relax\nＨＯＭＥＷＯＲＫ　＆　ＣＨＩＬＬ　(ミュージック - 寛げる)\n\nHello, and welcome to my first lo-fi hip hop mix! This mix is a compilation of lofi hip hop, jazzhop, chillhop and vaporwave. I find lo-fi/lofi hiphop, jazzhop, chillhop really ideal for chilling, studying and relaxing, background at work and sleeping haha. \n\nThis mix contains many relaxing beats and vibes which will hopefully help you concentrate on your studying or relaxing! If you enjoyed this video, don't forget to subscribe to my channel!\n\nSUBSCRIBE: https://goo.gl/FJGJvR\n\n#lofihiphop #chillhop #lofi #jazzhop #chill #chillout #chillmusic #studymusic #studybeats #lovemusic #gamingmusic #relaxingradio #homeworkmusic #homework #chillbeats\n\nTracklist:\n00:00 kavv - sept 6th\n01:51 leavv - candle\n04:16 barnes blvd - now i see\n06:59 sky.high - we watched the leaves fall\n09:09 oatmello - let me play for you\n10:52 cat naps - once again\n12:09 j’san - just a dream\n14:32 halberd - everything 4u\n15:54 rudemanners - shower\n17:42 kendall miles - apart\n20:15 kupla - grassroot skies\n21:53 aimless - water garden\n23:27 luvbird - spring breeze\n25:13 flavors x aimless - tulips\n26:23 cat naps - blossom\n27:34 soho - ada\n29:16 kupla - healing\n31:13 bojet - walking home\n32:29 silky soap - underwater\n34:48 rook1e x biosphere - always\n35:53 soho - blooming\n37:05 cat naps x khai dreams - light breeze\n38:44 rook1e x j’san - pure imagination\n40:29 kendall miles x biosphere - serene hearts\n43:14 soho - stay\n44:43 elijah who - soy latte\n\nArtwork: http://days-e.tumblr.com/\n\nInspiration: ChilledCow, Feardog\n\nGenre: Lofi, Lo-fi, Hip Hop, Jazzhop, Chillhop, Vaporwave, Studying, Chilling, Chillout, Relaxing, Sleep Music, Sleeping, Electronic, Indie, Instrumental, Background, Ambient\n\n━━━━━━━━━━\nMy Links:\n\nMusic Submission: https://soundcloud.com/amplitudebeats\nBusiness Inquiries, Copyright Claims & Issues: Check the \"About\" section of my channel.\n\nThe purpose of this channel is solely for the promotion of the artists and that most of the content has been permitted to use, however, if they are any issues or any artists that would like to have their music taken down, please contact us via the email. Thanks.\n\n━━━━━━━━━━\n\nＨＯＭＥＷＯＲＫ　＆　ＣＨＩＬＬ　寛げる\nhomework and study ミュージック (music)\nhomework and study music (ミュージック)\nStudy and homework music\n1 hour study, work playlist\nStudying, working music\nBackground music for work, reading and sleep.\nStudy music for final exam to get A+\nMusic to focus, concentrate\nWork music bgm jazzhop cafe music\nBackground music, BGM, cafe, study bgm, study background music\nｈｏｍｅｗｏｒｋ ＆ ｓｔｕｄｙ （ｍｕｓｉｃ ）（ミュージック）\nＨＯＭＥＷＯＲＫ　＆　ＣＨＩＬＬ　寛げる\nＨＯＭＥＷＯＲＫ　＆　ＣＨＩＬＬ　寛げる",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XXGG39bHQi4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XXGG39bHQi4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XXGG39bHQi4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XXGG39bHQi4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XXGG39bHQi4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XXGG39bHQi4"
        }
      },
      "contentDetails": {
        "videoId": "XXGG39bHQi4",
        "videoPublishedAt": "2018-12-13T15:48:56Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Dy6_tJTt0QAS7TcWaEssOmp131I",
      "id": "UkRRTVZZWnFtaXI1eGwwLnRRdk5KRFVoekJR",
      "snippet": {
        "publishedAt": "2019-12-19T22:59:12Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "Mellow Vibe ● lofi study mix",
        "description": "☊    [ Spotify Playlist ]  Guitar Spotify Playlist\n\n● https://open.spotify.com/playlist/2CIfr2KNG8eNmC2DLGIRNU?si=4cLgy7atRMiywawT6vnL0Q\n\n                                         ♥ Dreamy ♥  : \n● Spotify : \n→ https://open.spotify.com/user/6qxhced3b0l62lh3fedtbv14y\n● Instagram :\n→ https://www.instagram.com/its_dreamy_yt/\n● Patreon ( Donate Support ) 🙏\n→https://www.patreon.com/m/its_dreamy\n・・・・・・・・・・・・・・・・・・・\n\n👁 [ ART ]\n\nhttps://imgur.com/a/b7pTrj4\n\n ♪ [ TRACKLIST ]\n\n00:00 ● kido. - Good Morning\n\nhttps://soundcloud.com/kidokidokido/dinner-in-tokyo-1\n\n02:24 ● asokah - water lily\n\nhttps://soundcloud.com/asokah/water-lily\n\n03:43 ● biosphere - a simple bunny girl\n\nhttps://open.spotify.com/track/2WYk7GcpAsqvW0ngT4I2h0?si=aqF7hjn1SsiKySYsqUwXog\nhttps://soundcloud.com/officialbiosphere/a-simple-bunny-girl\n\n06:03 ● Medda - stay here  with me \n\nhttps://soundcloud.com/imedda/stay-here-with-me\nhttps://open.spotify.com/track/2GZ4mnj3sUbndKKhL0oTpZ?si=-hscEAm1TXebOoc86ihl_g\n\n07:34 ● ｃｈｉｎｓｅｉ - pressure\n\nhttps://open.spotify.com/track/6e3XmKZs4WBWc7Pt1hFu0K?si=aRwU4ELiRVuo9wx7qh9e_g\nhttps://soundcloud.com/chinseibeats/pressure\n\n09:52 ● project royal - all over again\n\nhttps://soundcloud.com/projectroyal/all-over-again\n\n11:52 ● khoikun - Anata ni Aete Yokatta\n\nhttps://soundcloud.com/khoikun/anata-ni-aete-yokatta\n\n13:58 ● Tomppabeats - The Girl Next Door\n\nhttps://open.spotify.com/track/3Rppo6uStUw9Nrtx8cBLEC?si=wS8QfqTXRFuLyezIhY0DeQ\n\n14:46 ● Chef Boy RJ - not a cloud in the sky\n\nhttps://soundcloud.com/chefboyrj/not-a-cloud-in-the-sky-1\n\n17:33 ● asokah - I always smile but my eyes are sad\n\nhttps://open.spotify.com/track/1FyflIoYXwtfR1njREgAgp?si=65hmN-BKQYqCGxxiD5r4lw\nhttps://soundcloud.com/asokah/i-always-smile-but-my-eyes-are-sad\n\n20:17 ● amon ji - ghosts\n\nhttps://soundcloud.com/amonji/ghosts\n\n22:42 ● ｃｈｉｎｓｅｉ - lovely day\n\nhttps://open.spotify.com/track/2dpHQtf2bTQQOVgycJbzco?si=tXN67aseTIyHGtEkIW_fQA\nhttps://soundcloud.com/chinseibeats/lovely-day\n\n24:45 ● asokah - forgot the feeling\n\n26:08 ● lowagg - Ethereal\n\nhttps://soundcloud.com/ludlobeats/ethereal-beattape\n\n28:22 ● aleks - riverside.\n\nhttps://soundcloud.com/fckaleks/riverside\n\n30:40 ● .Uzu - in spring\n\nhttps://soundcloud.com/tsuki_uzu/in-spring\n\n33:15 ● kido - Midnight In Tokyo\n\nhttps://soundcloud.com/kidokidokido/midnight-in-tokyo\n\n35:16 ● Jordy Chandra - breathe in\n\nhttps://open.spotify.com/track/1GK2s2nKnWIGWWr5fToCRG?si=G69n-kaCQSmQiJhY41VVIw\nhttps://soundcloud.com/jordychandra/let-it-breath\n・・・・・・・・・・・・・・・・・・・・\n❗ Any claims of copyright infringement :\n✉ dre21amy@gmail.com\n・・・・・・・・・・・・・・・・・・・・\n📝 Submission :\nMusic     https://soundcloud.com/its_dreamy\nArt          dre21amy@gmail.com\n・・・・・・・・・・・・・・・・・・・・\n#Dreamy#lofi",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tQvNJDUhzBQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tQvNJDUhzBQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tQvNJDUhzBQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tQvNJDUhzBQ/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tQvNJDUhzBQ"
        }
      },
      "contentDetails": {
        "videoId": "tQvNJDUhzBQ",
        "videoPublishedAt": "2019-12-19T22:59:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "G94qfumOfI05_gTZVjMwEyazUm8",
      "id": "UkRRTVZZWnFtaXI1eGwwLm1VZVpEdTlyQkg4",
      "snippet": {
        "publishedAt": "2018-04-05T20:00:02Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "ｈｏｍｅｗｏｒｋ ＆ ｓｔｕｄｙ （ミュージック）",
        "description": "Lofi chill study beats - lo fi hiphop mix. 1 hour study background music playlist mixtape, for work, study, reading, drawing, sleep. Enjoy~\n\nべんきょう おんがく \n\nListen to more music like these 🎧:\nhttps://www.youtube.com/watch?v=WZmEtk2rXAo&index=3&list=PLdN1I8mCepFLRXJSmHkNM2qAIDWL4XkhL&\n\nShow these artists lots of love if you like it ♥︎\n\nHit that 🛎icon join notification squad!\n\nhomework and study ミュージック (music)\n\n00:00 Ibrahim - quiet dreams of crowns and metamorphosis\n03:35 Aso - waiting\n07:15 J L - Summertime\n09:30 latejune - Fall From Love\n11:44 aForeTime - Im Sorry \n13:32 City Girl - soft static sky on early mornings \n16:22 KEEM.THE.CIPHER - Blossom (with Sugi.wa)\n18:32 Silk.y. - keep It (Dream Easy Exclusive)\n20:44 Somar - sunny\n23:16 Somar - My Window (Feat. EQNX & Joseph Jacobs)\n25:53 latejune - roses left behind\n28:38 mommy hilfiger - it rained when i first saw her (ft. meybirb)\n30:14 Kenai - Nobody Know\n33:15 Player Dave - Can't Remember\n35:40 Ibrahim - sharing an umbrella\n38:10 Elijah who - You don't even have to try\n39:31 j'san - This feels too good\n41:21 j'san &er the trees\n43:13 latejune - why bother\n45:26 Biosphere - morning fog\n46:53 j'san - soothing sh!t \n48:13 C O C O N O U T  - Les Amoureux\n51:06 Artesiia - her\n52:51 biosphere - down by the brook\n54:52 Kendal Miles - Light year love (with Somar)\n56:49 Ibrahim - as the stars tremble\n59:14 mommy hilfiger - spilled milk\n\nArtwork by Naela Ali\nhttps://www.instagram.com/naelaali\nhttps://twitter.com/naelaali\nhttps://www.instagram.com/_asobi/\n\nWe have permission to use all materials (music and art) :)\n\nR L I F E\nhttps://soundcloud.com/thisRLIFE \nthisRLIFE@gmail.com (business enquiries)\nNEW facebook page :\nhttps://www.facebook.com/thisRLIFE/\nhttps://www.instagram.com/thisrlife/\nSupport Us\nhttps://paypal.me/thisRLIFE\n\nSUBMISSION\nSubmit your music :\nmessage me on soundcloud with downloadable link.\nSubmit your artwork :\nhttps://goo.gl/forms/qjn7mSobSLJu0YuJ2\n\nJoin #RLIFE discord server to gather supportive people from this community, artist or listener. https://discord.gg/3Yu6KK7\n\n\n\n_____________________________________________________\nhomework and study music (ミュージック)\nStudy and homework music\n1 hour study, work playlist\nStudying, working music\nBackground music for work, reading and sleep.\nStudy music for final exam to get A+\nMusic to focus, concentrate\nWork music bgm jazzhop cafe music\nBackground music, BGM, cafe, study bgm, study background music\n\nｈｏｍｅｗｏｒｋ ＆ ｓｔｕｄｙ （ｍｕｓｉｃ ）（ミュージック）",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mUeZDu9rBH8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mUeZDu9rBH8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mUeZDu9rBH8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mUeZDu9rBH8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mUeZDu9rBH8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mUeZDu9rBH8"
        }
      },
      "contentDetails": {
        "videoId": "mUeZDu9rBH8",
        "videoPublishedAt": "2018-04-05T20:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DymzILGzsjY6RHINv-Jwkw0VxU4",
      "id": "UkRRTVZZWnFtaXI1eGwwLmhaNmJlakNzSmQw",
      "snippet": {
        "publishedAt": "2020-01-30T16:49:13Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "lofi hip hop study - lofi hip-hop study beats mix [study/sleep/homework music]",
        "description": "lofi hip hop study - lofi hip-hop study beats mix\n🎼 Feardog's Spotify playlists: https://spoti.fi/2mM0pLC\n\n▬★Subscribe and click the bell icon for more chill hip hop beats ♫♪★▬\n\n►I want to thank each and every one of you for 300 THOUSAND subscribers! It has been one of my biggest goals and we did it in just a little over a year which is absolutely astounding! Here is a sequel of my most popular mix - \"3 a.m. [lo-fi hip hop / jazzhop / chillhop mix] (Study/Sleep/Relax music)\". This mix is great for studying, gaming, meditatng, sleeping or just chilling in general! I hope all of you have a fantastic day/night!! \n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n▬★TRACKLIST★▬\n\n00:00 eugenio izzi 🚬 - What I Think\n      https://soundcloud.com/eugenio-izzi\n\n02:24 𝙊 𝙤 𝙞 🌜 - springs coming\n      https://soundcloud.com/ooibeats\n\n04:53 Kasper Lindmark - A Letter In Summer\n      https://soundcloud.com/kasperlindmark\n\n06:35 𝙊 𝙤 𝙞 🌜 - ｅｌｓｅｗｈｅｒｅ\n      https://soundcloud.com/ooibeats\n\n08:36 FatB (F@ B ♒) - Stay\n      https://soundcloud.com/fatb1\n\n09:58 Kasper Lindmark - Somebody That Loves Me\n      https://soundcloud.com/kasperlindmark\n\n11:25 Never - quiet place\n      https://soundcloud.com/neverlofi\n\n13:25 Retro Aesthetic Boy - strangers\n      https://soundcloud.com/retroaestheticboy\n\n16:16 towser - internet crush\n      https://soundcloud.com/twsr\n\n17:41 HM Surf - Liquid Larry\n      https://soundcloud.com/hmsurf\n\n19:04 towser - tides\n      https://soundcloud.com/twsr\n\n20:37 𝙊 𝙤 𝙞 🌜 - 𝚙𝚎𝚘𝚗𝚢\n      https://soundcloud.com/ooibeats\n\n22:29 Kuranes - Ex Oblivione\n      https://soundcloud.com/kuranesbeats\n\n24:28 never x kowie - calm dreams\n      https://soundcloud.com/neverlofi\n\n27:01 eugenio izzi 🚬 - A Quiet Place In My Heart\n      https://soundcloud.com/eugenio-izzi\n\n29:22 Homie Cat - Pure Heart\n      https://soundcloud.com/homie-cat\n\n31:25 t^bi - Ancient Forest\n      https://soundcloud.com/prodbytobi\n\n33:16 heizzah - time\n      https://soundcloud.com/heizzah\n\n36:07 wooded - calme coucher\n      https://soundcloud.com/woodsup\n\n37:55 Retro Aesthetic Boy - i still think about you\n      https://soundcloud.com/retroaestheticboy\n\n40:01 ais.hill - moon\n      https://soundcloud.com/aishill\n\n42:22 Saiko & Kuranes - Nebula\n      https://soundcloud.com/kuranesbeats\n\n44:43 ais.hill - nearly a bump\n      https://soundcloud.com/aishill\n\n45:56 Kuranes - Sunyata\n      https://soundcloud.com/kuranesbeats\n\n48:17 jeiku - [solace]\n      https://soundcloud.com/jeikuh\n\n50:26 sumwun - mas + Made in M\n      https://soundcloud.com/smwun\n\n51:46 Charlie Myles - whats wrong with sleeping {is for the weak}\n      https://soundcloud.com/charliemyles\n\n54:48 Naga X WYS - Spread My Dreams (feat Larissa)\n      https://soundcloud.com/nagalofi\n\n57:55 wünsche - take em back\n      https://soundcloud.com/samuelwunsche\n\n59:30 sumwun - men cry\n      https://soundcloud.com/smwun\n\n\n☯DISCORD SERVER: https://discord.gg/N3f5Nwc\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n▬★ Social Media ★▬\n►DISCORD SERVER: https://discord.gg/N3f5Nwc\n►CHANNEL: http://youtube.com/FeardogMusic\n►SOUNDCLOUD: https://soundcloud.com/feardogmusic\n►BUSINESS E-MAIL: feardog.business@gmail.com\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n▬MY CHANNEL INFO▬\nMy channel is the best place to find amazing chill/jazzy hip hop songs and mixes on YouTube.\nGenres: lo-fi hip hop / jazzhop / chillhop / vaporwave, krnb / khiphop / korean indie\nFeedback is always appreciated!\nConsider subscribing to my channel and hitting the bell icon, you won't regret it!\n\n▬★HELP ME OUT★▬\n\nYOU can help by...\n\n● Putting my channel in your youtube channel sub box\n● Remember to rate my videos as you watch them as it helps greatly\n● Share a video you enjoyed on your Facebook wall or your Twitter account\n● Help my channel get discovered via word of mouth by telling friends & family\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nIf you enjoyed this video be sure to THUMBS UP & FAVOURITE!\nI also LOVE your COMMENTS!\nYou keep watching my videos and I will keep making them :)\n\n📷Amazing artwork: 饭 太稀\n→ https://www.behance.net/showfantasy\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n►lofi hip hop study - lofi hip-hop study beats mix [study/sleep/homework music]\n►lofi hip hop study - lofi hip-hop study beats mix [study/sleep/homework music]\n►lofi hip hop study - lofi hip-hop study beats mix [study/sleep/homework music]\n\n♦♦♦\n#Feardog #lofi #aesthetic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hZ6bejCsJd0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hZ6bejCsJd0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hZ6bejCsJd0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hZ6bejCsJd0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hZ6bejCsJd0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "hZ6bejCsJd0"
        }
      },
      "contentDetails": {
        "videoId": "hZ6bejCsJd0",
        "videoPublishedAt": "2020-01-30T16:49:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "et37dvGSnP0JwBUxSJcxVfmfNTM",
      "id": "UkRRTVZZWnFtaXI1eGwwLlRZQ0JpY0t5Vmhz",
      "snippet": {
        "publishedAt": "2018-08-09T10:28:17Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "staying in. [lofi / jazzhop / chill mix]",
        "description": "🛏️ for those 'i can't be bothered' moments\n\n01 00:00 City Girl - Ji-eun's Sunset\n02 02:38 sad boy with a laptop - you're the dream i never wanna wake up from\n03 04:50 Sky.High - Ethereal\n04 06:36 neeks - summer lovers\n05 08:06 harren - your evening porch\n06 11:30 biosphere - plain plaid purple morning\n07 13:40 hoogway - ingenue\n08 15:56 hentaidesu - stay\n09 17:40 ibrahim - sleeping in the postmeridian sky\n10 21:24 cat paw 🐾 - a cup of tea to warm me up ♨️\n*11 23:06 City Girl - living in a transient dream\n12 26:16 buenos dias, princesa - me preguntaron por drogas... les hablé de su sonrisa\n13 28:24 Bunko Stew - Indoor Gardening\n14 30:18 furino - listen to tommy with a candle burning\n15 31:50 WYS - close my eyes\n16 35:00 Jordy Chandra - I Want You But Not Now\n17 37:22 Brye - You're Beautiful\n18 39:18 Nohone - You're Just Alone\n\nTracks marked with an '*' are from The Jazz Hop Café Records \nofficial releases (https://jazzhopcafe.bandcamp.com)\n\n☕ Follow The Jazz Hop Café on:\n• YouTube - https://youtube.com/thejazzhopcafe\n• Soundcloud - https://soundcloud.com/jazzhopcafe\n• Spotify - https://open.spotify.com/user/thejazzhopcafe\n• Bandcamp - http://jazzhopcafe.bandcamp.com\n• Facebook - https://facebook.com/jazzhopcafe\n• Instagram - http://instagram.com/thejazzhopcafe\n\nWant to Submit Music? \nContact us on SoundCloud or Email us at jazzhopcafe@gmail.com\n\n👕 Grab some Merchandise at\nhttp://thejazzhopcafe.bigcartel.com\n\nFollow ► The Artists\n• City Girl - https://soundcloud.com/citygrl\n• sad boy with a laptop - https://soundcloud.com/sadboywithalaptop\n• Sky.High - https://soundcloud.com/skyhighbeatss\n• neeks - https://soundcloud.com/nfzy\n• harren - https://soundcloud.com/harren-yip\n• biosphere - https://soundcloud.com/officialbiosphere\n• hoogway - https://soundcloud.com/hoogway\n• hentaidesu - https://soundcloud.com/hentaidesuka\n• ibrahim - https://soundcloud.com/ibr\n• cat paw 🐾 - https://soundcloud.com/iamcatpaw\n• buenos dias, princesa - https://soundcloud.com/bdprincesa\n• Bunko Stew - https://soundcloud.com/bunkostew\n• furino - https://soundcloud.com/furino\n• WYS - https://soundcloud.com/wyslofi\n• Jordy Chandra - https://soundcloud.com/jordychandra\n• Brye - https://soundcloud.com/brye6\n• Nohone - https://soundcloud.com/nohone\n\nImage By: Gunseli Sepici\n• https://gunselisepici.com\n• https://www.instagram.com/gunselisepici\n• http://gunseli.tumblr.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TYCBicKyVhs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TYCBicKyVhs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TYCBicKyVhs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TYCBicKyVhs/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TYCBicKyVhs"
        }
      },
      "contentDetails": {
        "videoId": "TYCBicKyVhs",
        "videoPublishedAt": "2018-08-09T10:28:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qTs21rKSwEys-aRZQ3mCpOu8-p4",
      "id": "UkRRTVZZWnFtaXI1eGwwLjc4bVlrYmZzWFJN",
      "snippet": {
        "publishedAt": "2019-06-13T21:01:28Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "coffee shop ☕ calm lofi hiphop mix",
        "description": "grab a cup of coffee and enjoy ☕\n\ntracklist\n0:00 - every summer | through & through ft. j'san\n2:08 - cold days | sky.high ft j'san\n4:16 - feathers | kupla\n6:20 - when you left | miscél\n9:03 - afloat | kupla\n11:35 - wind down | flovry\n14:27 - i fell for you in a coffee shop | sad boy with a laptop\n16:33 - quiet | flovry\n18:40 - fireflies | kupla and j'san\n20:37- still waiting for her | flovry\n23:17 - flovry | car radio\n26:04 - sendoff | kupla x philanthrope\n28:23 - barnes blvd. | sleepy story \n\nAmbition\nhttps://twitter.com/ambitionyt\nhttps://www.instagram.com/ambitionyt\nhttps://soundcloud.com/ambition-beats\n\n--- FOLLOW THE ARTISTS ---\n\n🎨 Artwork by thebirdfox\nhttps://www.artstation.com/artwork/QoJxd\nhttps://www.instagram.com/thebirdfox\nhttps://twitter.com/thebirdfox\n\nthrough & through\nhttps://soundcloud.com/through-and-through\nhttps://open.spotify.com/artist/5KnnO1gTaru3vtpr8cn8Im\n\nsky.high\nhttps://soundcloud.com/skyhighbeatss\nhttps://open.spotify.com/artist/7sGZqnvQxV7qbqF9xbGxZq\n\nj'san\nhttps://soundcloud.com/iamjsan\nhttps://open.spotify.com/artist/5iMUho98faEp2w6j5p44PH\n\nkupla\nhttps://soundcloud.com/kuplasound\nhttps://open.spotify.com/artist/7daSp9zXk1dmqNxwKFkL35\n\nmiscél\nhttps://soundcloud.com/miscelbeets\nhttps://open.spotify.com/artist/5P8zM1rnE2owF1M5HzAuM5?si=gb6LTc6HTmOYPoFdnHJuMg\n\nflovry\nhttps://soundcloud.com/flovry\nhttps://open.spotify.com/artist/2pLu3Ut2C3RviYZ3xUanBs?si=y-2gbJIqQpm-LxDdGJaJbA\n\nsad boy with a laptop\nhttps://soundcloud.com/sadboywithalaptop\nhttps://open.spotify.com/artist/55ZGP7wiI7sIfU36CTeBzT\n\nphilanthrope\nhttps://soundcloud.com/philanthrope1\nhttps://open.spotify.com/artist/13ACz7DIictCpSYGglNTHs\n\nbarnes blvd.\nhttps://soundcloud.com/barnesblvd\nhttps://open.spotify.com/artist/3ZolQduZ88Nc3ZZlQEcNMB?si=164-ltk_T_yoCWvY72zYSw",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/78mYkbfsXRM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/78mYkbfsXRM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/78mYkbfsXRM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/78mYkbfsXRM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/78mYkbfsXRM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "78mYkbfsXRM"
        }
      },
      "contentDetails": {
        "videoId": "78mYkbfsXRM",
        "videoPublishedAt": "2019-06-13T21:01:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "G9lKGtvEMKMYmdIo3t4Htarefvg",
      "id": "UkRRTVZZWnFtaXI1eGwwLnRnSTZQakVxME84",
      "snippet": {
        "publishedAt": "2019-05-23T13:55:21Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "midnight aura. [lofi / jazzhop / chill mix]",
        "description": "🌃 for those serene moments at the end of a long day\n\n🎧 Listen to the mix on Spotify https://spoti.fi/2HzhsIL\n\n🎨 Want to download the Audio & Art in this mix? You can!\nJoin us on Patreon for this & more https://patreon.com/thejazzhopcafe\n\n01 00:00 miscél - When You Left\n02 02:44 Jay-Lounge & Jordy Chandra - Puddles\n*03 06:10 hoogway - soulful eyes\n04 09:08 Jordy Chandra - Reminiscing Night\n05 12:40 WYS - Have A Beer\n06 15:38 lofty - locked away (ft. imfinenow)\n07 17:08 Jordy Chandra - Talking to You On a Rain Day\n08 19:36 biosphere - when in rome\n*09 22:00 Nohone - Nothing But A Dream\n10 24:46 BeyondChivalry - r e l a x i n g\n11 26:48 bace - the train (where i met you)\n*12 29:56 Dragon Roots - October\n13 33:00 Styn, Sebastian Kamae & Sleepermane - Bonsai\n14 35:26 Chef Boy RJ - Moss Garden\n15 37:36 Poik Lounge - Feeling Ocean\n\nTracks marked with an '*' are official releases from\nThe Jazz Hop Café Records (https://jazzhopcafe.bandcamp.com)\n\n☕ Follow The Jazz Hop Café on:\n• YouTube - https://youtube.com/thejazzhopcafe\n• Soundcloud - https://soundcloud.com/jazzhopcafe\n• Spotify - https://open.spotify.com/user/thejazzhopcafe\n• Bandcamp - http://jazzhopcafe.bandcamp.com\n• Facebook - https://facebook.com/jazzhopcafe\n• Twitter - http://twitter.com/jazzhopcafe\n\nDesign By ► Nuša Štiglic\n• https://www.instagram.com/ginkgo.whale\n• https://ginkgowhale.com\n\nFollow ► The Artists\n• miscél - https://soundcloud.com/miscelbeets\n• Jay-Lounge - https://soundcloud.com/jay-lounge\n• Jordy Chandra - https://soundcloud.com/jordychandra\n• hoogway - https://fanlink.to/acupoflofi2 & https://soundcloud.com/hoogway\n• WYS - https://soundcloud.com/wyslofi\n• lofty - https://soundcloud.com/loftylofi\n• imfinenow - https://soundcloud.com/imfinenow\n• biosphere - https://soundcloud.com/officialbiosphere\n• Nohone - https://fanlink.to/acupoflofi2 & https://soundcloud.com/nohone\n• BeyondChivalry - https://soundcloud.com/beyondchivalrybeats\n• bace - https://soundcloud.com/thisisbace\n• Dragon Roots - https://fanlink.to/dragonroots & https://soundcloud.com/dragonroot\n• Styn - https://soundcloud.com/stijn-schrijber\n• Sebastian Kamae - https://soundcloud.com/sebastiankamae\n• Sleepermane - https://soundcloud.com/sleepermane\n• Chef Boy RJ - https://soundcloud.com/chefboyrj\n• Poik Lounge - https://soundcloud.com/poiklounge\n\n👕 Grab some Merchandise at\nhttp://thejazzhopcafe.bigcartel.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tgI6PjEq0O8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tgI6PjEq0O8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tgI6PjEq0O8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tgI6PjEq0O8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tgI6PjEq0O8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tgI6PjEq0O8"
        }
      },
      "contentDetails": {
        "videoId": "tgI6PjEq0O8",
        "videoPublishedAt": "2019-05-23T13:55:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ukYbG9QsIQkAU-Ain_IJq713N6U",
      "id": "UkRRTVZZWnFtaXI1eGwwLm9KbkY1VnhUTzVn",
      "snippet": {
        "publishedAt": "2017-06-22T23:20:40Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "C H I L L V I B E S | Chill & aesthetic music playlist",
        "description": "Instagram @Eymmusic\n\nPart 2 https://www.youtube.com/watch?v=74zjW0Bzptc&t=27s\n\n1. ♫Music By♫\n●Kronicle - Chill Noons - https://youtu.be/-H3AYj7-pGw\n●Soundcloud - https://soundcloud.com/the-chemist-10\n\n2.♫Music By♫\n●Kronicle - Cool Blue Light - https://youtu.be/Nhjys4CUuTY\n●Soundcloud - https://soundcloud.com/the-chemist-10\n\n3.♫Music By♫\n●Jeff Kaale - Chimes - https://youtu.be/gJ3-jPFT1aE\n●Facebook - https://www.facebook.com/Jeffkaale/\n●Twitter - https://twitter.com/jeff_kaale\n●Soundcloud - https://soundcloud.com/jeff-kaale\n\n4.♫Music By♫\n●Kronicle - Wake Up - https://youtu.be/uelDnzmdmb8\n●Soundcloud - https://soundcloud.com/the-chemist-10\n\n5.♫Music By♫\n●DJ Quads - Living In Stereo https://youtu.be/jxxNegsEk_Y\n●Soundcloud - https://soundcloud.com/aka-dj-quads\n●Instagram - https://www.instagram.com/djquads/\n●Twitter - https://twitter.com/DjQuads\n●YouTube - https://www.youtube.com/user/QuadsAKA\n\n6.♫Music By♫\n●Julian Avila - Good times https://youtu.be/5F3CBfgvfVU\n●Twitter - https://twitter.com/avilabeats\n●Soundcloud - https://soundcloud.com/julian_avila\n\n7.♫Music By♫\n●DJ Quads - First Time - https://youtu.be/rPxjWCbi9os\n●Soundcloud - https://soundcloud.com/aka-dj-quads\n●Instagram - https://www.instagram.com/djquads/\n●Twitter - https://twitter.com/DjQuads\n●YouTube - https://www.youtube.com/user/QuadsAKA\n\n8. ♫Music By♫\n●DJ Quads - Just Walking https://youtu.be/6L3-ji7xTp8\n●Soundcloud - https://soundcloud.com/aka-dj-quads\n●Instagram - https://www.instagram.com/djquads/\n●Twitter - https://twitter.com/DjQuads\n●YouTube - https://www.youtube.com/user/QuadsAKA\n\n9.♫Music By♫\n●Julian Avila - The City https://youtu.be/QY4BdHoAUZ8\n●Twitter - https://twitter.com/avilabeats\n●Soundcloud - https://soundcloud.com/julian_avila\n\n10.♫Music By♫\n●KKronicle - So Beautiful - https://youtu.be/Jl4OzRHHfnU\n●Soundcloud - https://soundcloud.com/the-chemist-10\n\n11.♫Music By♫\n●Kronicle - You Already Know - https://youtu.be/eaPq587p0lU\n●Soundcloud - https://soundcloud.com/the-chemist-10\n\n12. ♫Music By♫\n●Joakim Karud - Lets Go Surfing - https://youtu.be/mLjzwZYCbgE\n●Soundcloud - https://soundcloud.com/joakimkarud\n\nI do not own these gifs or songs. Full credit goes to the creators. If you are the creator of any of these and wish for me to remove it,  message me and I will take it out immediatly.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oJnF5VxTO5g/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oJnF5VxTO5g/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oJnF5VxTO5g/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oJnF5VxTO5g/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oJnF5VxTO5g/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oJnF5VxTO5g"
        }
      },
      "contentDetails": {
        "videoId": "oJnF5VxTO5g",
        "videoPublishedAt": "2017-06-22T23:20:40Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qtdUmfxEAlDBcBihJGE-ul1By8A",
      "id": "UkRRTVZZWnFtaXI1eGwwLlBKaWVseXdISWpZ",
      "snippet": {
        "publishedAt": "2019-02-23T21:04:04Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "it's going to be okay...",
        "description": "i promise\n\nsubscribe if this helped ✧\n\nall tracks by biosphere\n\nTracklist\n0:00 - summer's end w/ barnes blvd\n1:44 - lazy sunday afternoon\n4:05 - fluffy clouds\n6:04 - if only you told me earlier\n9:01 - when in rome\n11:35 - broken heartstrings\n13:36 - everywhere and nowhere \n16:46 - requiem for the dead\n19:50 - waltz to the end of time \n23:01 - ghost among the lanterns\n25:19 - hopefully one day\n27:33 -  flowers that bloom when shaken\n29:45 - midnight train\n31:17 -  expectations \n34:03 - aria for our dreams\n\nListen to this on Spotify!!!\nhttps://open.spotify.com/album/0lboo86GMncYmD6CzMNtRT?si=Bdsifrl3QvKDAItJX8uwug\n\nBuy on Bandcamp\nhttps://biospheremusic.bandcamp.com/album/snapshot-full-album\n\nbiosphere\nhttps://soundcloud.com/officialbiosphere\nhttps://open.spotify.com/artist/6sa0lNcq7YdXNnQKZHFb0D\nhttps://twitter.com/_biosphere_\n\nAmbition \nhttps://www.instagram.com/ambitionyt\nhttps://twitter.com/ambitionyt\nhttps://soundcloud.com/ambition-beats\n\nSpotify Playlist\nhttps://open.spotify.com/user/ambition-music?si=G98mmDmGTl6YThUJqmhoYA",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PJielywHIjY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PJielywHIjY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PJielywHIjY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PJielywHIjY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PJielywHIjY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PJielywHIjY"
        }
      },
      "contentDetails": {
        "videoId": "PJielywHIjY",
        "videoPublishedAt": "2019-02-23T21:04:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "57FBe9NEBQUpYQSfTwtWwIkDRxU",
      "id": "UkRRTVZZWnFtaXI1eGwwLmVTSDdRU3praFFn",
      "snippet": {
        "publishedAt": "2018-04-21T21:03:42Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "cute songs to help you cope with depression",
        "description": "cute mixes playlist 💕\nhttps://www.youtube.com/watch?v=eSH7QSzkhQg&list=PLBML8SXyfQ6fJ_GJfCh9c2E6lIdYy3LIl\n\nSubscribe if you enjoyed!\n\nall of this amazing music is by frad ^-^\n\nTracklist:\n0:00 - first date\n2:53 - the girl i have a crush on\n5:11 - 喫茶店\n8:37 - while you were away\n\nListen to this mix on Spotify!\nhttps://open.spotify.com/user/ambition-music/playlist/3hW2dsaMlIAf9hsDfbjnwx?si=KIEGA2O-RhqJdZpQdPamvg\n\nFollow Frad\n• https://soundcloud.com/fradical\n• https://open.spotify.com/artist/1XLYJ9VzlgEpBdlkC4MhOL?si=wmIbqrIDQLSXA3u-rjHl7A\n• https://frad.bandcamp.com\n• https://twitter.com/im_frad\n\nAmbition \n• https://twitter.com/ambitionyt\n• https://www.instagram.com/ambitionyt\n• https://www.twitch.tv/ambitionyoutube\n• https://soundcloud.com/ambition-beats\n\nArtwork by pfeffersteak\n• http://pfeffersteak.tumblr.com/image/139740376381\n• http://pfeffersteak.tumblr.com\n• https://twitter.com/pfeffersteak_",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eSH7QSzkhQg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eSH7QSzkhQg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eSH7QSzkhQg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eSH7QSzkhQg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eSH7QSzkhQg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eSH7QSzkhQg"
        }
      },
      "contentDetails": {
        "videoId": "eSH7QSzkhQg",
        "videoPublishedAt": "2018-04-21T21:03:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1N14taizkF18ufCCiAIZvLCWiNY",
      "id": "UkRRTVZZWnFtaXI1eGwwLkVKZXc4TXZnYXUw",
      "snippet": {
        "publishedAt": "2018-09-26T21:23:37Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "That 2 A.M. Fresh Air",
        "description": "A lofi mix for late nights & early mornings...\n🔴Visit 24/7 Livestream 1: https://www.youtube.com/watch?v=ZYMuB9y549s\n⚫Visit 24/7 Livestream 2: https://www.youtube.com/watch?v=QPY3u5mhwuo\n🔵Visit 24/7 Livestream 3 (no lyrics): https://www.youtube.com/watch?v=YKSp3bRYEkg\n\n🎬 Are you a Youtuber? you need TubeBuddy, you can use it to find out analytics of videos and recommended tags giving you an edge over the competition - Find it here! : https://www.tubebuddy.com/HomeworkRadio\n\nIt's easy to join the Homework Radio club and best of all its FREE! - Just click SUBSCRIBE or the little me in the bottom right of the video! \n➡More music on my channel, feel free to come and take a look! \nhttps://www.youtube.com/channel/UCoQ_...\n\n(Slightly out of order - around 2 mins - will fix soon, Sorry!)Tracks: \n00:01 1. Bad Season - Flower\n02:36 2. baechulgi - lost\n04:27 3. Babyotter - Jus Chillin\n06:59 4. Chiru Beats - r u ok\n08:23 5. Grenn - Busy\n11:19 6. Grenn - my heart is still connected to my body\n13:31 7. isko - 7:06\n17:00 8. jhove - Rainfall\n19:12 9. Jon Presstone - When I wake up and you're not there\n21:41 10.\n24:03 11. omar - journey\n26:23 12. ProtoCall - Cicada\n28:12 13. setawave - amani usiku\n30:31 15. STATIC - I have left\n32:06 16. STATIC - Rainy day regret\n33:50 17. Sunlight-91 - Atmosfere\n35:43 18. Sunlight-91 - carps waltz\n37:37 19. tired - wow\n39:55 20. tzelun - searching\n42:06 21. tzelun - without reason\n45:00 22. vanillachill. - change\n47:48 23. Wolfgang von Goth - Lies\n50:00 24. Xii - dusk\n🔁Repeat\n \nArtwork: Wren @sleeprealms\nhttp://sleeprealms.tumblr.com/\n\nIf you enjoyed this video be sure to 👍 & Subscribe!\nComments are welcome!\nThere's nothing that makes me happier than creating videos for you to enjoy. \n\nYoutube Please read this:\n✓ This video upload is an agreed collaboration between Homework Radio, the selected music and visual artist/s to produce a completely unique piece of media. Therefor it is original content and cannot be classed as \"Duplication, Reused and/or non-original content\". The Homework Radio Youtube channel and its videos serve a practical purpose for the music industry, especially up and coming indie artists. It also serves the purpose of giving artists a platform to promote and share their visual pieces. Homework Radio's uploads are appreciated by the Youtube audience and give's them a location to listen to a vast selection of music while studying. Any and all video cuts, edits and effects are curated and applied by Homework Radio. Should copyrighted media be found within our videos it will not be contested in anyway with the revenue going to the contents owner via Youtube's Content ID feature even when usage is agreed - Homework Radio should be allowed in the YPP\n\n⚠ COPPA Compliance: Homework Radio's content is NOT suitable or intended for children/pre-teens, It's content has been created for young adults & adults ONLY. If you are under 13 and view Homework Radio content you are in breach of Youtube's terms and conditions for usage. Homework Radio's uploads meet COPPA regulations and best practices.\n\n#revision #lofi #chillhop #jazzhop #chill #chillout #chillmusic #studymusic #studybeats #lovemusic #gamingmusic #relaxingradio #homeworkmusic #homework #homework #motivation #revision⚫",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EJew8Mvgau0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EJew8Mvgau0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EJew8Mvgau0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EJew8Mvgau0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EJew8Mvgau0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EJew8Mvgau0"
        }
      },
      "contentDetails": {
        "videoId": "EJew8Mvgau0",
        "videoPublishedAt": "2018-09-26T21:23:37Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bQlKa-lAYUIlysAsesy3ykq0qsY",
      "id": "UkRRTVZZWnFtaXI1eGwwLllPSnNLYXRXLVRz",
      "snippet": {
        "publishedAt": "2019-02-17T23:00:02Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "RAINING IN ＯＳＡＫＡ (Lofi HipHop)",
        "description": "RAINING IN ＯＳＡＫＡ\nLo-fi/Vaporwave beats mix\nSleep & Rain mix\n\nListen to another Rain mix here - https://www.youtube.com/watch?v=A7Wo0MnC4z8\n\nTracklist:\n0:00 ＴＲＡ＄Ｈ - Journey\nhttps://soundcloud.com/prod-trash\n\n2:24 BIDØ - last sunshine.\nhttps://soundcloud.com/bidolofi/last-sunshine\n\n3:45 broey. - Paradise\nhttps://soundcloud.com/broeybeats/paradise\n\n6:04 heytheremylove. - bloom.\nhttps://soundcloud.com/htmlove/bloom\n\n7:37 tzelun - see u soon\nhttps://soundcloud.com/tzelun/see-u-soon \n\n9:05 Jay-Lounge - Sleeping City\nhttps://soundcloud.com/jay-lounge/sleeping-city \n\n11:59 WYS - lone\nhttps://soundcloud.com/wyslofi/lone  \n\n15:33 Jay-Lounge - Puddles /w Jordy Chandra\nhttps://soundcloud.com/jay-lounge/puddles-w-jordy-chandra\n\n\nArtwork by Nikolai Lockertsen\nhttps://www.artstation.com/nikolailockertsen\n\n\n💜 bootleg 💜\nsoundcloud - https://soundcloud.com/dabootlegboy\ntwitter - https://twitter.com/thebootlegboy\ninstagram - https://instagram.com/thebootlegboy\nspotify - https://bootlegboy.lnk.to/spotify\n*NEW MERCH* - http://www.thebootlegboy.com/\n\n💕Subscribe for more vibes like this 💕",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YOJsKatW-Ts/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YOJsKatW-Ts/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YOJsKatW-Ts/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YOJsKatW-Ts/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YOJsKatW-Ts/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YOJsKatW-Ts"
        }
      },
      "contentDetails": {
        "videoId": "YOJsKatW-Ts",
        "videoPublishedAt": "2019-02-17T23:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5yskE8gyrNyBqbLD9NAJ29VhX74",
      "id": "UkRRTVZZWnFtaXI1eGwwLmJpQ3R6dnJxcndv",
      "snippet": {
        "publishedAt": "2020-03-02T19:09:18Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "1 hour of chill aesthetic music for creatives- vintage, lofi music playlist",
        "description": "for all the creatives out there, 1 hour of aesthetic music. Genres include vintage and lofi hiphop. perfect for painting, drawing, crafting, writing, studying, or even to sit down, chill, and sip some tea.\nDonate/ Support this Channel: https://paypal.me/MTMEChannel?locale.x=en_US\n\nInstagram: https://www.instagram.com/muzictomyears\nhttps://muzictomyears.com/\n\n\n1. 🎼 Music By \n* Future James - Pure Imagination  https://www.youtube.com/user/Th3Fr3sh3stKiD93\n* SoundCloud: https://m.soundcloud.com/futurejames\n\n2. Lackey Inspired - Blue Boi https://youtu.be/wAukvwLCVbM\n* SoundCloud: https://m.soundcloud.com/lakeyinspired\n3. E66S - Beachside https://www.youtube.com/user/Eggselence\n* SoundCloud- https://m.soundcloud.com/e66s\n\n4. Tomppabeats- The Girl Next Door https://youtu.be/qrh-qC1E790\n* SoundCloud- https://m.soundcloud.com/tomppabeats\n5. Moow- Honey https://moow-beat.bandcamp.com/album/i-cant-tell-you-how-much-it-hurts\n* SoundCloud- https://m.soundcloud.com/moow-beatmaker\n\n6. 90sFlav- Call Me https://youtu.be/F_gKG9XFnkM\n* SoundCloud https://m.soundcloud.com/90sflav\n7. Tomppabeats- You’re Cute https://www.youtube.com/channel/UC7N69N3qveyFMFBhf_qd6DA\n•SoundCloud- https://www.youtube.com/channel/UC7N69N3qveyFMFBhf_qd6DA\n\n8. Tomppabeats- Far Away https://www.youtube.com/channel/UC7N69N3qveyFMFBhf_qd6DA\n•SoundCloud- https://www.youtube.com/channel/UC7N69N3qveyFMFBhf_qd6DA\n9. Dj Quads - It’s near https://www.youtube.com/channel/UCfiSLmZcFmaHpWfbVVYouSA\n* Instagram - https://www.instagram.com/djquads/?hl=es\n\n10. Dj Quads - Www Is A Thing https://www.youtube.com/channel/UCfiSLmZcFmaHpWfbVVYouSA\n* Instagram - https://www.instagram.com/djquads/?hl=es\n11. Tomppabeats- Won’t Leave You https://youtu.be/qrh-qC1E790\n* SoundCloud- https://m.soundcloud.com/tomppabeats\n    12. Tomppabeats- Again https://youtu.be/qrh-qC1E790\n* SoundCloud- https://m.soundcloud.com/tomppabeats",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/biCtzvrqrwo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/biCtzvrqrwo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/biCtzvrqrwo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/biCtzvrqrwo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/biCtzvrqrwo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "biCtzvrqrwo"
        }
      },
      "contentDetails": {
        "videoId": "biCtzvrqrwo",
        "videoPublishedAt": "2020-03-02T19:09:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qH1ZrBj44PMKBqPO6Mzy5oeSBpM",
      "id": "UkRRTVZZWnFtaXI1eGwwLnJBNTZCNEp5VGdJ",
      "snippet": {
        "publishedAt": "2020-03-20T18:27:34Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "chill beats to quarantine to",
        "description": "Stuck at home? Throw these lofi beats in the mix and vibe #withme. Get my Bel-Air hoodie here: http://belairathletics.com\n\n► SUBSCRIBE: https://goo.gl/BUjQW8\n\n► Created by Westbrook Media\nhttp://westbrookinc.com\n\nExecutive Producers: Will Smith, Miguel Melendez\nProducers: Aaron Ferguson, Lukas Kaiser, Key Williams, Brandon Scott Wolf \nIllustrations: Ben Haist (https://instagram.com/bhaist)\nEditor: Jeff Blank\nAsst Editor: Parker Reininga\nInspired By: ChilledCow\n\n► TRACK LIST:\n00:00 | Neopolitin - Guustavv | https://spoti.fi/2vGuy3E\n02:23 | Seaside Swing - Guustavv | https://spoti.fi/3aj8CuA\n04:24 | Solarity - Guustavv | https://spoti.fi/33GUnx7\n06:36 | Air Conditioning - Guustavv | https://spoti.fi/3bmNQdO\n09:01 | Cityscape - Guustavv | https://spoti.fi/2wwHuJX\n11:23 | Clouds Above - Guustavv | https://spoti.fi/39dXhL1\n13:30 | Deprived - Guustavv | https://spoti.fi/3duLqvB\n15:44 | Excursion - Dylan Sitts | https://spoti.fi/2WBE17o\n18:18 | I Play Colors - Justnormal | https://spoti.fi/39hcZoy\n20:37 | Isla Del Sol - Henyao | https://spoti.fi/3bpa131\n22:54 | Lavander Fields - Guustavv | https://spoti.fi/3biVp55\n25:08 | Odyssey - [ocean jams] | https://spoti.fi/3doPwoG\n27:20 | One Time Again - Justnormal | https://spoti.fi/2QGJoOU\n29:08 | Raining Snow - Guustavv | https://spoti.fi/2JaaAl5\n31:20 | Soft Rain - Guustavv | https://spoti.fi/2wlS5aF\n33:39 | Scootaloo - Jobii | https://spoti.fi/2xjZt6m\n35:54 | Elysian - [ocean jams] | https://spoti.fi/2UbYWfR\n38:15 | Float-[oceanjams] | https://spoti.fi/33ESlxq\n40:18 | Gilded - [ocean jams] | https://spoti.fi/2JbbH48\n42:23 | Leaves- [oceanjams] | https://spoti.fi/2UdIStZ\n44:31 | Moln - Osoku | https://spoti.fi/2J9G0Ib\n47:10 | Summer Rain - [ocean jams] | https://spoti.fi/2WE8P7u\n49:19 | Surf - Osoku | https://spoti.fi/2QAE3ZB\n51:46 | Spaced-[oceanjams] | https://spoti.fi/2UbreHf\n54:23 | Neopolitin - Guustavv | https://spoti.fi/2vGuy3E\n56:47 | Seaside Swing - Guustavv | https://spoti.fi/3aj8CuA\n58:47 | Solarity - Guustavv | https://spoti.fi/33GUnx7\n01:00:59 | Air Conditioning - Guustavv | https://spoti.fi/3bmNQdO\n01:03:25 | Cityscape - Guustavv | https://spoti.fi/2wwHuJX\n01:05:46 | Clouds Above - Guustavv | https://spoti.fi/39dXhL1\n01:07:54 | Deprived - Guustavv | https://spoti.fi/3duLqvB\n01:10:08 | Excursion - Dylan Sitts | https://spoti.fi/2WBE17o\n01:12:41 | I Play Colors - Justnormal | https://spoti.fi/39hcZoy\n01:15:01 | Isla Del Sol - Henyao | https://spoti.fi/3bpa131\n01:17:18 | Lavander Fields - Guustavv | https://spoti.fi/3biVp55\n01:19:31 | Odyssey - [ocean jams] | https://spoti.fi/3doPwoG\n01:21:43 | One Time Again - Justnormal | https://spoti.fi/2QGJoOU\n01:23:31 | Raining Snow - Guustavv | https://spoti.fi/2JaaAl5\n01:25:43 | Soft Rain - Guustavv | https://spoti.fi/2wlS5aF\n01:28:02 | Scootaloo - Jobii | https://spoti.fi/2xjZt6m\n\n#ChillBeats #LoFiBeats",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rA56B4JyTgI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rA56B4JyTgI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rA56B4JyTgI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rA56B4JyTgI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rA56B4JyTgI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rA56B4JyTgI"
        }
      },
      "contentDetails": {
        "videoId": "rA56B4JyTgI",
        "videoPublishedAt": "2020-03-20T18:27:34Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bPtbOod4nZSV0nK9fuqM3fyRJo8",
      "id": "UkRRTVZZWnFtaXI1eGwwLlZTVmJBUzNLM2p3",
      "snippet": {
        "publishedAt": "2019-04-03T17:21:12Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "Rain, Coffee and You  [study/sleep/homework music]",
        "description": "● Spotify Playlists :\n                                                     🖤     \nhttps://open.spotify.com/playlist/7LwAj4ZQyjbpVjbFk2LbNZ?si=p7yEJV7ORH-0br2gNslSMw\n\n                                                 ● Dreamy ●  : \n● Spotify : \n→ https://open.spotify.com/user/6qxhced3b0l62lh3fedtbv14y\n● Instagram :\n→ https://www.instagram.com/its_dreamy_yt/\n● Patreon ( Donate Support ) 🙏\n→ https://www.patreon.com/m/its_dreamy\n・・・・・・・・・・・・・・・・・・・・\n❗\n❗ If you are the owner of the rights to this content \nand against its use, please write to me : dre21amy@gmail.com\n\n👁Art by itukai :\n●orig: https://i.pinimg.com/originals/63/6c/e3/636ce39d24973979f032696fe1eebf21.jpg\n\nThe background artist:\nTwitter - https://twitter.com/itukaki\nInstagram - https://www.instagram.com/ituka_e/\nTumblr - https://itukai.tumblr.com/\nPixiv - https://www.pixiv.net/member.php?id=7457683\n\n●The cat animation:\nhttps://i.pinimg.com/originals/43/95/44/439544054d53ba59998575bbf129a5ae.gif\n\n⭕Tracklist: \n\n00:00 tony stocker - introspection\n           https://soundcloud.com/tonymakesmusic/introspection\n\n03:15 A l e x - ghosts\n          https://soundcloud.com/mah-759707922/a-l-e-x-ghosts\n                                       Alex\n          https://soundcloud.com/worsethanthis\n\n04:43 chrle - hazed\n           https://soundcloud.com/chrlebeats/hazed\n\n06:20 kael - her voice is soft as summer rain\n          https://soundcloud.com/mattlabial/her-voice-is-soft-as-summer-rain\n\n08:58 Waefr - Ｐｌｅａｓａｎｔ Ｒａｉｎ\n           https://soundcloud.com/kalon13/rainy-days-1\n\n11:12 Auxtin Nox - Drifting\n           https://soundcloud.com/auxtinnox/free-drifting-lofichill-hop-instrumental\n\n13:37 lofty - caught feelings\n           https://soundcloud.com/bylofty/tracks\n\n15:36 Willlbone - Dusty\n           https://soundcloud.com/ivan-wilbourn/dusty\n\n17:25 falling beehind - last summer\n           https://soundcloud.com/falling_beehind/last-summer\n \n19:58 k a s t o r - Late Saturday Night\n           https://soundcloud.com/kastor-beats/late-saturday-night\n\n22:09 Ian -  Minha Tarde\n           https://soundcloud.com/ian-vasco/minha-tarde\n\n24:06 BigTurmoil - Sorrow.\n           https://soundcloud.com/bigturmoil/sorrow\n\n26:06 HBS - Ghaba Sad Chill beat\n・・・・・・・・・・・・・・・・・・・・\n❗ Any claims of copyright infringement :\n✉ dre21amy@gmail.com\n・・・・・・・・・・・・・・・・・・・・\n📝 Submission :\nMusic     https://soundcloud.com/its_dreamy\nArt           dre21amy@gmail.com\n・・・・・・・・・・・・・・・・・・・・\n#Dreamy#lofi",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VSVbAS3K3jw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VSVbAS3K3jw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VSVbAS3K3jw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VSVbAS3K3jw/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VSVbAS3K3jw"
        }
      },
      "contentDetails": {
        "videoId": "VSVbAS3K3jw",
        "videoPublishedAt": "2019-04-03T17:21:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IUAsFF2eKatvbSpDBWLP06xx9YM",
      "id": "UkRRTVZZWnFtaXI1eGwwLlc0emxMMmhjQ2U0",
      "snippet": {
        "publishedAt": "2018-01-27T20:07:22Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "Keep your heart blooming!| Cute Lo-Fi mix|",
        "description": "00:05 j'san.-hello, it's me\n02:12 🌸the girl next door🌸-letters to ana\n04:21 Icecreamcult-Solace (ft. n o j o n)\n07:43 ocha-star ☆ city\n10:27 ocha-cola\n13:07 n o j o n-call me when u get home\n14:53 burbank-let's try again\n17:29 vRochi-watching the rain is my favorite pastime. (vRochi x NVTHVN)\n20:21 Knight Ali-Daydreaming\n22:28 zzz-are you awake?\n24:10 Alk-Kind Of Restless (ft. ivri)\n25:51 fcj-sunny side cutie\n27:57 Winter Foe-A short consolation w/ park bird\n30:44 Winter Foe-Searching\n-Repeat-\n\nGif:https://78.media.tumblr.com/8497c2efab8db4b61bc07e7a08938035/tumblr_oqxnmkbMF01v1yxojo1_500.gif\n\n j'san:\nsoundcloud:https://soundcloud.com/iamjsan\nbandcamp:https://iamjsan.bandcamp.com/releases\nspotify:https://open.spotify.com/artist/5iMUho98faEp2w6j5p44PH\ntwitter:https://twitter.com/_iamjsan\ninstagram:https://www.instagram.com/_iamjsan/\n\n🌸the girl next door🌸:\nsoundcloud:https://soundcloud.com/imyourlovergirl\nyoutube:https://www.youtube.com/channel/UC3RcPpaNhyo9E4TeBfOGxhg\ninstagram:https://www.instagram.com/imyourlovergirlnextdoor/?hl=en\ntwitter:https://twitter.com/dynoffical\n\nIcecreamcult:\nsoundcloud:https://soundcloud.com/icecreamcult\ninstagram:https://www.instagram.com/icecreamcult/\nbandcamp:https://icecreamcult.bandcamp.com/releases\nspotify:https://open.spotify.com/artist/1PfzY02jCaEWxzkxfjhHvk\nyoutube:https://www.youtube.com/channel/UCTQvBxJduJocnuAyCsNaCLg/videos?view_as=subscriber\nitunes:https://itunes.apple.com/us/artist/ice-cream-cult/id1245542047\ntwitter:https://twitter.com/icecreamcultyum\n\nocha:\nsoundcloud:https://soundcloud.com/ochakun\ntwitter:https://twitter.com/ochamusic\nbandcamp:https://ochakun.bandcamp.com/releases\nyoutube:https://www.youtube.com/c/ochamusic\nspotify:https://open.spotify.com/artist/2XXkRPi7NhXPf4vOPIG9zh\nitunes:https://itunes.apple.com/us/artist/ocha/875929681\n\nnojon:\nsoundcloud:https://soundcloud.com/nojon1\nbandcamp:https://nojon.bandcamp.com/\nfacebook:https://www.facebook.com/1nojon/\ntwitter:https://twitter.com/nojonmusic\ninstagram:https://www.instagram.com/nojonmusic/\n\nburbank:\nsoundcloud:https://soundcloud.com/danielburbank\ninstagram:https://www.instagram.com/daniel.burbank/\nspotify:https://open.spotify.com/artist/4iHB5bp1wwN5qTbVPaBykO\ntwitter:https://twitter.com/YUNGCOZYBURBANK\n\nvRochi  \nsoundcloud:https://soundcloud.com/j_a_s_p_e_r\ndiscord:https://discordapp.com/invite/kcQkGeU\ntwitter:https://twitter.com/iam_vRochi\ninstagram:https://www.instagram.com/_.vrochi/\nbandcamp:https://vrochi.bandcamp.com/\n\nNVTHVN\nsoundcloud:https://soundcloud.com/nthnll\nspotify:https://open.spotify.com/artist/2BqGcPMYKUBDhza7h0fqFq\nbandcamp:https://nvthvn.bandcamp.com/releases\ntwitter:https://twitter.com/nvthvnll\nyoutube:https://www.youtube.com/channel/UCW6XQDdczUkt7BqqeY2_W2Q\nDonate:https://www.paypal.me/NVTHVN\n\nKnight Ali\nsoundcloud:https://soundcloud.com/knightali\nyoutube:https://www.youtube.com/channel/UCrI6h_w-U0eqktEvI1x8F3Q\ninstagram:https://www.instagram.com/knightali4u/?hl=en\ntwitter:https://twitter.com/AliKnightali\nfacebook:https://www.facebook.com/Knightalibeats/\n\nzzz\nsoundcloud:https://soundcloud.com/itszzzbeatz\nfacebook:https://www.facebook.com/zzzbeatz/?ref=settings\ninstagram:https://www.instagram.com/zzzbeatz/\n\n\n\nDisclaimer*\nWe do not own ANY rights to any of the music or footage we share, if you have a problem with our  way of promotion, shoot us an email and we will take the video down if needed.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/W4zlL2hcCe4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/W4zlL2hcCe4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/W4zlL2hcCe4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/W4zlL2hcCe4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/W4zlL2hcCe4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "W4zlL2hcCe4"
        }
      },
      "contentDetails": {
        "videoId": "W4zlL2hcCe4",
        "videoPublishedAt": "2018-01-27T20:07:22Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "rflJjWdshgt8VeUI7BFOfWRGJ5U",
      "id": "UkRRTVZZWnFtaXI1eGwwLkFFSWlQTks4QkZF",
      "snippet": {
        "publishedAt": "2019-10-11T06:18:29Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "warm summer afternoons / lofi hip hop radio - beats to relax/study to",
        "description": "👋 I hope you have a good time and enjoy the music and chill :)\n\n● 🎧Got Spotify ? Listen to the playlists here: https://open.spotify.com/user/31mextqbkvzdhpm3gennm6hozumi?si=ELCbvYEMTzK74UzPH-CttA\n\nThis channel is not monetised somehow! please help me to grow this channel\n●  Patreon ( Donate Support ) 🙏\n→ https://www.patreon.com/h5g1\n \n🌎 Follow H5G1 everywhere:\n →  https://campsite.bio/h5g1\n \n📂Submit : https://docs.google.com/forms/d/1kRsXVqQlEquAZT8PN9GZTkv2nVslEMUUbZZHHB7daok/viewform?edit_requested=true\n \nPlaylist by : 130mood(https://www.youtube.com/channel/UCpNIgX7Xxi2Gc4dxzg6cqBw)\n\nTracklist :\n00:00 Autumn Daze - Charlie too human\n02:34 / 03:20 / 05:33 / 06:42 / 08:03 ponds. (winter tape) - luv. ly\n09:00 ikigai - idealism\n11:30 Game over - Orca Vibes\n13:18 Summer's Day [v1] - Jinsang\n16:00 A love letter to a stranger - liam tree\n17:53 when im with you - sad boy with a laptop\n20:21 Dialogue - DeKobe\n23:38 Back then - lovelord\n26:15 CUPID - dvdkm\n29:06 (t)suki - sofy\n31:40 orchidbae - All i can say is Thank You - [japanse characters]\n34:47 sailing on my own - Juxtin (prod. Ayeon)\n\nDisclaimer :The purpose of this video is just to relax soul not body.\n                     \nAll the videos, songs, images, and graphics used in the videos belong \nto their respective owners and I or this channel does not claim any right \nover them therefore, please do NOT contact me to ask for song/visual \npermissions.\n\nYoutube Please read this:\nThis video upload is an agreed collaboration between H5G1, \nthe selected music and visual artist/s to produce a completely unique piece\n of media. Therefor it is original content and cannot be classed \nas \"Duplication, Reused and/or non-original content\". \nThe H5G1 Youtube channel and its videos serve a practical purpose \nfor the music industry, especially up and \ncoming Lofi hip hop artists. It also serves the purpose of giving artists \na platform to promote and share their visual pieces. H5G1's\nuploads are appreciated by the Youtube audience and give's them a location \nto listen to a vast selection of music while studying/relaxing. Any and all \nvideo cuts, edits and effects are curated and applied by H5G1. \nShould copyrighted media be found within our videos it will not be \ncontested in anyway with the revenue going to the contents owner via \nYoutube's Content ID feature even when usage is agreed - \nH5G1 should be allowed in the YPP.\n\n\n⚠ COPPA Compliance: H5G1's content is NOT suitable or \nintended for children/pre-teens, It's content has been created for young \nadults & adults ONLY.\nIf you are under 13 and view H5G1's content you are in breach \nof Youtube's terms and conditions for usage. H5G1's uploads \nmeet COPPA regulations and best practices.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AEIiPNK8BFE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AEIiPNK8BFE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AEIiPNK8BFE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AEIiPNK8BFE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AEIiPNK8BFE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AEIiPNK8BFE"
        }
      },
      "contentDetails": {
        "videoId": "AEIiPNK8BFE",
        "videoPublishedAt": "2019-10-11T06:18:29Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "a3OVLQu6d8J9xS-z8cezryDKego",
      "id": "UkRRTVZZWnFtaXI1eGwwLkFMamEzd0FkUXNN",
      "snippet": {
        "publishedAt": "2019-03-29T17:05:00Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "side streets. [lofi / jazz hop / chill beats]",
        "description": "🌂 walking in the rain.\n\n🎨 Want to download the Audio & Art in this mix? You can! \nJoin us on Patreon for this & more https://patreon.com/thejazzhopcafe\n\n01 00:04 lofty - in my head (ft. ayeon)\n02 01:20 Letskey - Delicate\n03 03:56 imfinenow - Bright Night \n04 07:00 lofty - caught feelings\n05 08:58 leafbreeze - Loving You\n06 11:56 Elijah Nang - Icarus\n07 13:48 s. lyre - another log on the fire\n08 16:06 Bamf & GentleBeatz - Peaceful Loneliness\n09 18:04 imfinenow - You And I\n*10 20:28 clay - at the café\n11 23:10 biosphere - aria for our dreams\n12 24:56 BENJAMIN:KEY - Singing In The Rain\n13 27:04 bace - i can't\n14 30:56 Jordy Chandra - Coffee Evening\n15 33:16 Rysid - Rainy Sunday\n\nTracks marked with an '*' are official releases from\nThe Jazz Hop Café Records (https://jazzhopcafe.bandcamp.com)\n\n☕ Follow The Jazz Hop Café on:\n• YouTube - https://youtube.com/thejazzhopcafe\n• Soundcloud - https://soundcloud.com/jazzhopcafe\n• Spotify - https://open.spotify.com/user/thejazzhopcafe\n• Bandcamp - http://jazzhopcafe.bandcamp.com\n• Facebook - https://facebook.com/jazzhopcafe\n• Twitter - http://twitter.com/jazzhopcafe\n\n🎧 Join us on Spotify for endless music\nopen.spotify.com/user/thejazzhopcafe\n\nFollow ► The Artists\n• lofty - https://collegemusic.lnk.to/hideaway & https://soundcloud.com/bylofty\n• ayeon - https://collegemusic.lnk.to/hideaway & https://soundcloud.com/ayeonboy\n• Letskey - https://aruarianrecords.bandcamp.com/album/in-my-mind & https://soundcloud.com/letskey\n• imfinenow - https://soundcloud.com/imfinenow\n• leafbreeze - https://soundcloud.com/leafbreeze\n• Elijah Nang - https://soundcloud.com/nang-food\n• s. lyre - https://soundcloud.com/s_lyre\n• Bamf - https://soundcloud.com/itsbamf\n• GentleBeatz - https://soundcloud.com/gentle-beatz\n• clay - https://jazzhopcafe.bandcamp.com/album/a-cup-of-lofi-1 & https://soundcloud.com/conativeclay\n• biosphere - https://soundcloud.com/officialbiosphere\n• BENJAMIN:KEY - https://soundcloud.com/benjaminkey\n• bace - https://open.spotify.com/album/6C02KMv7afudt4aeDfNmK9?si=J8iJx4mhQLKbubDtGbG82Q\n• Jordy Chandra - https://soundcloud.com/jordychandra\n• Rysid - https://soundcloud.com/rysidproduction\n\nDesign By ► Matthew Lopz\n• https://matthewlopz.tumblr.com\n• https://www.instagram.com/matthew_lopz\n• https://twitter.com/MatthewLopz\n\n#sidestreets #mix",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ALja3wAdQsM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ALja3wAdQsM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ALja3wAdQsM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ALja3wAdQsM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ALja3wAdQsM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ALja3wAdQsM"
        }
      },
      "contentDetails": {
        "videoId": "ALja3wAdQsM",
        "videoPublishedAt": "2019-03-29T17:05:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qD24an439O_EJEiaW1iI63NWCKA",
      "id": "UkRRTVZZWnFtaXI1eGwwLmN2RXBHall0SmJz",
      "snippet": {
        "publishedAt": "2020-01-23T15:58:48Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "Little astronaut, big dreams. [ lofi hip hop/chill beats ]",
        "description": "☊ Beats to relax/study to from Dreamy ♥\n\n☊    [ Spotify Playlist from Dreamy ]  Some of this tracks :\n\n● https://open.spotify.com/playlist/2CIfr2KNG8eNmC2DLGIRNU?si=4pJouzxHR9SjKsRnNcVLuQ\n\n                                                        ♥ Dreamy ♥  : \n● Spotify : \n→ https://open.spotify.com/user/6qxhced3b0l62lh3fedtbv14y\n● Instagram :\n→ https://www.instagram.com/its_dreamy_yt/\n● Patreon ( Donate Support ) 🙏\n→https://www.patreon.com/m/its_dreamy\n・・・・・・・・・・・・・・・・・・・\n[ ART  ]\n● Illustration: Damian Górny \n   instagram: https://www.instagram.com/damian_gorny/\n\n ♪ [ TRACKLIST ]\n\n00:00 Smyang - psycho lofi ver\n\nhttps://open.spotify.com/track/3NJ5p2Jv3ujWNfaMjxs8mZ?si=1g1HuJ5ASumg4osT803aVg\nhttps://soundcloud.com/smyang-piano/psycho-lofi-ver\n\n02:17 im.fine - all you need is time\n\nhttps://open.spotify.com/track/0hlxf5DGjfNG83xIE4H3qq?si=kehzpPH3SMmK2jdXgZGTeg\nhttps://soundcloud.com/yesiamfine/all-you-need-is-time\n\n04:32 Ｎｅｒｏｋ - Nostalgic\n\nhttps://open.spotify.com/track/3eEMhwDpatJePd6FYfBlQj?si=F6cET1uFQAi7O9A_cRxqiA\nhttps://soundcloud.com/nerok/nostalgic\n\n07:18 lilac - winter with you\n\nhttps://open.spotify.com/track/59WJAd4LKVgQpldsp9Dz4Y?si=5Jd-EWZ1Tq-_5bUEPLiI9Q\nhttps://soundcloud.com/dearlilac/winter-with-you\n\n09:27 Creative Self - Formless Gift\n\nhttps://open.spotify.com/track/1gO8HmZu76Zqz1VnyKb5nJ?si=3oHcdAOfS2C7I_2_TBkHfw\nhttps://soundcloud.com/creativeselfmusic/formless-gift\n\n11:19 Smyang - January 5th\n\nhttps://open.spotify.com/track/6trGDS0OnLwHkIeiXAKvUq?si=eng9RDwsR2Osm3BnU7Dzsg\nhttps://soundcloud.com/smyang-piano/january-5th\n\n13:40 Creative Self - Crickets In My Backyard\n\nhttps://open.spotify.com/track/5jEWGbETjSqeDhXDglWerS?si=5CY3XqsPRsC3Nho6FuDcWQ\nhttps://soundcloud.com/creativeselfmusic/crickets-in-my-backyard\n\n15:59 chief - restless w/ @martinxsky [ EP \"today\" ]\n\nhttps://open.spotify.com/track/3NeEWtWcSLrTOVQ9Cjzoxf?si=J8ICjqQfShq8uIlSkCpGBQ\nhttps://soundcloud.com/chiefslc/today\n\n18:12 cold glow - heartstrings\n\nhttps://open.spotify.com/track/3JfpztsKbqcC66DqVKDO7u?si=y9YpKFvjSX6LtF9Boi5HiA\nhttps://soundcloud.com/coldglow/heartstrings\n\n21:07 aarigod - Dream Sign\n\nhttps://open.spotify.com/track/6W98Togm64u1LIaO5xBqvh?si=Hu0UKXVgQoCOg9yW6XEdDg\nhttps://soundcloud.com/aarigod/dream-sign\n\n23:20 Chiccote's Beats - gone \n\nhttps://open.spotify.com/track/4SPG52JzaGQ184lRJDQ6Ep?si=AklHf1gsRVeDJniZqGx9xA\nhttps://soundcloud.com/chiccotesbeats/gone\n\n25:45 BVG - blue lagoon( w/ bert )\n\nhttps://open.spotify.com/track/1MPbrlyfEXHfKaUFHwBowY?si=_FVVzauCSjSxmReRrEp39w\n・・・・・・・・・・・・・・・・・・・・\n❗ Any claims of copyright infringement :\n✉ dre21amy@gmail.com\n・・・・・・・・・・・・・・・・・・・・\n📝 Submission :\nMusic     https://soundcloud.com/its_dreamy\nArt          dre21amy@gmail.com\n・・・・・・・・・・・・・・・・・・・・\n#Dreamy#lofi",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/cvEpGjYtJbs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/cvEpGjYtJbs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/cvEpGjYtJbs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/cvEpGjYtJbs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/cvEpGjYtJbs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "cvEpGjYtJbs"
        }
      },
      "contentDetails": {
        "videoId": "cvEpGjYtJbs",
        "videoPublishedAt": "2020-01-23T15:58:48Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Ts8eFa8I5jn4bm52ztnxznCtsQA",
      "id": "UkRRTVZZWnFtaXI1eGwwLlhLREdaLVZXTE1n",
      "snippet": {
        "publishedAt": "2017-09-04T22:00:01Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "RAINING IN ＴＯＫＹＯ (Lofi HipHop)",
        "description": "RAINING IN ＴＯＫＹＯ\nLo-fi/Vaporwave beats mix\nSleep & Rain mix\n\nif you liked this mix feel free to donate/buy me a pint - http://paypal.me/thebootlegboy\n\nTrack List:\n0:00 ibrahim - a world at peace \nhttps://soundcloud.com/ibr/a-world-at-peace\n\n3:05 〘 E i s u 〙- Elisabeth\nhttps://soundcloud.com/eisubeats/elisabeth\n\n5:46 Jay-Lounge - Alone\nhttps://soundcloud.com/jay-lounge/alone-3\n\n8:51 fixh - where'd u go?\nhttps://soundcloud.com/fixh/whered-u-go\n\n12:50 aidan - let one go\nhttps://soundcloud.com/producedbyaidan/let-one-go\n\n15:11 legalvariety (Jabari) - i miss you so much\nhttps://soundcloud.com/legalsv/i-miss-you-so-much\n\nArtwork by Keebs\nhttps://www.instagram.com/lakeebs/\nhttps://society6.com/product/night-in-shinjuku_print#s6-6938681p4a1v45\n\n💜 bootleg💜\nsoundcloud - https://soundcloud.com/dabootlegboy\ntwitter - https://twitter.com/thebootlegboy\ninstagram - https://instagram.com/thebootlegboy\ndiscord - https://discord.gg/Ch2JUNF\n*NEW MERCH* - https://teespring.com/stores/thebootlegboy\n\n💕Subscribe for more vibes like this💕",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XKDGZ-VWLMg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XKDGZ-VWLMg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XKDGZ-VWLMg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XKDGZ-VWLMg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XKDGZ-VWLMg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XKDGZ-VWLMg"
        }
      },
      "contentDetails": {
        "videoId": "XKDGZ-VWLMg",
        "videoPublishedAt": "2017-09-04T22:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "8GiupOsMd0_YoUKBfr2FoSCG_6Q",
      "id": "UkRRTVZZWnFtaXI1eGwwLlRzVHRxR0F4dldr",
      "snippet": {
        "publishedAt": "2018-08-04T17:00:01Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "ＭＩＮＥＣＲＡＦＴ　＆　ＣＨＩＬＬ　寛げる",
        "description": "🎼 Feardog's Spotify playlists: https://spoti.fi/2mM0pLC\n\n▬★Subscribe and click the bell icon for more chill hip hop beats ♫♪★▬\n\n★YouTube demonetized my whole channel, you can help a lot by supporting me on Patreon! Even as little as $1 is fine and it keeps me going :) https://www.patreon.com/Feardog ★\n\n►Hey all it's Feardog here and welcome to another video. I bet you didn't expect this one lmao. So this is a lofi hip hop / chillhop mix full of minecraft samples. Minecraft (C418) has amazing (piano) melodies which can be amazing for lofi hip hop. This mix is great for studying, sleeping, relaxing, meditating, gaming etc. I hope you all enjoyed, have a great day/night :)\n\n-----------------------------\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n▬★TRACKLIST★▬\n0:00 Advait - Subwoofer Lullaby (Minecraft)\n3:20 Tyler - Minecraft Sweden Lofi Remix\n8:04 Atlas Eyes - Minecraft - Wet Hands (lofi edit)\n10:26 Haru Pandi - Lost in a meadow\n13:51 citrusgastank - breathing fresh air (C418 - Haggstrom minecraft remix)\n16:00 Làtchi - Minecraft Lofi Remix\n19:52 Pauerful - C418 - Excuse (Pauerful Remix)\n22:12 Advait - Wet hands (minecraft)\n24:09 rukasu - double press spacebar to fly.\n27:29 ＡＬＳＷＩＮＤ - C418 - shuniji (Lo-fi Remix)\n30:51 Noopsel - chirp (LoFi Version) (feat. C418)\n\n▬★SUPPORT THE ARTISTS★▬\nAdvait: https://soundcloud.com/advait-9\nTyler: https://www.youtube.com/channel/UClMs4MbAJ6WUgn_m8jujYsw\nAtlas Eyes: https://soundcloud.com/atlaseyes\nHaru Pandi: https://soundcloud.com/harupandi\ncitrusgastank: https://soundcloud.com/citrusgastank\nLàtchi: https://soundcloud.com/g1nkg0\nPauerful: https://soundcloud.com/realpauerful\nrukasu: https://soundcloud.com/rukasumusic\nＡＬＳＷＩＮＤ: https://soundcloud.com/user-234357572\nNoopsel: https://soundcloud.com/user-955211176\n\n\n☯Support me on Patreon: https://www.patreon.com/Feardog\n☯Discord Server: https://discord.gg/N3f5Nwc\n.\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n▬★ Social Media ★▬\n►DISCORD SERVER: https://discord.gg/N3f5Nwc\n►CHANNEL: http://youtube.com/FeardogMusic\n►SOUNDCLOUD: https://soundcloud.com/feardogmusic\n►BUSINESS E-MAIL: feardog.business@gmail.com\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n▬MY CHANNEL INFO▬\nMy channel is the best place to find amazing chill/jazzy hip hop songs and mixes on YouTube.\nGenres: lo-fi hip hop / jazzhop / chillhop / vaporwave, krnb / khiphop / korean indie\nFeedback is always appreciated!\nConsider subscribing to my channel and hitting the bell icon, you won't regret it!\n\n▬★HELP ME OUT★▬\n\nYOU can help by...\n\n● Putting my channel in your youtube channel sub box\n● Remember to rate my videos as you watch them as it helps greatly\n● Share a video you enjoyed on your Facebook wall or your Twitter account\n● Help my channel get discovered via word of mouth by telling friends & family\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nIf you enjoyed this video be sure to THUMBS UP & FAVOURITE!\nI also LOVE your COMMENTS!\nYou keep watching my videos and I will keep making them :)\n\n📷Artwork/picture from:\nhttp://iconbug.com/detail/icon/8236/minecraft-grass/\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n\n►ＭＩＮＥＣＲＡＦＴ　＆　ＣＨＩＬＬ　寛げる\n►ＭＩＮＥＣＲＡＦＴ　＆　ＣＨＩＬＬ　寛げる\n►ＭＩＮＥＣＲＡＦＴ　＆　ＣＨＩＬＬ　寛げる\n\n♦♦♦\n#Feardog #lofi #minecraft",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TsTtqGAxvWk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TsTtqGAxvWk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TsTtqGAxvWk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TsTtqGAxvWk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TsTtqGAxvWk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TsTtqGAxvWk"
        }
      },
      "contentDetails": {
        "videoId": "TsTtqGAxvWk",
        "videoPublishedAt": "2018-08-04T17:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6vA1Qf_ESfr0_C8Kgs3Q4RlS1GM",
      "id": "UkRRTVZZWnFtaXI1eGwwLmVTalNvektMX0VB",
      "snippet": {
        "publishedAt": "2017-07-24T13:46:10Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "lonely day - lofi hiphop mix",
        "description": "lonely day - lofi hip hop mix\nsummer...lofi hiphop mix: https://youtu.be/dh3JmHHbbmU\nHello monday - lofi/jazz hip hop mix: https://youtu.be/hkGnoAOK2S0\n\n[Tracklist]\n0:00 RUDE - Eternal Youth\n3:25 nymano - ill never know _ green tea\n7:16 nymano - back to reality\n8:56 ＩＴ'Ｓ ＯＫ - I like u\n11:45 idealism - phosphenes\n14:37 Idealism - Lonely\n16:36 KUPLA - I will wait for you to come home\n18:45 elijah who - love u hate me\n20:40 tomppabeats - the girl next door\n21:30 sweetbn _ - row flip\n22:40 Cold - existence\n24:55 Save Me - I eat plants for a living\n26:20 MVDE - LUV. (video in description)\n29:05 Bassti - im sad (Rebecka Reinhard - Pisces Bassti Remix)\n31:30 Jasperino - Delta Waves\n32:45 Kendall Miles - Light Year Love (w_ Somar)\n34:43 Lxced x Dj Swrv\n35:49 squid ethics - alone\n37:58 idealism - a moment of silence\n40:09 bitykradne - stillness\n\nSupport Artist\n\nRUDE\nhttps://soundcloud.com/itsrudeboy\n\nUnited Common Records\nhttps://www.youtube.com/channel/UCqG5ReA86eEpN9knUuudBfw\nhttps://soundcloud.com/unitedcommonrecords\nhttps://unitedcommonrecords.com/home\n\nKendall Miles\nhttps://soundcloud.com/kendallmilesmusic\nhttps://kendallmiles.bandcamp.com/\nhttps://twitter.com/kendailguitar\n\njasperino\nhttps://soundcloud.com/jsprno\nhttps://www.facebook.com/jsprno\n\n➤ Cloudx Music\nTwitter » https://goo.gl/UWBApx\nFacebook » https://goo.gl/kWD2id\nSoundcloud » https://goo.gl/fHgfno\n\nPic:https://images7.alphacoders.com/792/792632.png\nArtwork by けみ猫\n-----------------------------------------------------------------------------------\n🔔 CONTACT US : cloudxmusic.contact@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eSjSozKL_EA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eSjSozKL_EA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eSjSozKL_EA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eSjSozKL_EA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eSjSozKL_EA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eSjSozKL_EA"
        }
      },
      "contentDetails": {
        "videoId": "eSjSozKL_EA",
        "videoPublishedAt": "2017-07-24T13:46:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Nmf--eD4HXq2ERufYe0JnDVAEZc",
      "id": "UkRRTVZZWnFtaXI1eGwwLmJReklRYTVZS3Z3",
      "snippet": {
        "publishedAt": "2019-05-22T16:48:43Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "Chill Study Beats 6  • instrumental hip hop mix [2019]",
        "description": "🐾 Listen to the mix on Spotify: https://open.spotify.com/track/0oZAxySv2ClJfWK8DyMx1i?si=AFX3NPnqTMih0snCfpg-Vg\n\n🎶 Listen to Chillhop on Spotify & Apple Music\n・ https://chillhop.lnk.to/sptfySi (Spotify)\n・ https://chillhop.lnk.to/applemusic (Apple Music)\n\n🐾Hey folks, here’s our latest Chill Study Beats mix, made out of one hour of smooth instrumentals beats. Cheers to all the artists in this list and good luck with studying for your exams!\n\n 🎧 Tracklist (* = Unreleased)\n00:00 mommy x Philanthrope - thinking of you w/Kyle Mc Evoy\n*02:11 leavv - driftwood\n04:54 blnkspc_ - quietly\n07:32 Toonorth - Effervescent\n09:49 Tom Doolie - Lemon\n*11:37 middle school - wannabe w/Aso\n13:58 psalm trees - Clocks Forward w/Guillaume Muschalle\n16:20 less.people - what will you do\n19:26 Ian Ewing - LuvnYou\n22:38 saib. - rainforest\n28:02 chief. - yesterday\n30:36 sleepy fish - i wish it would never stop snowing\n33:52 mommy - polarbeer\n*36:36 middle school - do you want to pretend we’re in love sometime\n38:54 tesk - burnmymind\n41:24 City Girl - Eowyn\n44:23 Moose Dawa - Remember\n46:26 Swørn - Far Away\n*48:12 sleepy fish - forgot it was monday\n50:46 fantompower - in a new space\n53:16 Smoke Trees - takondwa\n55:22 Deeb - Swiss\n\n\n🙌 Follow the artists\nmommy » https://soundcloud.com/beatsbymommy\nPhilanthrope » https://soundcloud.com/philanthrope1\nKyle McEvoy » https://soundcloud.com/kylemcevoymusic\nleavv » https://soundcloud.com/leavv\nB-Side » https://soundcloud.com/b-side-production\nTesk » https://soundcloud.com/tesk\nToonorth » https://soundcloud.com/countbazzy-2\nTom Doolie » https://soundcloud.com/tomdoolieofficial\nAso » https://soundcloud.com/aricogle\nMiddle School » https://soundcloud.com/yungmiddleschool\nPsalm Trees » https://soundcloud.com/psalm-trees\nGuillaume Muschalle » https://soundcloud.com/guillaume-muschalle\nless.people » https://soundcloud.com/lesspeople\nIan Ewing » https://soundcloud.com/ianewingmke\nsaib » https://soundcloud.com/saib_eats\nchief. » https://soundcloud.com/chiefslc\nSleepy Fish » https://soundcloud.com/sleeepyfish\nCity Girl » https://soundcloud.com/citygrl\nMoose Dawa » https://soundcloud.com/moose-dawa\nSwørn » https://soundcloud.com/prodsworn\nfantompower » https://soundcloud.com/fantompower\nSmoke Trees » https://soundcloud.com/smoke_them_trees\ndeeB » https://soundcloud.com/deeb\n\n\n🎨 Animation by Tévy Dubray & Jeoffrey Magellan\n・https://www.tev-art.com/\n・https://www.instagram.com/tevy_dub/\n\n・http://jeoffreymagellan.tumblr.com\n・https://instagram.com/magellan_illustration\n\n\n✔️ Check out our 24/7 livestream\n・ https://live.chillhop.com\n\n🛍Chillhop Webshop\n・ https://shop.chillhop.com\n\n🐾 More Chillhop?\n・ https://chillhop.com/listen\n\n🌎 Website\n・ https://chillhop.com\n\n❔ Use our music in your videos\n・https://chillhop.com/license\n\n🙏 The Chillhop Community\n・ https://discord.gg/chillhop\n・ https://reddit.com/r/chillhop\n・ https://www.facebook.com/groups/1561371024098016\n\n#lofihiphopmix #beatstostudyto #chillhopmix",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bQzIQa5YKvw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bQzIQa5YKvw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bQzIQa5YKvw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bQzIQa5YKvw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bQzIQa5YKvw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bQzIQa5YKvw"
        }
      },
      "contentDetails": {
        "videoId": "bQzIQa5YKvw",
        "videoPublishedAt": "2019-05-22T16:48:43Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cnjL4UUW_xazRFjA5LA5hiZq-9c",
      "id": "UkRRTVZZWnFtaXI1eGwwLmZUam01OURGaWZn",
      "snippet": {
        "publishedAt": "2017-08-17T16:22:44Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "late night vibes... 😴",
        "description": "Who said nights were for sleep? 😴\nLate night vibes 3 » https://www.youtube.com/watch?v=EkWq7X3D9M8\n🎧 Late Night Vibes on Spotify » https://chillhop.lnk.to/LateNightVibesYm\n\nTracklist: (* = Unreleased)\n0:00 idealism - dont say a word\n2:22 through & through - mom.\n* 4:52 Aso - Lucid Dreams\n* 7:37 fujitsu - too far gone\n9:21 Arbour - elusive\n* 10:54 Philanthrope - RealEstate\n12:32 idealism - midnight, somewhere\n15:47 Harris Cole - Louie's lullaby\n18:39 fujitsu - azure\n20:49 Knowmadic - Fade\n23:26 jinsang - undersea\n24:36 KUPLA - Still Breathing\n27:17 nohidea. - you don't have to cry\n\n🙌 Follow the artists\nidealism\nhttps://soundcloud.com/idealismus\nhttps://open.spotify.com/artist/6YJ4EgQzDfJnIHRbqIHAdD\n\nthrough & through\nhttps://soundcloud.com/through-and-through\nhttps://open.spotify.com/artist/5KnnO1gTaru3vtpr8cn8Im\n\naso\nhttps://soundcloud.com/aricogle\nhttps://open.spotify.com/artist/45Ui3GdcxzbdJhhTtZLXO8\n\nfujitsu\nhttps://soundcloud.com/fujitsuu1\nhttps://open.spotify.com/artist/3pSfwb3p6BVPTYDkNdgxS2\n\narbour\nhttps://soundcloud.com/arbour-eat-them\nhttps://open.spotify.com/artist/3pSfwb3p6BVPTYDkNdgxS2\n\nPhilanthrope\nhttps://soundcloud.com/philanthrope1\nhttps://open.spotify.com/artist/13ACz7DIictCpSYGglNTHs\n\nHarris Cole\nhttps://soundcloud.com/iamharriscole\nhttps://open.spotify.com/artist/6DnF6PBcTSsEZuEjXpK0gX\n\nknowmadic\nhttps://soundcloud.com/knowmadicbeats\nhttps://open.spotify.com/artist/0HcyeAioEKhfwVcJAoyN36\n\njinsang.\nhttps://soundcloud.com/jinsangbeats\nhttps://open.spotify.com/artist/5FsfZj0Mp6YwEWytuJUcWt\n\nKUPLA\nhttps://soundcloud.com/kuplasound\nhttps://open.spotify.com/artist/7daSp9zXk1dmqNxwKFkL35\n\nnohidea\nhttps://soundcloud.com/nohidea\nhttps://open.spotify.com/artist/5b0XQwyoJBFd3MwL2YxEPO\n\n📷 Original photo by Efren Lozano\nhttps://flic.kr/p/nkisfY\n\n☕ Follow Chillhop\nhttp://chillhop.com/listen\n\n❔ Useful Links\nSubmit Music » http://chillhop.com/submit\nUsing our Music in Videos » http://chillhoprecords.com/license",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fTjm59DFifg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fTjm59DFifg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fTjm59DFifg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fTjm59DFifg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fTjm59DFifg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fTjm59DFifg"
        }
      },
      "contentDetails": {
        "videoId": "fTjm59DFifg",
        "videoPublishedAt": "2017-08-17T16:22:44Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3k3uPoWyf937j5UTFXM45wbKdUI",
      "id": "UkRRTVZZWnFtaXI1eGwwLmpyVE1NRzB6SnlJ",
      "snippet": {
        "publishedAt": "2018-05-20T22:00:01Z",
        "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
        "title": "Samurai ☯ Japanese Lofi HipHop Mix",
        "description": "Samurai ☯ Japanese Lofi HipHop Mix \nLofi hip hop / Chill beats mix\nJapanese Mix\n\nListen on Spotify - https://goo.gl/vXtVi5\n\nPart 2 - https://www.youtube.com/watch?v=mMw6UFZuL9o\n\nTracklist:\n0:00 RŮDE - Eternal Youth\nhttps://soundcloud.com/itsrudeboy/eternal-youth\n\n3:23 wünsche - sunday vibes\nhttps://soundcloud.com/samuelwunsche/sundayvibes\n\n5:19 SPEECHLESS😶 - Shangri-La\nhttps://soundcloud.com/speechlesss/joy/s-rfbHi\n\n7:38 Elijah Nang イライジャ - Song of the Samurai. 侍\nhttps://soundcloud.com/nang-food/song-of-the-samurai\n\n11:02 Doze☯ - drunk off the liquor\nhttps://soundcloud.com/doze30/drunk-off-the-liquor\n\n14:13 Kerusu - First Snow\nhttps://soundcloud.com/kerusu/first-snow\n\n17:20 Elektro Bin - Little cloud \nhttps://soundcloud.com/elektrobin/little-cloud?in=elektrobin/sets/a-christmas-miracle\n\n19:45 Redrose - tragic hero \nhttps://soundcloud.com/redroseboiii/tragic-hero\n\n23:05 FTHRS - Don't Lie And Say You Love Me\nhttps://soundcloud.com/fthrs_official/dont-lie-and-say-you-love-me\n\n25:54 Elijah Nang イライジャ - Ohayō Gozaimasu おはようございます。// Good morning.\nhttps://soundcloud.com/nang-food/ohayo-gozaimasu-good-morning\n\n29:43 Elijah Nang イライジャ - Konnichiwa. こんにちは / Good Afternoon\nhttps://soundcloud.com/nang-food/konnichiwa\n\n33:39 RŮDE - for my friends\nhttps://soundcloud.com/itsrudeboy/for-my-friends\n\n36:24 oatmello - down in the shade\nhttps://soundcloud.com/oatmello/laying-down-in-the-shade\n\n38:37 toj - fuji\nhttps://soundcloud.com/tojjj/fuji\n\n\nArtwork by Eren Arik\nwww.erenarik.com\n\n\n💜 bootleg 💜\nsoundcloud - https://soundcloud.com/dabootlegboy\ntwitter - https://twitter.com/thebootlegboy\ninstagram - https://instagram.com/thebootlegboy\nspotify - https://spoti.fi/2IYXypl\n\n💕Subscribe for more vibes like this 💕",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jrTMMG0zJyI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jrTMMG0zJyI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jrTMMG0zJyI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jrTMMG0zJyI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jrTMMG0zJyI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "YouTube",
        "playlistId": "RDQMVYZqmir5xl0",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jrTMMG0zJyI"
        }
      },
      "contentDetails": {
        "videoId": "jrTMMG0zJyI",
        "videoPublishedAt": "2018-05-20T22:00:01Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 26,
    "resultsPerPage": 50
  }
}

    http_version: null
  recorded_at: Wed, 08 Jul 2020 02:18:02 GMT
recorded_with: VCR 5.1.0
